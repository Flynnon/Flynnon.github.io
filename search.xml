<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>《RabbitMQ实战》笔记(三)</title>
      <link href="/2018/07/11-RabbitMQ_3.html"/>
      <url>/2018/07/11-RabbitMQ_3.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　这是笔记的第三部分…..<br>　　由于Flynnon并不是专业运维人员,因此很多细节就略过不表了(例如:负载均衡具体实现,主备机制等等),真到了用到的时候,再百度/Google吧…<br><a id="more"></a></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>　　这里简单了解一下负载均衡技术和RabbitMQ集群的协作方法,也就是使用为什么使用负载均衡,使用之后代码需要变化多少.<br>　　这部分的操作本质上是对负载均衡软件/硬件的配置,使得它可以对请求进行转发与均衡.</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>　　上一篇提到的集群实现在使用的过程中还有很多可以优化的地方,其中一个就是在访问集群中的节点的时候需要指定IP,这样就会造成硬编码,且节点变更的时候不好维护.客户端必须对集群中的每一个节点IP做手动配置(也就是得有一个可用IP列表),并处理集群节点的选择和故障服务器的检测.由于节点的选择是由各个客户端自行进行选择的,因此负载也不会平均.  </p><p><img src="https://i.loli.net/2018/11/18/5bf04300bfc8d.png" alt="硬编码模式图示"></p><p>　　对于这种不太好的实践,可以使用负载均衡(感觉也有反向代理思路)技术来进行处理,即:使用一个单独的负载均衡器(代理)来接收所有请求,然后将请求转发到集群中的某一个节点.而这些对于客户端都是透明的,客户端只需要硬编码代理节点的IP地址(可以使用域名进一步进行配置解耦)即可.<br>　　代理节点还可以实现一些定制化功能,例如:故障节点检测(根据不同的算法对后端节点进行检测,剔除挂掉的节点),负载均衡(根据不同的算法进行转发,使得各个后端节点的负载相近),请求分析等等.</p><p><img src="https://i.loli.net/2018/11/18/5bf0436b2017f.png" alt="负载均衡模式图示"></p><p>　　由于RabbitMQ与客户端通信使用的是TCP,因此负载均衡软件需要能够做到<a href="http://network.51cto.com/art/201211/364614.htm">四层负载均衡</a>.本书使用的是HAProxy.</p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>　　接下来看看,我们的编码会产生什么样的变化.<br>　　对于生产者来说,本书的意思是无需特殊处理(消费者每次都会建立新的连接).但我并不是很认同….pika库的channel对象有一个add_on_cancel_callback方法,应该是为了处理这种情况的,但是还没有找到示例…先放着吧…  </p><p>　　对于消费者来说,由于需要处理连接异常(所连接的节点故障或者实际监听的队列所在的节点故障)的情况.因此需要做异常处理与重试.本书给出的处理方式也是很简单粗暴(不断的重建连接).下面的示例中所做的假设为当出现故障时(无论是上述哪一个),都会引发异常.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">connection = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">'rabbitmq'</span>))</span><br><span class="line">        channel = connection.channel()</span><br><span class="line">        method_ = channel.queue_declare(queue=<span class="string">'order_queue'</span>)</span><br><span class="line"></span><br><span class="line">        queue_name = method_.method.queue</span><br><span class="line">        channel.exchange_declare(exchange=<span class="string">'payment'</span>, exchange_type=<span class="string">'topic'</span>, auto_delete=<span class="keyword">False</span>, durable=<span class="keyword">True</span>)</span><br><span class="line">        channel.queue_bind(queue_name, <span class="string">'payment'</span>, routing_key=<span class="string">'ordering.create'</span>,)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_request</span><span class="params">(ch, method, props, body)</span>:</span></span><br><span class="line">            do_something()</span><br><span class="line"></span><br><span class="line">        channel.basic_consume(on_request, queue=queue_name, no_ack=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">        channel.start_consuming()</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="comment"># 这里忽略产生的异常,重建连接</span></span><br><span class="line">        <span class="keyword">if</span> connection:</span><br><span class="line">            connection.close()</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>　　插件是一种扩展作者未能预见到的服务器的行为方式,RabbitMQ的插件也是使用Erlang编写的,且和服务器一同运行在同一个Erlang VM中.细节可以参考<a href="https://www.rabbitmq.com/plugins.html">官方文档</a>.<br>　　这部分介绍了RabbitMQ Management插件的使用,感觉这个用处不大,就不详细写了.可以参考<a href="https://www.rabbitmq.com/management.html">官方文档</a>.</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>　　对于直接集成好的插件,无需安装.<br>　　对于没有集成的插件,需要下载(文件的后缀为.ez)后将其拷贝到插件目录(基本是在RabbitMQ安装目录下有一个plugins目录).  </p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有插件</span></span><br><span class="line">sudo rabbitmq-plugins list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用某插件,然后,需要重启RabbitMQ</span></span><br><span class="line">sudo rabbitmq-plugins <span class="built_in">enable</span> <span class="variable">$&#123;plugin_name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用某插件</span></span><br><span class="line">sudo rabbitmq-plugins <span class="built_in">disable</span> <span class="variable">$&#123;plugin_name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>　　这部分介绍的主要是一些性能优化(取舍)技巧与安全相关的内容.  </p><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><p>　　消息持久化可以避免由于RabbitMQ异常宕机(系统异常、软件bug等等原因)引起的消息丢失,是一个蛮好的扩展.<br>　　然而,由于持久化需要将消息写入磁盘(无需持久化的消息只需存在于内存中),因此会产生大量的磁盘IO,并降低消息周转速度.因此,一个比较好的实践是,对于不重要(可以容忍部分丢失)的消息,可以不做持久化处理.</p><h3 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认"></a>消息确认</h3><p>　　消息确认机制可以使得RabbitMQ对于消费者的消费情况有一个感知,从而在消费者发生故障的时候对消息进行重新投递,以保证消息一定会被消费成功(开启自动确认模式时,消费者故障/连接中断都会使得消息丢失).并且可以通过这个机制来控制消息的投递速率.<br>　　然而,相应的,这个机制也会使得消费者的消费速度变慢(在消费成功/失败后需要返回状态),且使得RabbitMQ的处理逻辑变复杂(在每一条消息投递出去后,都需要关注其结果).  </p><p>　　因此,一个比较好的实践是,对于可以容忍部分丢失的消息,消费者可以开启自动应答以加快处理速度.</p><h3 id="消费路由"><a href="#消费路由" class="headerlink" title="消费路由"></a>消费路由</h3><p>　　这部分主要是回顾了下fanout,direct和topic三种交换机的特性,并简单介绍了交换机及绑定的存储方式.<br>　　主要介绍了功能最强大的topic交换机的一些细节.例如:使用Trie树(字典树)来存储绑定路由键模式,以支持快速查询.并给出了RabbitMQ官网的<a href="https://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/">博客一</a>和<a href="https://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/">博客二</a>两篇参考资料.<br>　　通常情况下,topic模式相比其余两种,会慢一些,并且内存占用会多一些.</p><h3 id="投递消息"><a href="#投递消息" class="headerlink" title="投递消息"></a>投递消息</h3><p>　　本书给出了一个RabbitMQ中消息投递的流程图.</p><p><img src="https://i.loli.net/2018/11/18/5bf043b6bb0cb.png" alt="消息投递流程图"></p><p>　　这个过程有如下需要注意的地方:<br>　　1. 从客户端的角度来看,异步投递会比同步投递快一些;<br>　　2. 如果队列是空的,且消费者准备好接受消息,那么,消息不会被放到队列中,而是被直接投递给消费者,这会极大的提升消息处理速度(当然,开启消息投递,且消费者没有及时返回确认时,还需要进行其它处理逻辑);<br>　　3. 在持久化消息到达持久化队列时,会被写入磁盘(持久存储),同时内存中也会存储一份以提升消息投递速度.否则,消息会被写入瞬态存储.在RabbitMQ服务器内存不足的情况下,一部分消息会被刷到磁盘上(瞬态存储);<br>　　4. 当RabbitMQ需要重启并恢复持久化队列时,只会查看持久存储中的内容,瞬态存储会被清空;<br>　　5. 为了保证投递速率,应该尽可能保证队列为空.</p><h3 id="内存使用率"><a href="#内存使用率" class="headerlink" title="内存使用率"></a>内存使用率</h3><p>　　关于内存占用,官方文档为: <a href="https://www.rabbitmq.com/memory-use.html">memory-use</a>.当然…Flynnon没有看…  </p><p>　　队列声明: 当声明队列时,如果队列的durable属性设置为true的话,会在rabbit_queue和rabbit_durable_queue两个表中增加记录,否则只会在rabbit_queue表中增加记录.以上每一条记录大约占用29个字的大小(这里的字是Erlang中的概念,与操作系统相关,32位系统中,字长为4字节,64位系统中,字长为8字节).并且,依据AMQP规范,队列会被绑定到匿名交换机上.综上,大致流程如下:</p><p><img src="https://i.loli.net/2018/11/18/5bf043b6bb0cb.png" alt="队列声明处理步骤"></p><p>　　交换机声明: 当声明交换机时,RabbitMQ会在rabbit_exchange表创建一条大约29字的记录.若交换机进行了持久化声明,也会在rabbit_durable_exchange上创建一条记录.图示如下:</p><table><thead><tr><th>交换机类型</th><th>rabbit_exchange</th><th>rabbit_durable_exchange</th></tr></thead><tbody><tr><td>持久化交换机</td><td>x</td><td>x</td></tr><tr><td>瞬时交换机</td><td>x</td><td></td></tr><tr><td>字/记录</td><td>29</td><td>29</td></tr></tbody></table><p>　　绑定声明:<br>　　fanout与direct类型的交换机的绑定内存占用如下:</p><table><thead><tr><th>绑定类型(队列-交换机)</th><th>rabbit_route</th><th>rabbit_durable_route</th><th>rabbit_semi_durable_route</th><th>rabbit_reverse_route</th></tr></thead><tbody><tr><td>持久化-持久化</td><td>x</td><td>x</td><td>x</td><td>x</td></tr><tr><td>持久化-瞬时</td><td>x</td><td></td><td>x</td><td>x</td></tr><tr><td>瞬时-瞬时</td><td>x</td><td></td><td></td><td>x</td></tr><tr><td>瞬时-持久化</td><td>x</td><td></td><td></td><td>x</td></tr><tr><td>字/记录</td><td>44</td><td>44</td><td>44</td><td>44</td></tr></tbody></table><p>　　topic类型的交换机: 除了上述规则外,topic类型的交换机还需要rabbit_topic_trie_binding和rabbit_topic_trie_edge两张表来存放匹配信息.绑定会存放在rabbit_topic_trie_binding表中,表中的一条记录大概占用45个字.且topic模式中有多少部分就会有多少条记录插入到rabbit_topic_trie_binding表中.</p><h3 id="Erlang进程计数"><a href="#Erlang进程计数" class="headerlink" title="Erlang进程计数"></a>Erlang进程计数</h3><p>　　这里展示了Erlang进程计数对于RabbitMQ的影响.</p><h4 id="Erlang进程"><a href="#Erlang进程" class="headerlink" title="Erlang进程"></a>Erlang进程</h4><p>　　Erlang的进程是指虚拟机管理的进程,而不是操作系统的重量级进程.这些进程的创建和销毁都非常迅速,且进程之间发送消息非常快速,同一时间可以拥有大量的进程.<br>　　由于进程运行于Erlang虚拟机上,因此进程在所有的操作系统上都具有相同的行为方式.<br>　　Erlang进程不共享任何内存，是完全独立的,各个进程之间唯一的交互方式就是消息传递.</p><h4 id="最大进程数"><a href="#最大进程数" class="headerlink" title="最大进程数"></a>最大进程数</h4><p>　　可以在启动RabbitMQ时指定Erlang节点上能运行的最大进程数(也就是运行rabbitmq-server -detached时指定SERVER_ERL_ARGS的+P选项来增加上限,当然….Flynnon没有进行尝试….).如果不指定的话,RabbitMQ默认的设置就会生效,每个Erlang节点可以有1048576(也就是2^20)个进程(一般来说肯定是够用了).  </p><p>　　当Erlang的进程数超过了设置的最大进程数时,Erlang就会崩溃.进程数消耗如下:</p><table><thead><tr><th>行为</th><th>消耗进程数</th></tr></thead><tbody><tr><td>新建连接</td><td>4</td></tr><tr><td>新建信道</td><td>4</td></tr><tr><td>队列声明</td><td>1</td></tr></tbody></table><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本书还有一些比较高级的内容,如:SSL配置,集群设置等等,但是Flynnon暂时用不太上,因此就不记录了…</p><!-- hard_coded.png, rabbitmq_proxy.png, rabbitmq_message_delivery.png, rabbitmq_queue_declare.png -->]]></content>
      
      
      
        <tags>
            
            <tag> 学习之路 </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《RabbitMQ实战》笔记(二)</title>
      <link href="/2018/07/02-RabbitMQ_2.html"/>
      <url>/2018/07/02-RabbitMQ_2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　这是笔记的第二部分…..<a id="more"></a></p><h2 id="RabbitMQ与RPC"><a href="#RabbitMQ与RPC" class="headerlink" title="RabbitMQ与RPC"></a>RabbitMQ与RPC</h2><p>　　传统上,为了实现系统间的相互通信,可以使用RPC技术(Remote Procedure Call),而有很多方法可以实现远程过程调用,但是大多数实现都会使得服务端与客户端紧密相连(例如Flynnon公司使用的Django-Json-RPC框架…).<br>　　然而,大多数RPC的实现是点对点的,也就是说客户端需要知道服务端的地址,然后才能进行连接并调用.这种设计在系统规模比较小的时候当然很好用,但是一旦系统规模变大,问题就来了.<br>　　这里的问题主要是指可扩展性,当有多台提供相同服务的RPC服务器存在时,如何选择呢?或者有多台提供的服务不同的RPC服务器存在时,如何定位服务呢?SOAP和某些RPC架构采取了复杂的补充协议和服务目录来做这个事情,但这也带来了额外的复杂性和bug几率,并且传统的RPC是应答式的,请求主动权在客户端,当服务端挂掉的时候,需要客户端进行重连,还得找到能提供相同服务的服务端,这增加了客户端的工作量.<br>　　RabbitMQ提供了一种模式可以实现RPC,可以解决以上的问题.下面进行详细介绍.  </p><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><p>　　但是上一篇笔记也有提到,AMQP的消息是单向的,那么,服务端如何将信息返回客户端呢(尤其是,服务端无法得到客户端的信息)?<br>　　RabbitMQ给出的解决方案是:使用消息回发应答.<br>　　具体的流程如下:<br>　　客户端声明一个队列A,在投递消息时将A的名称放置到消息头的reply_to字段中,然后对该队列进行监听.<br>　　服务端检查reply_to字段,在处理完成后将结果投递到该字段所指的队列中(还记得每个队列默认绑定一个队列么…).<br>　　客户端从被监听的队列中得到某个消息时,进行校验(是不是自己要接收的消息),如果是的话,取出消息,解除监听并进行后续处理即可.</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>　　其实这个过程还是慢简单易懂的,但是如何保证消息不串呢?<br>　　可以使用以下方法:<br>　　1. 每次在进行队列声明时都不指定队列名(RabbitMQ自动生成),这样使得各个客户端所使用的队列不同,且设置auto_delete参数为True;<br>　　2. 在进行队列声明时设置exclusive参数为True,确保只有当前消费者可以读取队列上的消息.  </p><p>　　上面使用的方法已经可以用了,但是每次连接都新建一个queue其实是有点费资源的,因此我们可以进行一些优化.由于每一条消息只能被消费一次,因此我们不能在多个客户端之间共享队列,但是对于一个客户端来说,我们可以合并多次相关请求,也就是为每一个客户端建一个queue(因为RPC语义上就是阻塞的,因此每一个客户端使用一个queue即可,因为同一时间不会有多个无关的服务端消息到达).  </p><p>　　这时,我们就必须标识每一次的请求了(消息可能乱序,可能重传,可能丢失…),具体采取的方法是:在发送消息时,放入一个唯一的correlation_id属性,服务端在投递响应消息时,也将该字段置入消息中即可.这样,客户端就可以通过校验这个字段来判断是不是自己所需要的响应了.</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>　　下面给出一个简单的RPC客户端实现(这部分有参考<a href="http://www.rabbitmq.com/tutorials/tutorial-six-python.html">官方教程</a>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RPCCallTimeoutException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RPCClient</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, connection=None, timeout=<span class="number">2</span>, open_confirm=True)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化连接</span></span><br><span class="line">        self.connection = connection <span class="keyword">or</span> pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">'rabbitmq'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取channel</span></span><br><span class="line">        self.channel = self.connection.channel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开启消费者确认模式</span></span><br><span class="line">        <span class="keyword">if</span> open_confirm:</span><br><span class="line">            self.channel.confirm_delivery()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义私有的,自动删除的队列</span></span><br><span class="line">        result = self.channel.queue_declare(exclusive=<span class="keyword">True</span>, auto_delete=<span class="keyword">True</span>)</span><br><span class="line">        self.callback_queue = result.method.queue</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义超时时间</span></span><br><span class="line">        self.timeout = timeout</span><br><span class="line">        <span class="comment"># 响应值</span></span><br><span class="line">        self.response = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 唯一标识</span></span><br><span class="line">        self.corr_id = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 设置监听</span></span><br><span class="line">        self.channel.basic_consume(self.on_response, no_ack=<span class="keyword">True</span>,</span><br><span class="line">                                   queue=self.callback_queue)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_response</span><span class="params">(self, ch, method, props, body)</span>:</span></span><br><span class="line">        <span class="comment"># 校验消息是否为自己所需要的消息</span></span><br><span class="line">        <span class="keyword">if</span> self.corr_id == props.correlation_id:</span><br><span class="line">            self.response = body</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_timeout</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 超时时抛出异常</span></span><br><span class="line">        <span class="keyword">raise</span> RPCCallTimeoutException()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, exchange, routing_key, body, time_limit=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span> body <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 初始化RPC的响应</span></span><br><span class="line">        self.response = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 初始化生成唯一标识</span></span><br><span class="line">        self.corr_id = str(uuid.uuid4())</span><br><span class="line">        <span class="comment"># 投递消息(调用RPC)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.channel.basic_publish(exchange=exchange,</span><br><span class="line">                                   routing_key=routing_key,</span><br><span class="line">                                   properties=pika.BasicProperties(</span><br><span class="line">                                           reply_to=self.callback_queue,</span><br><span class="line">                                           correlation_id=self.corr_id,</span><br><span class="line">                                   ),</span><br><span class="line">                                   body=body):</span><br><span class="line">            <span class="keyword">raise</span> RPCCallTimeoutException()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置超时触发器</span></span><br><span class="line">        <span class="keyword">if</span> self.timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.connection.add_timeout(self.timeout, self.on_timeout)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 轮询结果</span></span><br><span class="line">        <span class="keyword">while</span> self.response <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.connection.process_data_events(time_limit=time_limit)</span><br><span class="line">        <span class="comment"># 返回响应</span></span><br><span class="line">        <span class="keyword">return</span> self.response</span><br><span class="line"></span><br><span class="line">    __call__ = call</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后续的扫尾工作,这里不关闭connection是因为它可能会被外部复用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.channel <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.channel.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -- 调用 --</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">rpc_client = RPCClient()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    resp = rpc_client(exchange=<span class="string">'payment'</span>, routing_key=<span class="string">'ordering.create'</span>, body=json.dumps(&#123;<span class="string">'ordering_no'</span>:</span><br><span class="line">                                                                                          <span class="string">'ordering_no'</span>&#125;))</span><br><span class="line">    print(json.loads(resp))</span><br><span class="line"><span class="keyword">except</span> RPCCallTimeoutException:</span><br><span class="line">    <span class="comment"># 超时处理</span></span><br><span class="line">    print(<span class="string">'超时啦，啦啦啦啦'</span>)</span><br></pre></td></tr></table></figure><p>　　下面给出一个简单的RPC服务端实现.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取连接</span></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="string">'rabbitmq'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取信道</span></span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 定义队列</span></span><br><span class="line">method_ = channel.queue_declare(queue=<span class="string">'order_queue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种取queue的name的方法</span></span><br><span class="line">queue_name = method_.method.queue</span><br><span class="line"><span class="comment"># 定义交换机</span></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">'payment'</span>, exchange_type=<span class="string">'topic'</span>, auto_delete=<span class="keyword">False</span>, durable=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># 建立绑定</span></span><br><span class="line">channel.queue_bind(queue_name, <span class="string">'payment'</span>, routing_key=<span class="string">'ordering.create'</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体处理逻辑的方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_order</span><span class="params">(ordering_no)</span>:</span></span><br><span class="line">    <span class="comment"># 处理业务逻辑</span></span><br><span class="line">    <span class="keyword">return</span> ordering_no</span><br><span class="line">    <span class="comment"># return do_something(ordering_no)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收到消息时的回调</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_request</span><span class="params">(ch, method, props, body)</span>:</span></span><br><span class="line">    <span class="comment"># 取出参数</span></span><br><span class="line">    data = json.loads(body)</span><br><span class="line">    ordering_no = data.get(<span class="string">'ordering_no'</span>, <span class="keyword">None</span>)</span><br><span class="line">    <span class="comment"># 对参数进行校验</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ordering_no:</span><br><span class="line">        <span class="comment"># 发现参数不合法时,</span></span><br><span class="line">        result = <span class="string">'params_wrong'</span></span><br><span class="line">        code = <span class="string">'fail'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = create_order(ordering_no)</span><br><span class="line">        code = <span class="string">'success'</span></span><br><span class="line">    <span class="comment"># 发送响应</span></span><br><span class="line">    <span class="comment"># 这里可以发出响应的原因是,在本函数结束之前,pika库不会再次开始消费,也就是本channel目前是空闲的</span></span><br><span class="line">    ch.basic_publish(exchange=<span class="string">''</span>,</span><br><span class="line">                     routing_key=props.reply_to,</span><br><span class="line">                     <span class="comment"># 注意,这里将消息标识置入响应中</span></span><br><span class="line">                     properties=pika.BasicProperties(correlation_id = props.correlation_id),</span><br><span class="line">                     body=json.dumps(&#123;<span class="string">'result'</span>: result, <span class="string">'code'</span>: code&#125;))</span><br><span class="line">    <span class="comment"># 对RabbitMQ发出确认</span></span><br><span class="line">    ch.basic_ack(delivery_tag=method.delivery_tag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限流</span></span><br><span class="line">channel.basic_qos(prefetch_count=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 设置监听的队列</span></span><br><span class="line">channel.basic_consume(on_request, queue=queue_name, no_ack=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始阻塞式监听</span></span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure><h3 id="后续脑洞"><a href="#后续脑洞" class="headerlink" title="后续脑洞"></a>后续脑洞</h3><p>　　其实上述的demo没有实现线程安全,但是大概也是够用了..然而感觉还是不够完美,创建的队列还是太多了,感觉可以实现一个队列名称池进一步优化其性能…然而…暂时用不上,再说吧~~~<br>　　上述的RPC服务器就可以很容易的水平扩展了,只要RabbitMQ不崩溃(当然,客户端和服务端需要连接同一个RabbitMQ实例)….  </p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>　　我们需要明白,RabbitMQ随时可能挂掉(操作系统异常,断电,RabbitMQ的bug等等原因),如果这时候我们仅仅有一个实例的话,所有处于上游的服务就都会产生问题,从而导致应用雪崩式崩塌….解决这个问题的方法就是使用RabbitMQ的集群.<br>　　首先,吹吹牛逼:RabbitMQ的内建集群简单易用,只需要十分钟就能完成搭建,并且还无需停止服务(当然,你得懂得怎么搭).接下来详细进行介绍.  </p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><p>　　首先,我们要考虑为啥要用集群?<br>　　使用RabbitMQ集群且配置得当的话可以有以下两个好处: 1.生产者和消费者能够在某些节点挂掉的时候继续运行;2.可以通过添加更多的节点来线性的扩展吞吐量,提高性能.</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><h4 id="存储信息"><a href="#存储信息" class="headerlink" title="存储信息"></a>存储信息</h4><p>　　先来看看,RabbitMQ如何记录其中的各种基础组件并将它们装配成一个消息通信服务.</p><h5 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h5><p>　　事实上,单机版的RabbitMQ会记录以下四种类型的内部元数据:<br>　　1. 队列,包括:名称以及特殊属性(是否可持久化,是否排他,是否可删除等等);<br>　　2. 交换机,包括:名称,类型和特殊属性(是否可持久化等等);<br>　　3. 绑定,可以认为是一张展示了如何路由消息到队列的信息;<br>　　4. vhost,为vhost内的队列、交换机、绑定提供命名空间和安全属性.</p><p>　　RabbitMQ默认会将这些信息存储于内存中(需要持久化的信息会存储在硬盘上,以供重启时重建).  </p><h5 id="集群版"><a href="#集群版" class="headerlink" title="集群版"></a>集群版</h5><p>　　当RabbitMQ变成集群之后,它需要额外的记录一些新的元数据类型: 集群节点位置、节点与其它类型(上述类型)元数据的关系.<br>　　同样的,可以设置将元数据存在内存中或者磁盘中.</p><p>　　但是具体的存储方法,有了变化:<br>　　<strong>队列</strong>: 在集群模式下,仅仅会在单个节点而不是全部节点上创建完整的队列信息(元数据,状态,内容).也就是说,只有队列的所有者节点知道有关队列的所有信息,其余节点仅仅存储该队列的元数据以及指向该队列的指针(去往该队列的途径).  </p><p>　　这个机制是可以理解的,否则当队列本身也在整个集群中共享(冗余)的话,RabbitMQ会变的异常复杂(需要考虑的事情变多),例如转发消息到某个节点上的队列还是全部队列?消费者监听哪个节点?节点之间要不要分工?<br>　　RabbitMQ默认不将队列和内容复制到所有节点上,这大概是基于以下两方面的考虑:<br>　　1. 存储空间.很容易理解,这样并没有获得额外的空间节省;<br>　　2. 性能.若在消息发布时将消息复制到每一个节点,则对于持久化消息,会触发多次磁盘写入,且新增节点时,网络与负载压力都会变大,性能相比单机版并没有明显提升(甚至会下降).</p><p>　　当某个节点挂掉的时候,会发生什么事情呢?答案是,该节点所有的队列与绑定都暂时消失了(可能会被持久化).监听那些队列的消费者丢失了订阅信息,且匹配到该队列的消息也会丢失(队列不存在了).同时,对于持久化的队列,也不能进行重新声明(会产生一个 404错误,感觉是由于其余节点指向该队列的指针还存在),只能恢复挂掉的节点并使用.这个机制保证了当失败节点重新加入集群时,该节点上的队列信息不丢失.  </p><p>　　<strong>交换机</strong>: 在集群模式下,交换机的元数据是在各个节点之间共享的.这里需要说明的是,交换机仅仅是一个数据结构(包括了名称和一个队列绑定列表),并不会对消息进行任何操作(Flynnon看到这里的时候有点懵逼…).<br>　　实际上,当我们将消息发布到交换机时,是channel来将消息上的路由键同交换机的绑定键进行比较,然后路由消息(也就是说,真正承担交换机职责的是channel).由于交换机仅仅是一张查询表,因此在整个集群中进行复制会简单很多(只需要同步信息即可).因此,当创建新的交换机时,RabbitMQ会将这个查询表添加到集群上的所有节点上(这带来的好处就是当某个节点挂掉之后,只需重新启动,消息就可以被立即转发到对应的节点上).<br>　　在节点挂掉的这段时间内,因为交换机(路由信息)还存在,因此消息生产者的channel可能会继续向目标队列投递消息(这些消息会丢失).为了避免消息丢失所带来的后果,可以使用事务或者发送方确认以获取这个信息并进行补偿.  　　</p><h4 id="元数据存储"><a href="#元数据存储" class="headerlink" title="元数据存储"></a>元数据存储</h4><p>　　无论是单机版还是集群版,节点都是内存节点(RAM Node)或者磁盘节点(Disk Node)之一.  </p><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>　　对于队列、交换机、绑定、用户、权限和vhost的元数据,内存节点会将它们存放在内存中,而磁盘节点会将它们存放在磁盘中.由于内存的易失性(重启后,数据会丢失),因此单节点系统仅能是磁盘节点,而在集群(多节点系统)中,可以将部分节点(最少也得有一个磁盘节点)声明为内存节点以获得更加快速的元数据声明速度(当在集群中进行声明操作的时候,需要等待每个节点都成功提交变更后才返回结果,想一想使用RabbitMQ作为RPC的时候得有多慢….).  </p><h5 id="取舍"><a href="#取舍" class="headerlink" title="取舍"></a>取舍</h5><p>　　内存节点可以获得更好的性能,而磁盘节点可以有效的保存元数据.那么,如何进行权衡呢?  </p><p>　　先来看看,如果集群中只有一个磁盘节点,而它又恰好挂掉了,会发生什么.<br>　　首先,它仍然能正产工作(因为元数据可以在其余节点找到),其次,由于数据无法固化,因此无法再进行新的声明操作了(例如:创建队列、创建交换机、创建绑定、添加用户、修改权限、添加或者删除集群节点等等).<br>　　因此为了避免上述发生上述情况,在集群中至少要存在两个磁盘节点,这样当其中一个挂掉之后,另一个还能进行数据固化以保存元数据变更.<br>　　那,如果内存节点挂掉了,会发生什么…<br>　　实际上,上述表述有问题,内存节点还是会存储一些信息(集群中磁盘节点的位置)在磁盘上,这样当它挂掉并重启之后就可以从磁盘上读取到所有的磁盘节点的信息,并依次尝试进行连接与元数据同步了.很好理解的是,一旦磁盘节点全部挂掉,内存节点之间或者说与集群之间就没有强关系了,也就是说重启后无法正确加入集群.  </p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>　　接下来,实际配置一个集群.  </p><h4 id="部署集群"><a href="#部署集群" class="headerlink" title="部署集群"></a>部署集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /bin/bash</span></span><br><span class="line"><span class="comment"># 配置一个简单的集群</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 貌似在rabbitmq安装完成后,会默认启动一个实例,可以先关掉(不关掉的话,以下两个端口号都得变)</span></span><br><span class="line"><span class="comment"># 注意,以下两条命令分别在两个不同的服务器上执行(在一台服务器上执行也可以,需配置不同的端口号),在/etc/hosts下需要配置另外一个的host</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动第一个节点, 这个节点的hostname flynnon 在/etc/hosts文件中配置为当前IP</span></span><br><span class="line">RABBITMQ_NODENAME=rabbit@flynnon RABBITMQ_NODE_PORT=5672 sudo rabbitmq-server -detached</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动第二个节点, 这个节点的hostname fly_bwg 在/etc/hosts文件中配置为当前IP</span></span><br><span class="line">RABBITMQ_NODENAME=rabbit@fly_bwg RABBITMQ_NODE_PORT=5672 sudo rabbitmq-server -detached</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止rabbit@flynnon节点(这里使用 -n 指定在哪个节点上执行命令,不指定为默认节点)</span></span><br><span class="line">sudo rabbitmqctl  -n rabbit@fly_bwg stop_app</span><br><span class="line"><span class="comment"># 清空rabbit@flynnon节点中的所有元数据,以避免元数据冲突</span></span><br><span class="line">sudo rabbitmqctl  -n rabbit@fly_bwg reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在fly_bwg这个机器上执行以下指令,将 rabbit@fly_bwg 加入集群(后面的参数是指集群中磁盘节点的列表.若将本节点置入,则本节点就成为了一个磁盘节点,否则本节点为内存节点)</span></span><br><span class="line">sudo rabbitmqctl -n rabbit@fly_bwg join_cluster rabbit@flynnon</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">sudo rabbitmqctl -n rabbit@flynnon  cluster_status</span><br></pre></td></tr></table></figure><p>　　补充:<br>　　在正常执行以上命令时,出现了如下问题..  </p><p>![执行是遇到的问题1-cookie][1]</p><p>　　这个很容易看懂,还记得前一篇提到的Erlang的Cookie机制么?出错的原因就是两个节点的cookie的值不一样,只需要保证所有节点的.erlang.cookie文件(如果我们使用解压缩方式安装部署的rabbitmq，那么这个文件会在${home}目录下，也就是$home/.erlang.cookie;如果我们使用rpm等安装包方式进行安装的，那么这个文件会在/var/lib/rabbitmq目录下)中的内容相同就行了,貌似应该先修改cookie文件再重启(使用rabbitmqctl stop &amp;&amp; rabbitmq-server start).<br>　　注意,如果rabbitmqctl无法连接当前主机上的节点,则需要重启rabbitmq-server(因为,rabbitmqctl的cookie是改完之后的,而rabbitmq-server可能还是原来的配置).</p><h4 id="移除节点"><a href="#移除节点" class="headerlink" title="移除节点"></a>移除节点</h4><p>　　移除节点十分简单,只需要使用如下命令即可.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将某个节点移除出它所在的集群(此时此节点会通知集群自己要离开集群,集群会进行处理而不是认为节点异常)</span></span><br><span class="line">sudo rabbitmqctl -n rabbit@bwg_flynnon stop_app</span><br><span class="line">sudo rabbitmqctl -n rabbit@bwg_flynnon reset</span><br><span class="line">sudo rabbitmqctl -n rabbit@bwg_flynnon start_app</span><br></pre></td></tr></table></figure><p>　　如果不使用以上命令进行移除操作的话,集群会认为节点出了故障,并等待其恢复(例如:要离开的节点是一个磁盘节点,那么这段时间内无法进行新的定义操作).</p><h3 id="镜像队列"><a href="#镜像队列" class="headerlink" title="镜像队列"></a>镜像队列</h3><p>　　前面有提到过,RabbiMQ的队列只能存在于集群中的一个节点上,但是这样其实不能实现高可用.因此在2.6.0版本的时候,RabbitMQ团队开发了内建的双活冗余选项:镜像队列.<br>　　与普通队列类似,镜像队列的主拷贝仅仅存在于某一个节点(master节点)上,然而在其它节点上存在多个从队列(slave)拷贝,一旦主队列出现故障(节点挂掉,网络问题等等原因),最老的(存活时间最久的)从队列即被推举为新的主队列节点.也就是说通过冗余数据(队列)的方式达到了一定程度上的高可用.<br>　　这部分可以参考<a href="https://blog.csdn.net/u013256816/article/details/71097186">朱小厮的博客</a>或者<a href="http://www.rabbitmq.com/ha.html">官方文档</a>,讲的蛮好的.这本书貌似有点过时(以后再改正吧).</p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>　　镜像队列的声明方式与普通队列相比,仅仅是多了一个x-ha-policy参数.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">'localhost'</span>))</span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明镜像队列, arguments参数是一些自定义的参数(Custom key/value arguments for the queue)</span></span><br><span class="line">arguments = &#123;<span class="string">'x-ha-policy'</span>: <span class="string">'all'</span>&#125;</span><br><span class="line">channel.queue_declare(queue=<span class="string">'test_queue'</span>, durable=<span class="keyword">True</span>, exclusive=<span class="keyword">False</span>, auto_delete=<span class="keyword">False</span>, arguments=arguments)</span><br></pre></td></tr></table></figure><p>　　x-ha-policy的值代表的是,从队列拷贝存在的节点位置.<br>　　设置为all,则此队列会在集群的所有节点上产生镜像队列,同时新增节点时,无需人工干预,自动添加拷贝.<br>　　但,一般无需太多拷贝队列存在,因此有时需要能够手动指定在哪些节点上增加镜像.这样当然也可以(RabbitMQ2.7以后),但就需要硬编码了,且在某个声明的节点找不到(挂掉或者被用集群中移除)时,声明会失败.尽量不要这样声明,通用性不强.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">'localhost'</span>))</span><br><span class="line">channel = connection.channel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明镜像队列,指定要建立镜像队列的节点列表</span></span><br><span class="line">arguments = &#123;</span><br><span class="line">    <span class="string">'x-ha-policy'</span>: <span class="string">'nodes'</span>,</span><br><span class="line">    <span class="string">'x-ha-policy-params'</span>: [<span class="string">'rabbit@fly_bwg'</span>, <span class="string">'rabbit@flynnon'</span>],</span><br><span class="line">&#125;</span><br><span class="line">channel.queue_declare(queue=<span class="string">'test_queue'</span>, durable=<span class="keyword">True</span>, exclusive=<span class="keyword">False</span>, auto_delete=<span class="keyword">False</span>,</span><br><span class="line">                        arguments=arguments)</span><br></pre></td></tr></table></figure><h4 id="消息同步"><a href="#消息同步" class="headerlink" title="消息同步"></a>消息同步</h4><p>　　默认情况下,新增的拷贝节点只会包含从其存在之后从镜像队列发来的消息,RabbitMQ(2.7之前)不会将镜像队列中现存的内容与新增的拷贝节点进行同步处理.新增从拷贝自始至终不会知道旧消息的存在,旧消息全部被消费后,新增从拷贝会与现存队列状态相同.<br>　　但是,如果在旧消息被消费之前就将旧的节点移除的话,新的拷贝节点会被推举为新的主节点,这样,旧的消息就会丢失.因此,在删除旧的节点前,需要确保消息已经同步完成.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有从节点的pid, 并列出所有同步完成的pid, 当这两个列表完全相同时, 就可以安全移除旧节点了</span></span><br><span class="line">rabbitmqctl list_queues name pid slave_pids synchronised_slave_pids</span><br></pre></td></tr></table></figure><h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><p>　　某种程度上,可以认为镜像队列拥有一个隐藏的fanout交换机,指示channel将消息分发到所有的队列从拷贝上.<br>　　当我们在镜像队列上使用发送方确认时,只有所有的主从队列都正确(注意是全部队列)收到消息后,才会返回成功.但是如果消息在路由到从拷贝之前,镜像队列的主拷贝发生了故障,那么,某个从拷贝会被推举为新的主拷贝,此时消息永远不会到达,就会返回失败.  </p><p>　　事实上,由于以上机制,某个从节点挂掉的时候,附加在镜像队列上的所有消费者不会感知到(从技术上讲,它们实际上是附加在队列主拷贝上的,不会与从拷贝产生关联).<br>　　但,当托管主拷贝的节点挂掉的话,所有的消费者都需要重新附加并监听新的队列主拷贝.这时消费者有两种情况:<br>　　1. 正好是通过故障节点连接到集群.这种情况就很简单了,因为节点挂了,因此connection(TCP连接)也就没了,在消费者重新附加到集群中的某个节点时,会自动选取新的队列主拷贝;<br>　　2. 通过一个完好的节点连接到集群.这种情况下,RabbitMQ会发送一个消费者取消(consumer cancellation)通知,以告知它们不能再附加到原来的队列主拷贝了(一般AMQP客户端接到这个通知后会抛出一个异常供我们进行捕获),然后,消费者重新附加即可.但是当消费者客户端不支持消费者取消就没什么比较好的方法了(此时最好不要使用镜像队列).  </p><p>　　那些因为主节点挂掉而产生的消费未确认消息,RabbitMQ会将它们重新入队(无法分辨没有确认和确认丢失的情况).</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习之路 </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《RabbitMQ实战》笔记(一)</title>
      <link href="/2018/06/26-RabbitMQ_1.html"/>
      <url>/2018/06/26-RabbitMQ_1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　公司的一些异步任务是通过Django+RabbitMQ+Celery实现的,编写的时候感觉真的蛮简单的,刚开始了解它只是简单的看了下<a href="http://www.rabbitmq.com/getstarted.html">RabbitMQ的入门教程</a>并实现了这些demo,通过这些我明白了如何使用RabbitMQ,但是一些细节并没有弄的很清楚,于是这段时间就看了下《RabbitMQ实战  高效部署分布式消息队列》这本书.<br>　　为了避免忘记….记一下笔记…..<a id="more"></a></p><h2 id="天降奇兵-RabbitMQ简史"><a href="#天降奇兵-RabbitMQ简史" class="headerlink" title="天降奇兵(RabbitMQ简史)"></a>天降奇兵(RabbitMQ简史)</h2><p>　　这一章主要介绍了消息队列、AMQP、RabbitMQ的历史,并且介绍了如何安装RabbitMQ.<br>　　安装这一步可以参考<a href="https://www.rabbitmq.com/install-debian.html">RabbitMQ安装</a>,当然我更倾向于使用docker来启动实例,这样我们就可以忽略一些安装时的细节,相应的会简单很多.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># Ubuntu下正常安装Erlang和RabbitMQ</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载安装包</span></span><br><span class="line"><span class="comment"># 这里注意下版本,我是在https://packages.erlang-solutions.com/erlang/#tabs-debian找的,在我使用的时候21.0有点问题</span></span><br><span class="line">wget http://packages.erlang-solutions.com/site/esl/esl-erlang/FLAVOUR_1_general/esl-erlang_20.1-1~ubuntu~xenial_amd64.deb -O erlang.deb &amp;&amp; sudo dpkg -i erlang.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补全依赖,并再次安装</span></span><br><span class="line">apt-get -f -y install &amp;&amp; sudo dpkg -i erlang.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加RabbitMQ的源</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://dl.bintray.com/rabbitmq/debian xenial main"</span> | sudo tee /etc/apt/sources.list.d/bintray.rabbitmq.list</span><br><span class="line"><span class="comment"># 添加公钥</span></span><br><span class="line">wget -O- https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc | apt-key add -</span><br><span class="line"><span class="comment"># 更新仓库并进行安装</span></span><br><span class="line">apt update &amp;&amp; sudo apt install rabbitmq-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后续扫尾工作</span></span><br><span class="line">apt -y autoremove &amp;&amp; apt -y autoclean</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># 通过Docker启动RabbitMQ</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置RabbitMQ文件的目录地址</span></span><br><span class="line">RABBITMQ_DIR=<span class="string">'/home/flynnon/docker_volumes/rabbitmq'</span></span><br><span class="line"><span class="comment"># 启动容器,并映射目录及开放端口号</span></span><br><span class="line"><span class="comment"># 这里使用了 rabbitmq-management 的镜像,感觉这个插件还是很好用的.</span></span><br><span class="line">docker run -d -e RABBITMQ_NODENAME=rabbit --name rabbit -p 4369:4369 -p 5671:5671 -p 5672:5672 -p 15671:15671 -p 15672:15672 -p 25672:25672 -v <span class="variable">$RABBITMQ_DIR</span>:/var/lib/rabbitmq rabbitmq:3.6-management</span><br></pre></td></tr></table></figure><h2 id="理解消息通信"><a href="#理解消息通信" class="headerlink" title="理解消息通信"></a>理解消息通信</h2><p>　　这一章介绍了消费者、生产者、代理、交换机、队列、绑定、虚拟主机、消息持久化的概念及实现方法,并介绍了一条消息从产生到被消费都发生了什么(也就是生命周期).</p><h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><p>　　先来写一些比较虚的东西,这种虚是指RabbitMQ提供的抽象.实际上,我们无需了解具体实现(Erlang代码),只需要了解这些抽象的概念就可以着手进行开发了.</p><h4 id="角色划分"><a href="#角色划分" class="headerlink" title="角色划分"></a>角色划分</h4><p>　　使用RabbitMQ(消息队列)时,有三种角色需要区分:<br>　　代理: 在使用消息队列的场景中,消息队列服务器可以看做代理.<br>　　生产者: 而生产者是产生消息并将消息发送到代理服务器的角色(A program that sends messages is a producer.).<br>　　消费者: 连接到代理服务器,并订阅相应的队列,在有新的消息到达时,接收并处理的角色(A consumer is a program that mostly waits to receive messages).  </p><h4 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h4><p>　　在RabbitMQ中传输的是消息,消息包含有效负载(payload)与标签(label)两部分.其中有效荷载是指实际要传递的数据(可以是任意支持的格式),而标签则描述了有效荷载,RabbitMQ会根据标签来对消息进行分发.  </p><p>　　消息路由过程中实际分发的只是payload.也就是说,消费者接收到的只是payload部分,这样可以实现一定程度上的解耦,即生产者和消费者互相并不知道彼此的存在,尤其是消费者并不知道消息是如何来的(如果发送者的信息很重要的话,将它放到payload部分也是可以的).  </p><p><img src="https://i.loli.net/2018/11/18/5bf04464a6003.png" alt="RabbitMQ模型中的定位"></p><h4 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h4><p>　　实际上,对于生产者与消费者都是通过Connection与Channel与RabbitMQ服务器进行通信的.<br>　　Connection实际上是一个TCP连接.<br>　　而Channel则是建立在真实的TCP连接(Connection)中的虚拟连接.所有AMQP命令都是通过Channel发送出去的.  </p><p>　　为什么使用Channel?<br>　　对于操作系统来说,由于建立和关闭Connection(TCP连接)是有一定代价的.在生产者为多个线程时,如果只有Connection,那么为了发送消息就需要频繁的创建销毁Connection,这会极大的浪费系统资源,并且操作系统每秒能创建的TCP连接数是有上限的,这就会导致性能瓶颈.<br>　　但是RabbitMQ又得基于TCP,因此在TCP的基础上抽象出了Channel的概念,Channel可以认为是轻量级的连接,一个Connection可以创建多个Channel,并且各个Channel间互相隔离.在Connection上创建和销毁Channel的代价很低,也不会对操作系统造成太大影响(不是没影响).<br>　　对于Connection与Channel的关系,本书中有一个形象的比喻:Connection好比电缆,而Channel好比光纤束,一条电缆可以有多条光纤束,且各个光纤束可以独立的传输数据.<br>　　建议客户端线程之间不要共用Channel,至少要保证共用Channel的线程发送消息必须是串行的,但是建议尽量共用Connection.</p><h4 id="消息存储"><a href="#消息存储" class="headerlink" title="消息存储"></a>消息存储</h4><p>　　生产者将消息投递给RabbitMQ后,RabbitMQ还没有将消息发送给消费者时,消息被存放在Queue中(A queue is the name for a post box which lives inside RabbitMQ. Although messages flow through RabbitMQ and your applications, they can only be stored inside a queue. A queue is only bound by the host’s memory &amp; disk limits, it’s essentially a large message buffer.).</p><h4 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h4><p>　　消费者从队列中获取存储的消息,目前有两种方法:<br>　　a. 使用AMQP的 channel.consume 命令订阅某个队列,此时channel被设置为接收模式,这样当队列中有消息且RabbitMQ认为消费者有能力进行消费时,就会将改消息分给消费者;<br>　　b. 使用AMQP的 channel.get 命令获取某个队列中的一条消息.通过这样的主动获取方式,消费者可以得到队列中可用的下一条消息.大致上讲,这样的行为类似于订阅某个队列,从中取一个消息,然后取消订阅.因此在需要获取大量消息时,循环get会比consume性能差很多.  </p><p>　　然后就是一些具体的细节:<br>　　a. 消息到了一个没有消费者监听的队列之后,会发生什么事?<br>　　答案是,消息被放到该队列后,会堆积,直到有消费者监听该队列时,才会进行分发.<br>　　b. 在多个消费者监听一个队列时,消息如何分发?<br>　　答案是,消息会被轮询分发(round-robin)给所有消费者,每条消息只会被发送给一个消费者.<br>　　c. 消息到达一个不存在的队列时,会发生什么?<br>　　答案是,消息会被丢弃.</p><h4 id="消费者确认机制"><a href="#消费者确认机制" class="headerlink" title="消费者确认机制"></a>消费者确认机制</h4><p>　　RabbitMQ会一直向消费者中投递消息么?<br>　　想一想就知道,不会.否则可能压垮消费者,并且会导致无效消费.事实上,RabbitMQ会根据消费者的状态来决定要不要向它投递消息.<br>　　那么,问题又来了,RabbitMQ如何确认消费者的状态呢?<br>　　答案是,由消费者主动告知(也是最符合直觉的方法).这句话的含义是:消费者在接收到一条消息后必须对此消息进行确认.  </p><p>　　这里所指的确认包括以下两种:<br>　　确认成功:  basic.ack命令<br>　　　　在订阅队列时,开启自动确认(设置auto_ack参数为true)后,RabbitMQ在将消息发送给消费者后自动认为消费者已进行了确认.<br>        在收到某个消费者的确认之前,RabbitMQ不会向其投递更多消息.如果消费者在确认之前取消了对队列的订阅(或断开了连接),那么RabbitMQ会认为这条消息没有被消费.会将这条消息重新投递到别的消费者那里去.<br>　　拒绝:     basic.reject命令(此命令在2.0.0之后才支持)<br>　　　　在接到拒绝的命令后,RabbitMQ会认为此消费者无法处理这条命令,然后根据此命令附带的requeue参数决定接下来的行为.当requeue参数被设置为true时,消息会被重新发送给下一个订阅者,否则,消息会被丢弃.扩展:<a href="http://www.rabbitmq.com/dlx.html">死信队列</a>.<br>　　　　也可以简单粗暴的通过断开连接的方式达到上述目的,此时RabbitMQ会将消息重新入队并发送给下一个消费者.但是这样与使用basic.reject命令相比性能消耗太大.  </p><h4 id="谁来分发"><a href="#谁来分发" class="headerlink" title="谁来分发"></a>谁来分发</h4><p>　　现在又有了一个新的问题.消费者将消息投递给RabbitMQ后,RabbitMQ按照什么规则将消息分发到Queue中?由谁来进行这个操作呢?<br>　　先来回答后一个问题,这里有几种方案,例如:消费者在进行消息投递时直接指定Queue;由各个Queue来对消息进行拉取(此种情况需要定义多久拉取一次,或者说如何知道有新消息的问题)等等..<br>　　但是这两种方式都不是很好,由消费者直接指定Queue的话,使得消费者所发送的消息与Queue产生了强耦合(生产者明确知道了自己所发送的消息的用途),而事实上这些信息生产者并不需要关心.由Queue来进行拉取的话,拉取时间不好设置(太短的话性能不好,太长的话可能会导致消息传递有延时),拉取结束之后消息还存不存不好判断(有可能多个Queue都需要拉取某条消息).<br>　　事实上,RabbitMQ在消息到达与Queue之间设置了一个交换机(Exchange).这个也许与RabbitMQ产生的背景有关系,但是不得不说,个人感觉这是一个很好的实践.通过Exchange解耦了生产者和Queue,即:生产者只需要在消息中指定某个Exchange与此消息的规则(路由键Routing Key)即可,具体的转发操作则不用关心.而Queue只用接收从Exchange传过来的消息并投递消息给相应的Queue即可.  </p><h4 id="建立分发规则"><a href="#建立分发规则" class="headerlink" title="建立分发规则"></a>建立分发规则</h4><p>　　在有了上述的概念后,就很容易理解绑定(Binding)的含义了.<br>　　绑定实际上就是建立Queue与Exchange之间的联系,也就是告诉RabbitMQ中的某个Exchange将符合某种条件(规则)的消息发送到某个Queue.通过绑定,生产者或消费者可以建立Exchange和Queue之间的多对多关系.  </p><p>　　那么,绑定的过程中设置的规则是指什么?<br>　　这里的规则由Exchange类型和绑定键(Binding Key)两部分组成.下面分别介绍:<br>　　绑定键是由句点”.”分隔的字符串,被分隔的每一部分被称为一个单词.其中可以存在两种通配符”<em>“与”#”，用于做模糊匹配，其中”</em>“用于匹配一个单词，”#”用于匹配多个单词(可以是零个).例如: “payment.notify”, “payment.#”等等.  </p><p>　　生产者发送消息时,需要指定发送给哪个Exchange,并需要指定本消息的路由键.可以简单的认为路由键是用来与绑定键进行匹配的.  </p><p>　　那么,Exchange的类型是什么意思?分发规则跟类型有啥关系?<br>　　粗略的说,这里的类型实际上是指路由算法.即: 将Exchange分为多种类型,每种类型都实现了独特的路由算法(这部分可以在RabbitMQ的教程中看到,有详尽的代码示例).目前有以下四种(路由键的含义见后面):<br>　　　　direct: 若消息中的路由键能匹配到某个队列的名称,就将消息投递到该队列.否则,丢弃.<br>　　　　fanout: 消息会被发送到所有绑定到此Exchange的Queue中(广播),路由键会被忽略.<br>　　　　topic:  若消息的路由键能够匹配到此Exchange上绑定的某些绑定建,则将消息分发到对应的Queue中.<br>　　　　　　这里的匹配可以是完全匹配,也可以是模糊匹配(使用通配符).绑定键中的通配符”#”,”.”只在此种情况下生效.<br>　　　　headers: 若消息的headers中的键值对能匹配(可以定义设置部分匹配或者全部匹配)到某个绑定键,则将消息分发到对应队列.这个用的蛮少的,资料也比较少,可以参考<a href="https://blog.csdn.net/hry2015/article/details/79188615">RabbitMQ Header Exchange用法</a>.</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>　　了解完抽象之后,我们需要知道该如何进行开发.也就是,我们如何基于这个抽象实现我们的自定义功能.</p><h4 id="声明队列"><a href="#声明队列" class="headerlink" title="声明队列"></a>声明队列</h4><p>　　创建(声明)队列必须使用一个处于”传输模式”的channel.也就是说,生产者或消费者都可以声明队列.<br>　　可以使用queue.declare命令创建队列(注意:当消费者在channel上订阅了一个队列时,就无法再无法创建队列了).此命令会返回队列的名称.被创建的每一个队列被创建时都会被自动绑定到默认交换机(名称为””),并以队列名作为路由键(详见后面的绑定).<br>　　使用这个命令时可以设置如下几个参数:<br>　　exclusive,代表私有,当设置此参数时,队列只能被当前应用消费.可用来限制队列的消费者数目.<br>　　auto-delete,代表自动销毁,当设置此参数时,在最后一个消费者取消订阅此队列时,队列会被自动移除(当然,队列中的消息也就不存在了).<br>　　name,代表队列的名称(唯一标识),当设置此参数时,队列会被命名.没有设置时,RabbitMQ会为队列随机生成一个名字.  </p><p>　　既然,生产者和消费者都可以声明队列,那么就无法保证队列的声明顺序,重复创建队列会引发问题么?事实上是会的.当多次声明的队列的属性不同时,就会产生错误.</p><h4 id="声明交换机"><a href="#声明交换机" class="headerlink" title="声明交换机"></a>声明交换机</h4><p>　　声明交换机与声明队列的规则基本相同.</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>　　我们使用Python语言来操作RabbitMQ.pika是RabbitMQ官方的连接库.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Connection,pika封装了多种Connection,这里选择使用比较简单的BlockingConnection来写示例</span></span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">'localhost'</span>))</span><br><span class="line"><span class="comment"># 从Connection获取Channel</span></span><br><span class="line">channel = connection.channel()</span><br><span class="line"><span class="comment"># 使用channel创建队列</span></span><br><span class="line">channel.queue_declare(queue=<span class="string">'test_queue'</span>, durable=<span class="keyword">True</span>, exclusive=<span class="keyword">False</span>, auto_delete=<span class="keyword">False</span>,)</span><br><span class="line"><span class="comment"># 使用channel声明exchange</span></span><br><span class="line">channel.exchange_declare(exchange=<span class="string">'test_exchange'</span>, exchange_type=<span class="string">'topic'</span>, auto_delete=<span class="keyword">False</span>, durable=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># 建立绑定关系</span></span><br><span class="line">channel.queue_bind(<span class="string">'test_queue'</span>, <span class="string">'test'</span>, routing_key=<span class="string">'test.#'</span>,)</span><br><span class="line"><span class="comment"># 发送消息</span></span><br><span class="line"><span class="comment"># properties中可以放置一些设置,例如: delivery_mode=2时表示消息需要持久化,delivery_mode=1时,代表不用持久化..</span></span><br><span class="line">channel.basic_publish(exchange=<span class="string">'test_exchange'</span>, routing_key=<span class="string">'test.test.test'</span>, body=<span class="string">'Hello World!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置回调函数,用于在有消息到达时进行处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></span><br><span class="line">    print(<span class="string">" [x] Received %r"</span> % body)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始监听队列,此方法为阻塞方法</span></span><br><span class="line">channel.basic_consume(callback, queue=<span class="string">'test_queue'</span>, no_ack=<span class="keyword">False</span>, exclusive=<span class="keyword">False</span>,)</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="虚拟主机vhost"><a href="#虚拟主机vhost" class="headerlink" title="虚拟主机vhost"></a>虚拟主机vhost</h3><p>　　可能是因为起源于电信行业,因此租户比较多,而各个租户之间的数据肯定是不能串的.<br>　　当然,多起几个示例肯定是可以满足需要的,但是一点也不经济.因此RabbitMQ提供了一种类似命名空间的机制:vhost.vhost之于RabbitMQ相当于虚拟机之于物理机.初始时只存在一个vhost: “/“.各个vhost之间是绝对隔离的,这个特性也使得vhost可以很方便的迁移到别的RabbitMQ实例中而不用担心对其余vhost造成影响.<br>　　vhost在建立连接是必须指定,缺省为”/“.</p><p>　　我们如何管理vhost呢?由于建立连接是要指定vhost,因此肯定不是在channel或者connection中管理.此时 <a href="http://www.rabbitmq.com/rabbitmqctl.8.html">rabbitmqctl</a> 就登场了.rabbitmqctl是RabbitMQ自带的命令行管理工具.与vhost相关的有以下几个命令:<br>　　创建: rabbitmqctl add_vhost [vhost_name]    例如: rabbitmqctl add_vhost flynnon_host<br>　　删除: rabbitmqctl delete_vhost [vhost_name] 例如: rabbitmqctl delete_vhost flynnon_host<br>　　列出vhost列表: rabbitmqctl list_vhosts</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>　　默认情况下,RabbitMQ中的一切(消息、队列、交换机)都不是持久化的.也就是说,一旦重启,一切都会丢失.<br>　　对我们而言,这显然是不可接受的,那么,如何进行持久化?<br>　　队列和交换机的持久化比较简单,只需要在声明时设置其durable属性为true就可以了(见上方demo).这样,当RabbitMQ重启时,会自动创建队列与交换机.<br>　　消息的持久化: 需要在发送时指定消息的投递模式为2,以将消息标记为持久化.  </p><p>　　当然,为了使得消息持久化更加安全,因此需要:<br>　　1. 将消息标记为持久化(投递模式设置为2);<br>　　2. 发送到持久化的交换机;<br>　　3. 到达持久化的队列.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列,交换机持久化</span></span><br><span class="line">channel.queue_declare(queue=<span class="string">'test_queue'</span>, durable=<span class="keyword">True</span>, exclusive=<span class="keyword">False</span>, auto_delete=<span class="keyword">False</span>,)</span><br><span class="line">channel.exchange_declare(exchange=<span class="string">'test_exchange'</span>, exchange_type=<span class="string">'topic'</span>, auto_delete=<span class="keyword">False</span>, durable=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消息持久化</span></span><br><span class="line">channel.basic_publish(exchange=<span class="string">'test_exchange'</span>, routing_key=<span class="string">'test.test.test'</span>, body=<span class="string">'Hello World!'</span>, properties=&#123;<span class="string">'delivery_mode'</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><p>　　任何事情都是有代价的,如果没有代价,那RabbitMQ就直接默认开启持久化了…<br>　　这种代价也是可以想象的,因为一般持久化都需要把消息写到硬盘里,而磁盘读写比内存读写慢很多,也就是说:消息持久化会导致性能急速降低.<br>　　消息持久化机制:  当一个持久化消息到达一个持久化交换机时,RabbitMQ会将它写入一个持久化日志文件,并在写入成功后才发送响应(被路由到非持久化队列的消息,对应的记录会被自动删除),在消息被消费后,这条记录才会被标记删除.</p><h3 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认"></a>消息确认</h3><p>　　使用这种模型还有一个需要处理的问题,即: 生产者如何确定消息已经成功到达RabbitMQ呢?如果没有到达,在什么情况下进行重试?<br>　　有以下两种方法可以达到这个目的:  </p><p>　　第一种方法是事务.<br>　　生产者可以在发送消息时开启事务,然后在消息全部发送完成后进行事务提交,如果RabbitMQ接收消息成功,则流程会正常走下去,否则RabbitMQ会停止执行这一系列的任务.同样,在产生错误时生产者也可以手动进行事务回滚,这样RabbitMQ会像没有收到这些消息一样工作.  </p><p>　　第二种方法是发送方确认.<br>　　这种情况下,生产者需要将channel设置成Confirm模式(这个模式不可取消),然后该channel发送的所有消息都会被分配一个唯一ID号.然后当消息成功到达Queue时,RabbitMQ会发送一个确认(包含了唯一ID)给生产者,当RabbitMQ发生了内部错误导致消息丢失时,也会发送一个nack消息(未确认)给生产者.<br>　　由于channel只能被单线程使用(不是线程安全的),因此可以确定,一条channel上的消息时连续的.基于这个前提,RabbitMQ实现了简单的消息ID生成方式.即:每条channel上的第一条消息的ID为1,以后的消息ID逐渐递增.这样RabbitMQ就无需在每次消息发送时返回消息ID了(由生产者自己进行记录即可).<br>　　生产者在接收到这个消息后就可以根据情况进行特殊处理了(比如消息重发等等).由于回调对于发送方来说可以是异步的(设置回调函数接收),因此效率影响不大.  </p><p>　　两种方法各有什么优缺点呢?在需要这个功能时,我们该如何选择呢?下面列出两种方法的一些差异.<br>　　通用性: 事务&gt;发送方确认. 事务是AMQP标准中的协议,而发送方确认机制则是RabbitMQ自己实现的.且发送方确认机制是在2.3.1才开始支持的,因此一些历史版本无法使用(感觉对于今天来说,可以忽略…).<br>　　性能: 由于事务支持回滚,因此需要在一段时间内保存状态,而发送方确认不需要,因此但是事务相对来说比较重量级且性能低下(会降低2-10倍的吞吐量).且事务会导致同步,而发送方确认为异步,因此可以认为发送方确认对于生产者影响很小.  </p><!-- RabbitMQ返回的通知类型:当将channel设置为Confirm模式时,RabbitMQ服务器会返回一个Confirm.SelectOK类型的确认消息,通知生产者channel已经准备就绪接收消息了.当消息由于RabbitMQ内部错误丢失时,服务器会返回Basic.Nack消息.当消息正常到达Queue时,服务器会返回Basic.Ack消息.通过在回调函数中校验返回的消息类型,可以进行定制化开发. --><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RabbitMQ事务</span></span><br><span class="line"><span class="comment"># 开启事务</span></span><br><span class="line">channel.tx_select()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 发送消息</span></span><br><span class="line">    channel.basic_publish(exchange=<span class="string">'test_exchange'</span>, routing_key=<span class="string">'test.test.test'</span>, body=<span class="string">'Hello World!'</span>)</span><br><span class="line">    <span class="comment"># 逻辑处理</span></span><br><span class="line">    do_something()</span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    channel.tx_commit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    <span class="comment"># 手动回滚</span></span><br><span class="line">    channel.tx_rollback()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># RabbitMQ发送方确认</span></span><br><span class="line"><span class="comment"># 开启确认模式.由于Connection为BlockingConnection,因此此处无需设置回调函数(消息发布时同步返回True/False)</span></span><br><span class="line">channel.confirm_delivery()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加成功时的回调函数</span></span><br><span class="line">channel.add_on_return_callback(success_call_back)</span><br><span class="line"><span class="comment"># 增加失败时的回调函数</span></span><br><span class="line">channel.add_on_cancel_callback(fail_call_back)</span><br><span class="line"><span class="comment"># 发布消息,并得到消息处理成功或失败的标志</span></span><br><span class="line">success_flag = channel.basic_publish(body=<span class="string">'test'</span>, exchange=<span class="string">'test_exchange'</span>, routing_key=<span class="string">'test.test.test'</span>,)</span><br></pre></td></tr></table></figure><h3 id="服务器管理"><a href="#服务器管理" class="headerlink" title="服务器管理"></a>服务器管理</h3><p>　　RabbitMQ是使用Erlang编写的,因此有一些很有趣的特征.这里会介绍与之相关的一些知识点与管理方法.  </p><h4 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h4><p>　　Erlang的虚拟机类似Java的虚拟机,而一个节点则是虚拟机的一个实例.一个节点上可以运行多个Erlang应用程序,也就是可以在一个节点上启动多个RabbitMQ服务.<br>　　一般我们可以使用RabbitMQ自带的rabbitmqctl工具与RabbitMQ进行通信并进行管理.下面是服务器管理相关的一些命令:<br>　　启动rabbitmq服务: rabbitmq-server -detachd(以守护进程的方式在后台运行)<br>　　停止整个节点: rabbitmqctl stop -n rabbit@[hostname]<br>　　停止RabbitMQ实例: rabbitmqctl stop_app</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>　　RabbitMQ的配置文件可以在启动时配置 CONFIG_FILE 环境变量指定.缺省情况下,配置文件为 /etc/rabbitmq/rabbitmq.config.<br>　　它的配置格式是原始的Erlang数据结构,示例如下:  </p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 大概含义是: []之中包含多个配置(用&#123;&#125;指定)</span></span><br><span class="line">[</span><br><span class="line">    &#123;mnesia, [&#123;dump_log_write_threshold, <span class="number">1000</span>&#125;]&#125;,</span><br><span class="line">    &#123;rabbit, [&#123;sss:sss&#125;]&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>　　上面的mnesia项是Erlang内建的非SQL型数据库.RabbitMQ使用它存储Queue,Exchange,Binding的元数据.<br>　　Mnesia会将RabbitMQ的元数据写入到一个仅可增加的日志文件中,以保证其完整性.然后再定期将信息从日志文件转存到真实的Mnesia数据文件中.<br>　　目前本人已知的,常用的配置项如下:</p><p>；这里是为了调整表格首列的宽度</p><style>table th:first-of-type {    width: 210px;}</style><table><thead><tr><th>可配置项名称</th><th>类型</th><th>含义</th><th>默认值</th><th>所属应用</th></tr></thead><tbody><tr><td>dump_log_write_threshold</td><td>整型</td><td>转储的频度(超过多少行才可能进行转存).</td><td>100</td><td>Mnesia</td></tr><tr><td>tcp_listeners</td><td>{“ip”: port }数组</td><td>RabbitMQ应该监听的非SSL加密通信的IP和端口</td><td>[{“0.0.0.0”: 5672}, ]</td><td>RabbitMQ</td></tr><tr><td>ssl_listeners</td><td>{“ip”: port }数组</td><td>RabbitMQ应该监听的SSL加密通信的IP和端口</td><td>空</td><td>RabbitMQ</td></tr><tr><td>ssl_options</td><td>{“key”: value }数组</td><td>SSL有关的选项(cacertfile-CA证书文件, certfile-服务器CA证书文件, keyfile-服务器密钥文件, fail_if_no_peer_cert-客户端是否需要安装有效证书True/False)</td><td>空</td><td>RabbitMQ</td></tr><tr><td>vm_memory_high_watermark</td><td>十进制百分数</td><td>控制RabbitMQ允许消耗的安装内存百分比</td><td>0.4(代表40%)</td><td>RabbitMQ</td></tr><tr><td>msg_store_file_size_limit</td><td>整形(字节数)</td><td>控制RabbitMQ垃圾收集存储内容之前,消息存储数据库的最大大小</td><td>16777216(16M)</td><td>RabbitMQ</td></tr><tr><td>queue_index_max_journal_entries</td><td>整形</td><td>转储到消息存储数据库并提交之前,消息存储日志中的最大条目数</td><td>262144</td><td>RabbitMQ</td></tr><tr><td>hipe_compile</td><td>布尔类型</td><td>是否开启Erlang HiPE编译选项(JIT技术),可以提高性能</td><td>false</td><td>Erlang</td></tr></tbody></table><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>　　RabbitMQ的权限控制是基于用户的,各个vhost的权限互相独立,也就是:针对一个或多个vhost,用户可以拥有不同的权限.<br>　　很自然的,权限也必须使用rabbitmqctl工具来进行管理(因为建立连接是需要指定用户,一般而言用户没有给别人权限的能力).  </p><h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><p>　　RabbitMQ存在用户,其初始用户用户名为guest,密码也为guest.<br>　　用户是全局唯一的,且创建时至少需要指定一个vhost(RabbitMQ的权限是以vhost为单位的).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">rabbitmqctl add_user username password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line"><span class="comment"># 注意: 删除用户时,所有引用了该用户的权限控制条目都会被一并删除,且没有警告!</span></span><br><span class="line">rabbitmqctl delete_user username</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有用户</span></span><br><span class="line">rabbitmqctl list_users</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户密码</span></span><br><span class="line">rabbitmqctl change_password username new_password</span><br></pre></td></tr></table></figure><h5 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h5><p>　　从1.6.0开始,RabbitMQ实现了一套访问控制列表(ACL)风格的权限系统.针对每一个vhost,权限分为读、写、配置三种,可以分开授予用户.<br>　　三种权限的差别如下:<br>　　　　读 – 有关消费消息的任何操作,包括清除队列中的消息(需要先绑定成功).<br>　　　　写 – 发布消息(也需要先绑定成功).<br>　　　　配置 – 队列和交换机的创建和删除.  </p><p>　　常用命令与权限的映射关系表如下:</p><table><thead><tr><th>AMQP命令</th><th>配置权限</th><th>写权限</th><th>读权限</th></tr></thead><tbody><tr><td>exchange.declare</td><td>exchange</td><td>-</td><td>-</td></tr><tr><td>exchange.delete</td><td>exchange</td><td>-</td><td>-</td></tr><tr><td>queue.declare</td><td>queue</td><td>-</td><td>-</td></tr><tr><td>queue.delete</td><td>queue</td><td>-</td><td>-</td></tr><tr><td>queue.bind</td><td>-</td><td>queue</td><td>exchange</td></tr><tr><td>basic.publish</td><td>-</td><td>exchange</td><td>-</td></tr><tr><td>basic.get</td><td>-</td><td>-</td><td>queue</td></tr><tr><td>basic.consume</td><td>-</td><td>-</td><td>queue</td></tr><tr><td>basic.purge</td><td>-</td><td>-</td><td>queue</td></tr></tbody></table><p>　　以第一条为例,含义为: 用户想执行exchange.declare命令,需要在exchange上具有配置权限.</p><h5 id="权限控制条目"><a href="#权限控制条目" class="headerlink" title="权限控制条目"></a>权限控制条目</h5><p>　　每一条访问控制条目(规则)都由四部分组成: 谁(用户)在哪里(vhost)的那些部分(权限范围,交换机/队列)具有什么权限(读、写、配置权限的组合).<br>　　访问控制条目无法跨越vhost,也就是说:如果想让用户在多个vhost上具有权限,需要设置多条控制条目(规则).  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为用户分配权限</span></span><br><span class="line"><span class="comment"># 需要更改某用户的权限时,直接重新分配即可(也只能重新分配..)</span></span><br><span class="line"><span class="comment"># 最后面的三个权限模式是三个正则表达式. 例:".*" 代表所有权限, "" 代表无权限, "xx.*"代表以xx开头的队列或者交换机上有权限</span></span><br><span class="line">rabbitmqctl set_permissions -p &#123;vhost_name&#125; username &#123;conf_permission&#125; &#123;write_permission&#125; &#123;read_permission&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看权限分配情况</span></span><br><span class="line"><span class="comment"># 查看某vhost上的权限分配</span></span><br><span class="line">rabbitmqctl list_permissions  -p  &#123;vhost_name&#125;</span><br><span class="line"><span class="comment"># 查看某用户在所有vhost上的权限</span></span><br><span class="line">rabbitmqctl list_user_permissions &#123;username&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除某用户在某vhost上的所有权限</span></span><br><span class="line">rabbitmqctl clear_permissions -p &#123;vhost_name&#125; &#123;username&#125;</span><br></pre></td></tr></table></figure><h4 id="状态检查"><a href="#状态检查" class="headerlink" title="状态检查"></a>状态检查</h4><p>　　我们该如何查看RabbitMQ的运行状态呢?</p><h5 id="查看基本信息"><a href="#查看基本信息" class="headerlink" title="查看基本信息"></a>查看基本信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出某vhost上的queue的信息</span></span><br><span class="line"><span class="comment"># 中间的状态貌似是指queue在集群中的信息</span></span><br><span class="line"><span class="comment"># 这里的 queueinfoitem 表示想展示的项目列表,有效值包括name, druable, auto_delete等等,用到时现查即可.缺省状态下,此命令展示 队列名及其上的消息数</span></span><br><span class="line">list_queues [-p &lt;vhost&gt;] [--offline|--online|--<span class="built_in">local</span>] [&lt;queueinfoitem&gt; ...]</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/18/5bf044876de32.png" alt="查看队列信息示例"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出某vhost上的exchange的信息</span></span><br><span class="line"><span class="comment"># 这里的 exchangeinfoitem 含义同上,有效值包括 name, type, durable, auto_delete, internal, arguments, policy</span></span><br><span class="line">rabbitmqctl list_exchanges [-p &lt;vhost&gt;] [&lt;exchangeinfoitem&gt; ...]</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/18/5bf044a48ae56.png" alt="查看交换机信息示例"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出某vhost上的绑定信息</span></span><br><span class="line"><span class="comment"># 这里的 bindinginfoitem 含义同上,有效值包括 source_name, source_kind, destination_name, destination_kind, routing_key, arguments</span></span><br><span class="line">rabbitmqctl list_bindings [-p &lt;vhost&gt;] [&lt;bindinginfoitem&gt; ...]</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/18/5bf044bf3b619.png" alt="查看绑定信息示例"></p><h5 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h5><p>　　RabbitMQ的日志文件有如下两个:<br>　　RABBITMQ_NODENAME.log         RabbitMQ运行相关日志. 可以通过它得到RabitMQ的运行信息.<br>　　RABBITMQ_NODENAME-sasl.log    Erlang相关日志.       可以通过它查看Erlang的崩溃报告.  </p><p>　　另外,RabbitMQ会将运行相关日志信息发布到 amq.rabbitmq.log这个交换机上,并以日志等级作为路由键(error, warning, info),因此我们自己定义好队列与绑定后,就可以通过消费者监听RabbitMQ的运行信息了.</p><h5 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h5><h6 id="rabbitmqctl"><a href="#rabbitmqctl" class="headerlink" title="rabbitmqctl"></a>rabbitmqctl</h6><p>　　有时,RabbitMQ运行的好好的,但是我们在使用rabbitmqctl命令的时候就是会出现badrpc或者nodedown问题.这是为什么?<br>　　先来看看rabbitmqctl的工作原理.rabbitmqctl会启动一个Erlang节点,并使用Erlang的分布式系统尝试连接RabbitMQ节点.达成这个步骤需要两个条件:合适的Erlang Cookie和合适的节点名称.<br>　　首先来看看Erlang Coolie:<br>　　　　为了能使用rabbitmqctl连接RabbitMQ节点,需要共享相同的cookie.因此,碰到上述问题时,看看当前用户的Erlang Cookie与RabbitMQ的Erlang Cookie是否相同.<br>　　　　Erlang节点之间通过交换作为秘钥的Erlang Cookie来进行认证(由于连接到某节点时就可以执行命令,因此需要确保连接者可信).而Erlang将令牌存储在用户主目录下的.erlang.cookie文件中.<br>　　再来看看节点名:<br>　　　　在启动Erlang节点时,可以指定一个节点名称(name或者sname之一).<br>　　　　如果两边的节点名不同,那么rabbitmqctl也无法正常连接到RabbitMQ服务器.  </p><h6 id="Mnesia"><a href="#Mnesia" class="headerlink" title="Mnesia"></a>Mnesia</h6><p>　　有时,Mnesia启动老是失败,这是什么原因?<br>　　常见的原因如下两个:<br>　　1. RabbitMQ没有MNESIA_BASE(这是个环境变量)文件夹的写权限;<br>　　2. 主机名更改了或者服务器运行在集群模式下且启动时无法连接到其它节点.<br>　　　　Mnesia会基于Erlang节点名与当前机器的主机名创建数据库schema,如果主机名更改了,它就无法加载旧的schema.同理,使用Erlang sname更改节点名,也会产生这个问题.<br>　　　　如果我们更改了Mnesia建立的文件夹的名称,Mnesia会重新创建新的schema文件夹并加载.</p><!-- producter_and_consumer.png, list_exchanges_demo.png, list_bindings_demo.png, list_queues_demo.png -->]]></content>
      
      
      
        <tags>
            
            <tag> 学习之路 </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>红包算法</title>
      <link href="/2018/06/03-%E7%BA%A2%E5%8C%85%E7%AE%97%E6%B3%95.html"/>
      <url>/2018/06/03-%E7%BA%A2%E5%8C%85%E7%AE%97%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>　　最近Flynnon的舍友来北京找工作,因此几个同学一起聚了下,聊的聊的就聊到了他的面试经历,其中有一道算法题,他印象比较深刻,正好大家都是程序员,于是进行了讨论,在这里做个记录. <a id="more"></a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>　　仿照微信红包设计一个红包分配算法,要求: 1. 抽奖公平; 2. 手气最好的人抽到的红包金额不大于手气最差的人的10倍.</p><h2 id="初始思路"><a href="#初始思路" class="headerlink" title="初始思路"></a>初始思路</h2><p>　　在看到这道题目时,首先意识到要用随机数生成算法以保证相对公平.然后对随机的范围进行限制即可.<br>　　简单概括为: 土豪分田地.首先确立一个土豪,它的金额为规则允许的最大值,其余人则相等.那么,分红包的过程就可以简单的看成从土豪手中抢钱的过程.<br>　　代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总金额</span></span><br><span class="line">total = <span class="number">100</span></span><br><span class="line"><span class="comment"># 红包数目</span></span><br><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="comment"># 最大倍数</span></span><br><span class="line">max_multiple = <span class="number">10</span></span><br><span class="line"><span class="comment"># 每个人抽到的红包的列表</span></span><br><span class="line">money_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平民的红包金额</span></span><br><span class="line">min_value = total * <span class="number">1.0</span> / (max_multiple + count - <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 土豪的红包金额</span></span><br><span class="line">max_value = min_value * max_multiple</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">    <span class="comment"># 当只有最后一个红包时,余额就是土豪的钱</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">1</span>:</span><br><span class="line">        money_list.append(total)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 随机数的范围是 (min_value, max_value), 因为能抢的部分只是土豪比平民多的部分</span></span><br><span class="line">    the_value = random.random() * (max_value - min_value) + min_value</span><br><span class="line">    <span class="comment"># 总金额变少</span></span><br><span class="line">    total = total - the_value</span><br><span class="line">    <span class="comment"># 红包总数减一</span></span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    <span class="comment"># 重新求出地主金额</span></span><br><span class="line">    max_value = max_value - (the_value - min_value)</span><br><span class="line">    money_list.append(the_value)</span><br><span class="line"></span><br><span class="line">print(money_list)</span><br></pre></td></tr></table></figure><h2 id="变化思路"><a href="#变化思路" class="headerlink" title="变化思路"></a>变化思路</h2><p>　　上述版本写完后,总感觉有些复杂,因此重新理了一下思路,发现上面想的有些复杂.<br>　　这种思路可以简单的概括成 均富贵,看运气.大家初始拿到一笔相等的钱,然后凭运气从剩余的奖池里再拿一部分.　　<br>　　代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总金额</span></span><br><span class="line">total = <span class="number">100</span></span><br><span class="line"><span class="comment"># 红包数目</span></span><br><span class="line">count = <span class="number">10</span></span><br><span class="line"><span class="comment"># 最大倍数</span></span><br><span class="line">max_multiple = <span class="number">10</span></span><br><span class="line"><span class="comment"># 每个人抽到的红包的列表</span></span><br><span class="line">money_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小红包金额</span></span><br><span class="line">min_value = total * <span class="number">1.0</span> / (max_multiple + count - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个用户都得到最小红包数之后的剩余金额,即公共部分</span></span><br><span class="line">remain_value = total - min_value * count</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">    <span class="comment"># 当只有最后一个红包时,余额就是红包金额</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">1</span>:</span><br><span class="line">        money_list.append(total)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 随机数的范围是 (0, remain_value), 即公共部分任取</span></span><br><span class="line">    tmp_value = random.random() * remain_value</span><br><span class="line">    the_value = tmp_value + min_value</span><br><span class="line">    <span class="comment"># 总金额变少</span></span><br><span class="line">    total = total - the_value</span><br><span class="line">    <span class="comment"># 红包总数减一</span></span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    <span class="comment"># 重新求出剩余部分的金额数</span></span><br><span class="line">    remain_value -= tmp_value</span><br><span class="line">    money_list.append(the_value)</span><br><span class="line"></span><br><span class="line">print(money_list)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　有的时候换种思路,事情就会好做很多.<br>　　另外就是Flynnon的算法比起刚毕业的时候真是差的越来越多了….要找个时间训练一下了….<br>　　如果你有更加优秀的方法,可以在评论里留言,大家一起讨论(如果我能看见的话)…</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客升级</title>
      <link href="/2018/05/27-%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7.html"/>
      <url>/2018/05/27-%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>在-努力工作-混了一段时间后, 某天突然发现我服务器的IP被墙了, 于是更换了一下服务器, 并顺带升级了一下HTTPS.&lt;!-- more --&gt;</code></pre><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><h3 id="证书获取"><a href="#证书获取" class="headerlink" title="证书获取"></a>证书获取</h3><p>　　这一步是很简单的,直接从<a href="https://wanwang.aliyun.com">阿里云(万网)</a>购买了心仪的域名 <a href="http://www.flynnon.com">www.flynnon.com</a>.</p><h3 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h3><p>　　因为是从阿里云购买的域名,因此顺理成章的配置了域名解析(免费版),这里很简单的配置了一下,大概就是将域名本身指向我购买的服务器的IP地址.  </p><p><img src="https://i.loli.net/2018/11/18/5bf03fdbdc357.png" alt="域名解析简单配置"></p><p>　　由于Flynnon的主机是从<a href="https://bwh1.net/">搬瓦工</a>购买的,因此无法备案(当然也不需要备案).但是没有备案总感觉不保险,因此专门配置了CNAME类型的解析规则将blog.flynnon.com这个域名指向我的Github Page的地址了….<br>　　注意: 这一步的时候,需要在source文件夹下创建一个CNAME文件,并将你配置的域名写入其中(比如我就写了blog.flynnon.com),否则Github Page会认为从该URL来的访问不合法.</p><h2 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h2><p>　　在进行完上面几步后,就可以通过blog.flynnon.com来访问Flynnon的博客了,但Flynnon还想用自己购买的云主机来发布博客.因此又在这个基础上进行了一些折腾.</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>　　首先,需要一个服务器软件,这里Flynnon选择了Nginx.原因是它既是一个Web服务器(作为启动博客的服务器程序),也可以做反向代理(Flynnon想用它来为其余的服务分配一个好记的URL).当然,更重要的是,Flynnon想学习一下Nginx的使用….<br>　　Nginx使用apt包管理工具进行安装十分方便.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx的安装...写在这里都有点丢人...</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>　　配置也十分简单.下面是我最终的配置.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/sites-enabled/default</span></span><br><span class="line">upstream jenkins  &#123;</span><br><span class="line">    server 127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设置监听的端口号</span></span><br><span class="line">  server_name www.flynnon.com;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设置默认的hexo文件的目录位置</span></span><br><span class="line">  root /var/www/hexo;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设置hexo的index文件名</span></span><br><span class="line">  index index.html index.htm;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 当找不到url对应的文件时返回404</span></span><br><span class="line">  location / &#123;</span><br><span class="line">      try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 这个是访问jenkins的设置,然后就可以通过 www.flynnon.com/jenkins 来访问jenkins了</span></span><br><span class="line">  location /jenkins &#123;</span><br><span class="line">      proxy_pass http://jenkins;</span><br><span class="line">      proxy_set_header X-real-ip <span class="variable">$remote_addr</span>;</span><br><span class="line">      proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">      proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">      proxy_set_header Request-Url <span class="variable">$request_uri</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>　　然后需要考虑的是,博客内容如何更新到服务器上.当然…每次更新博客的时候手动从Github上下载也不是不可以(但是太low了)…考虑了一下之后选择了使用Jenkins来进行自动构建.</p><h4 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h4><p>　　下面记录一下Jenkins的配置过程.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Jenkins是基于Java的,因此使用前需要先安装Java.</span></span><br><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install oracle-java8-installer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们按照Jenkins官网的介绍(https://jenkins.io/doc/pipeline/tour/getting-started/)使用即可,它的war包自带Jetty服务器</span></span><br><span class="line">wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war</span><br><span class="line"><span class="comment"># 然后就可以直接运行了(jenkins.war中自带了jetty服务器), 使用--httpPort指定它监听的端口，安全考虑也只绑定了localhost.</span></span><br><span class="line">java -jar jenkins.war --httpPort=8080 --httpListenAddress=127.0.0.1</span><br></pre></td></tr></table></figure><p>　　运行完以上两步后,通过浏览器访问 <a href="http://www.flynnon.com/jenkins">www.flynnon.com/jenkins</a> 进行配置即可.这里网上的教程很多,就不一步步展示了.<br>　　接下来比较重要的是配置Hooks来同步代码,这里有两种思路,一种是直接从Github Page所在的项目中同步,直接就可以访问.另一种是从存放Hexo博客源码的项目同步代码,然后使用 hexo -g 生成HTML文件.这两种方式都可以.就不细写了..需要注意的是文件需要放置到nginx配置的目录中.<br>　　<strong>补充:</strong>实际使用时发现,jenkins默认的登录页面是 ip:port/login?from=..,也就是说访问 <a href="http://www.flynnon.com/jenkins">www.flynnon.com/jenkins</a> 时会自动跳转到 <a href="http://www.flynnon.com/login?from=%2Fjenkins...这样肯定是不行的,查了半天之后还是没解决,后来通过请教同事(师傅)发现了[参数介绍](https://wiki.jenkins.io/display/JENKINS/Starting+and+Accessing+Jenkins).使用">www.flynnon.com/login?from=%2Fjenkins...这样肯定是不行的,查了半天之后还是没解决,后来通过请教同事(师傅)发现了[参数介绍](https://wiki.jenkins.io/display/JENKINS/Starting+and+Accessing+Jenkins).使用</a> –prefix 可以解决这个问题.  </p><h4 id="Webhooks配置"><a href="#Webhooks配置" class="headerlink" title="Webhooks配置"></a>Webhooks配置</h4><p>　　为了实现自动发布,需要配置hooks,在Jenkins这边需要安装对应的插件,并且在博客任务中进行接收自动发布的勾选.这些资料网上很多,就不详细记录了.</p><p>　　代码管理方面.因为github的私有仓库很贵,因此Flynnon使用了bitbucket来进行博客源码的存放,为了实现自动发布,在github/bitbucket上进行了jenkins hooks的配置.<strong>一定要注意回调地址</strong>,千万不要写错(妈蛋…).它们都是HTTP协议的URI,但是bitbucket的hooks的url为: {jenkins_url}/bitbucket-hook/, 而github的url为 {jenkins_url}/github-webhook/. 一定不要想当然的复制!!!</p><h4 id="Execute-Shell"><a href="#Execute-Shell" class="headerlink" title="Execute Shell"></a>Execute Shell</h4><p>　　在拿到源码后,需要进行额外的一些处理,在Jenkins中是在增加的构建步骤中处理,因为Flynnon对于shell更加熟悉,因此选择了增加Execute Shell.<br>　　如果在同步方式选择了同步生成代码的话,这一步就很简单了,配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;WORKSPACE&#125;</span></span><br><span class="line">rm -rf /var/www/hexo/*</span><br><span class="line">cp -r ./* /var/www/hexo/</span><br></pre></td></tr></table></figure><p>　　如果选择了同步源码,就需要安装npm,然后进行生成.为了简单点,我使用了docker充当环境,下面有详细介绍.</p><h3 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h3><p>　　其实进行完以上步骤之后就可以用了,但是每次都得手动/半自动(执行写好的shell脚本)对jenkins进行启动,并且挂了也没法自动重启.因此针对这个需求又使用了supervisor来进行管理.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　安装supervisor</span></span><br><span class="line">sudo apt install supervisor</span><br><span class="line"></span><br><span class="line"><span class="comment"># supervisor的配置文件位于此目录下</span></span><br><span class="line"><span class="built_in">cd</span> /etc/supervisor/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里图简单,直接修改了主配置文件.更好的做法是在conf.d目录下新建一个自定义的配置文件</span></span><br><span class="line">vim supervisord.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是一些常用命令. 其中后面四个命令均可以省略 -c 参数</span></span><br><span class="line"><span class="comment"># supervisord -c supervisor.conf                       通过配置文件启动supervisor</span></span><br><span class="line"><span class="comment"># supervisorctl -c supervisor.conf status              查看状态</span></span><br><span class="line"><span class="comment"># supervisorctl -c supervisor.conf start [all]|[x]     启动所有/指定的程序进程</span></span><br><span class="line"><span class="comment"># supervisorctl -c supervisor.conf stop [all]|[x]      关闭所有/指定的程序进程</span></span><br><span class="line"><span class="comment"># supervisorctl -c supervisor.conf reload              重新载入配置文件</span></span><br><span class="line"><span class="comment"># 这里我们只需要重新载入配置文件即可</span></span><br><span class="line">sudo supervisorctl reload</span><br></pre></td></tr></table></figure><p>　　我的supervisor配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:jenkins]</span><br><span class="line"><span class="built_in">command</span>=java -jar /opt/jenkins.war --httpPort=8080 --prefix=/jenkins</span><br><span class="line">user=flynnon</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=30</span><br><span class="line">startretries=8</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>　　如果在同步方式选择了同步源码的话,还需要安装npm,但是作为一个后端开发,本人对于npm并不是很熟悉,而且怕被弄乱系统,因此选择了使用docker来启动一个npm的容器,这样就简单很多(反正它也只是用来安装hexo和生成博客的).<br>　　Dockerfile如下:</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">10</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> tangfei_cn@foxmail.com</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY ./package.json .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 国内的服务器,可以加上 npm config set registry https://registry.npm.taobao.org 设置源</span></span></span><br><span class="line"><span class="bash">RUN npm install -g hexo-cli &amp;&amp; npm install -g &amp;&amp; npm install hexo --save</span></span><br></pre></td></tr></table></figure><p>　　然后只需要在博客源码所在的页面执行下面一条语句即可.可以进行的优化有:使用<a href="https://github.com/mhart/alpine-node">alpine-node</a>进行容器的体积优化.当然也可以直接换个思路….</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的主要思路是将docker作为npm环境,然后将博客目录映射到容器中的对应目录进行构建.</span></span><br><span class="line"><span class="comment"># 将生成的html文件所在的目录保存在本机上提供给nginx进行发布.</span></span><br><span class="line">docker run --rm -v <span class="variable">$PWD</span>/public:/app/public/ -v <span class="variable">$PWD</span>/themes:/app/themes/ -v <span class="variable">$PWD</span>/<span class="built_in">source</span>:/app/<span class="built_in">source</span>/ -v <span class="variable">$PWD</span>/db.json:/app/db.json -v <span class="variable">$PWD</span>/_config.yml:/app/_config.yml  hexo:0.1 hexo generate</span><br></pre></td></tr></table></figure><p>　　最终,我的Jenkins Shell中的配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里使用了jenkins自带的一些环境变量,避免硬编码</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;WORKSPACE&#125;</span></span><br><span class="line">docker build -t hexo:0.1 ./</span><br><span class="line"></span><br><span class="line">docker run --rm -v <span class="variable">$PWD</span>/public:/app/public/ -v <span class="variable">$PWD</span>/themes:/app/themes/ -v <span class="variable">$PWD</span>/<span class="built_in">source</span>:/app/<span class="built_in">source</span>/ -v <span class="variable">$PWD</span>/db.json:/app/db.json -v <span class="variable">$PWD</span>/_config.yml:/app/_config.yml  hexo:0.1 hexo generate</span><br><span class="line">rm -rf /var/www/hexo/*</span><br><span class="line">cp -r ./public/* /var/www/hexo/</span><br><span class="line"><span class="comment"># 为了解决权限问题...</span></span><br><span class="line">chmod o+r /var/www/hexo</span><br></pre></td></tr></table></figure><p>　　在我的预想中,这个任务应该能正常运行,但是又遇到了权限问题…在将文件拷贝到 /var/www/hexo/ 下后,nginx无法读取该目录下的文件,导致502了…因此将supervisor中jenkins程序的user改成了root,并在Jenkins Shell的最后加了一句修改文件夹权限的命令…</p><p>　　Update: 无需以root启动jenkins,只需修改结果文件的目录权限即可</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　这一步之后,博客就搭建完成了,目前很符合我的需求,虽然不完美,但是已经没有了改动的想法.<br>　　如果你在仿照这篇博客搭建自己的博客时遇到了什么问题,或者觉得哪里不满足需求,可以联系我~</p><!-- dns_setting.png -->]]></content>
      
      
      
        <tags>
            
            <tag> 杂记, HTTPS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>改造博客记</title>
      <link href="/2018/05/27-%E6%94%B9%E9%80%A0%E5%8D%9A%E5%AE%A2.html"/>
      <url>/2018/05/27-%E6%94%B9%E9%80%A0%E5%8D%9A%E5%AE%A2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　在写了一段时间的博客后,感觉 Github Page 默认的地址有些不好记,因此产生了使用自己域名的想法.下面是实际操作过程中的一些记录.<a id="more"></a></p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><h3 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h3><p>　　这一步是很简单的,直接从<a href="https://wanwang.aliyun.com">阿里云(万网)</a>购买了心仪的域名 <a href="http://www.flynnon.com">www.flynnon.com</a>.</p><h3 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h3><p>　　因为是从阿里云购买的域名,因此顺理成章的配置了域名解析(免费版),这里很简单的配置了一下,大概就是将域名本身指向我购买的服务器的IP地址.  </p><p><img src="https://i.loli.net/2018/11/18/5bf03fdbdc357.png" alt="域名解析简单配置"></p><p>　　由于Flynnon的主机是从<a href="https://bwh1.net/">搬瓦工</a>购买的,因此无法备案(当然也不需要备案).但是没有备案总感觉不保险,因此专门配置了CNAME类型的解析规则将blog.flynnon.com这个域名指向我的Github Page的地址了….<br>　　注意: 这一步的时候,需要在source文件夹下创建一个CNAME文件,并将你配置的域名写入其中(比如我就写了blog.flynnon.com),否则Github Page会认为从该URL来的访问不合法.</p><h2 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h2><p>　　在进行完上面几步后,就可以通过blog.flynnon.com来访问Flynnon的博客了,但Flynnon还想用自己购买的云主机来发布博客.因此又在这个基础上进行了一些折腾.</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>　　首先,需要一个服务器软件,这里Flynnon选择了Nginx.原因是它既是一个Web服务器(作为启动博客的服务器程序),也可以做反向代理(Flynnon想用它来为其余的服务分配一个好记的URL).当然,更重要的是,Flynnon想学习一下Nginx的使用….<br>　　Nginx使用apt包管理工具进行安装十分方便.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx的安装...写在这里都有点丢人...</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>　　配置也十分简单.下面是我最终的配置.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/sites-enabled/default</span></span><br><span class="line">upstream jenkins  &#123;</span><br><span class="line">    server 127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设置监听的端口号</span></span><br><span class="line">  server_name www.flynnon.com;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设置默认的hexo文件的目录位置</span></span><br><span class="line">  root /var/www/hexo;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设置hexo的index文件名</span></span><br><span class="line">  index index.html index.htm;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 当找不到url对应的文件时返回404</span></span><br><span class="line">  location / &#123;</span><br><span class="line">      try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 这个是访问jenkins的设置,然后就可以通过 www.flynnon.com/jenkins 来访问jenkins了</span></span><br><span class="line">  location /jenkins &#123;</span><br><span class="line">      proxy_pass http://jenkins;</span><br><span class="line">      proxy_set_header X-real-ip <span class="variable">$remote_addr</span>;</span><br><span class="line">      proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">      proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">      proxy_set_header Request-Url <span class="variable">$request_uri</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>　　然后需要考虑的是,博客内容如何更新到服务器上.当然…每次更新博客的时候手动从Github上下载也不是不可以(但是太low了)…考虑了一下之后选择了使用Jenkins来进行自动构建.</p><h4 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h4><p>　　下面记录一下Jenkins的配置过程.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Jenkins是基于Java的,因此使用前需要先安装Java.</span></span><br><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install oracle-java8-installer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们按照Jenkins官网的介绍(https://jenkins.io/doc/pipeline/tour/getting-started/)使用即可,它的war包自带Jetty服务器</span></span><br><span class="line">wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war</span><br><span class="line"><span class="comment"># 然后就可以直接运行了(jenkins.war中自带了jetty服务器), 使用--httpPort指定它监听的端口，安全考虑也只绑定了localhost.</span></span><br><span class="line">java -jar jenkins.war --httpPort=8080 --httpListenAddress=127.0.0.1</span><br></pre></td></tr></table></figure><p>　　运行完以上两步后,通过浏览器访问 <a href="http://www.flynnon.com/jenkins">www.flynnon.com/jenkins</a> 进行配置即可.这里网上的教程很多,就不一步步展示了.<br>　　接下来比较重要的是配置Hooks来同步代码,这里有两种思路,一种是直接从Github Page所在的项目中同步,直接就可以访问.另一种是从存放Hexo博客源码的项目同步代码,然后使用 hexo -g 生成HTML文件.这两种方式都可以.就不细写了..需要注意的是文件需要放置到nginx配置的目录中.<br>　　<strong>补充:</strong>实际使用时发现,jenkins默认的登录页面是 ip:port/login?from=..,也就是说访问 <a href="http://www.flynnon.com/jenkins">www.flynnon.com/jenkins</a> 时会自动跳转到 <a href="http://www.flynnon.com/login?from=%2Fjenkins...这样肯定是不行的,查了半天之后还是没解决,后来通过请教同事(师傅)发现了[参数介绍](https://wiki.jenkins.io/display/JENKINS/Starting+and+Accessing+Jenkins).使用">www.flynnon.com/login?from=%2Fjenkins...这样肯定是不行的,查了半天之后还是没解决,后来通过请教同事(师傅)发现了[参数介绍](https://wiki.jenkins.io/display/JENKINS/Starting+and+Accessing+Jenkins).使用</a> –prefix 可以解决这个问题.  </p><h4 id="Webhooks配置"><a href="#Webhooks配置" class="headerlink" title="Webhooks配置"></a>Webhooks配置</h4><p>　　为了实现自动发布,需要配置hooks,在Jenkins这边需要安装对应的插件,并且在博客任务中进行接收自动发布的勾选.这些资料网上很多,就不详细记录了.</p><p>　　代码管理方面.因为github的私有仓库很贵,因此Flynnon使用了bitbucket来进行博客源码的存放,为了实现自动发布,在github/bitbucket上进行了jenkins hooks的配置.<strong>一定要注意回调地址</strong>,千万不要写错(妈蛋…).它们都是HTTP协议的URI,但是bitbucket的hooks的url为: {jenkins_url}/bitbucket-hook/, 而github的url为 {jenkins_url}/github-webhook/. 一定不要想当然的复制!!!</p><h4 id="Execute-Shell"><a href="#Execute-Shell" class="headerlink" title="Execute Shell"></a>Execute Shell</h4><p>　　在拿到源码后,需要进行额外的一些处理,在Jenkins中是在增加的构建步骤中处理,因为Flynnon对于shell更加熟悉,因此选择了增加Execute Shell.<br>　　如果在同步方式选择了同步生成代码的话,这一步就很简单了,配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;WORKSPACE&#125;</span></span><br><span class="line">rm -rf /var/www/hexo/*</span><br><span class="line">cp -r ./* /var/www/hexo/</span><br></pre></td></tr></table></figure><p>　　如果选择了同步源码,就需要安装npm,然后进行生成.为了简单点,我使用了docker充当环境,下面有详细介绍.</p><h3 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h3><p>　　其实进行完以上步骤之后就可以用了,但是每次都得手动/半自动(执行写好的shell脚本)对jenkins进行启动,并且挂了也没法自动重启.因此针对这个需求又使用了supervisor来进行管理.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　安装supervisor</span></span><br><span class="line">sudo apt install supervisor</span><br><span class="line"></span><br><span class="line"><span class="comment"># supervisor的配置文件位于此目录下</span></span><br><span class="line"><span class="built_in">cd</span> /etc/supervisor/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里图简单,直接修改了主配置文件.更好的做法是在conf.d目录下新建一个自定义的配置文件</span></span><br><span class="line">vim supervisord.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是一些常用命令. 其中后面四个命令均可以省略 -c 参数</span></span><br><span class="line"><span class="comment"># supervisord -c supervisor.conf                       通过配置文件启动supervisor</span></span><br><span class="line"><span class="comment"># supervisorctl -c supervisor.conf status              查看状态</span></span><br><span class="line"><span class="comment"># supervisorctl -c supervisor.conf start [all]|[x]     启动所有/指定的程序进程</span></span><br><span class="line"><span class="comment"># supervisorctl -c supervisor.conf stop [all]|[x]      关闭所有/指定的程序进程</span></span><br><span class="line"><span class="comment"># supervisorctl -c supervisor.conf reload              重新载入配置文件</span></span><br><span class="line"><span class="comment"># 这里我们只需要重新载入配置文件即可</span></span><br><span class="line">sudo supervisorctl reload</span><br></pre></td></tr></table></figure><p>　　我的supervisor配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:jenkins]</span><br><span class="line"><span class="built_in">command</span>=java -jar /opt/jenkins.war --httpPort=8080 --prefix=/jenkins</span><br><span class="line">user=flynnon</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=30</span><br><span class="line">startretries=8</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>　　如果在同步方式选择了同步源码的话,还需要安装npm,但是作为一个后端开发,本人对于npm并不是很熟悉,而且怕被弄乱系统,因此选择了使用docker来启动一个npm的容器,这样就简单很多(反正它也只是用来安装hexo和生成博客的).<br>　　Dockerfile如下:</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">10</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> tangfei_cn@foxmail.com</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY ./package.json .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 国内的服务器,可以加上 npm config set registry https://registry.npm.taobao.org 设置源</span></span></span><br><span class="line"><span class="bash">RUN npm install -g hexo-cli &amp;&amp; npm install -g &amp;&amp; npm install hexo --save</span></span><br></pre></td></tr></table></figure><p>　　然后只需要在博客源码所在的页面执行下面一条语句即可.可以进行的优化有:使用<a href="https://github.com/mhart/alpine-node">alpine-node</a>进行容器的体积优化.当然也可以直接换个思路….</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的主要思路是将docker作为npm环境,然后将博客目录映射到容器中的对应目录进行构建.</span></span><br><span class="line"><span class="comment"># 将生成的html文件所在的目录保存在本机上提供给nginx进行发布.</span></span><br><span class="line">docker run --rm -v <span class="variable">$PWD</span>/public:/app/public/ -v <span class="variable">$PWD</span>/themes:/app/themes/ -v <span class="variable">$PWD</span>/<span class="built_in">source</span>:/app/<span class="built_in">source</span>/ -v <span class="variable">$PWD</span>/db.json:/app/db.json -v <span class="variable">$PWD</span>/_config.yml:/app/_config.yml  hexo:0.1 hexo generate</span><br></pre></td></tr></table></figure><p>　　最终,我的Jenkins Shell中的配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里使用了jenkins自带的一些环境变量,避免硬编码</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;WORKSPACE&#125;</span></span><br><span class="line">docker build -t hexo:0.1 ./</span><br><span class="line"></span><br><span class="line">docker run --rm -v <span class="variable">$PWD</span>/public:/app/public/ -v <span class="variable">$PWD</span>/themes:/app/themes/ -v <span class="variable">$PWD</span>/<span class="built_in">source</span>:/app/<span class="built_in">source</span>/ -v <span class="variable">$PWD</span>/db.json:/app/db.json -v <span class="variable">$PWD</span>/_config.yml:/app/_config.yml  hexo:0.1 hexo generate</span><br><span class="line">rm -rf /var/www/hexo/*</span><br><span class="line">cp -r ./public/* /var/www/hexo/</span><br><span class="line"><span class="comment"># 为了解决权限问题...</span></span><br><span class="line">chmod o+r /var/www/hexo</span><br></pre></td></tr></table></figure><p>　　在我的预想中,这个任务应该能正常运行,但是又遇到了权限问题…在将文件拷贝到 /var/www/hexo/ 下后,nginx无法读取该目录下的文件,导致502了…因此将supervisor中jenkins程序的user改成了root,并在Jenkins Shell的最后加了一句修改文件夹权限的命令…</p><p>　　Update: 无需以root启动jenkins,只需修改结果文件的目录权限即可</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　这一步之后,博客就搭建完成了,目前很符合我的需求,虽然不完美,但是已经没有了改动的想法.<br>　　如果你在仿照这篇博客搭建自己的博客时遇到了什么问题,或者觉得哪里不满足需求,可以联系我~</p><!-- dns_setting.png -->]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言复习-总结</title>
      <link href="/2018/04/25-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(7).html"/>
      <url>/2018/04/25-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(7).html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　总算是断断续续的看完了,但是由于实践比较少,因此很多语法并没有深入的认识.但是也不能说完全没有收获,至少有了一些印象,当再看C语言相关的代码的时候至少知道搜索的关键词是什么了(笑..).<a id="more"></a></p><h2 id="关于收获"><a href="#关于收获" class="headerlink" title="关于收获"></a>关于收获</h2><p>　　总感觉做事是需要带着目的去的,事后也需要做总结,来审视做这件事的得失.没有目的就很难坚持下去,没有总结就容易产生浪费而不自知.  </p><h3 id="读这本书的目的"><a href="#读这本书的目的" class="headerlink" title="读这本书的目的"></a>读这本书的目的</h3><p>　　Flynnon是一个Python开发工程师,在能熟练的使用Python进行开发后就很自然的对它的实现产生了兴趣.于是上网百度了一圈,发现有一本现成的书《Python源码剖析》.简单了解了一下之后就买了它的影印版(很可惜绝版了…).并开始了学习…<br>　　但是进度远不如预期.当然,原因是多方面的(比如说Flynnon太懒..比如说手机太好玩(;´▽`)y-~~),但评估后发现对于C的不熟悉时影响效率的很大一个因素,因此决定先复习一下C语言的知识再继续.</p><h2 id="关于这本书"><a href="#关于这本书" class="headerlink" title="关于这本书"></a>关于这本书</h2><p>　　看完之后感觉,这本书并不适合初学者(也许第一版会好一些吧),因为在什么都不懂的情况下(比如,连内存的概念都没有建立起来的时候),这本书开头的铺垫有点少.另外,它也不适合高级开发者,对于它们而言介绍的知识点过于简洁了,看完后还是有很多语法/用法没有学习到.<br>　　另外,也不怎么适合我这种半吊子,也许是翻译的问题,导致看起来有一种很难受的感觉.而且这本书过于简单了,对于知识点的介绍总是浅尝辄止,导致看完后细想来并没有收获什么.附录看起来倒是蛮全的,但是实在没有心情读完了….<br>　　Flynnon本人感觉这本书并不是很好,作者的思维太发散了,导致看起来很乱,初学者依靠这本书很难建立对C语言的完整印象,而且作者的发散思维又有很强的干扰作用,会使得读者(比如Flynnon)产生先暂停看看别的书的想法,而中断又不大可能,因此会导致读完后感觉不懂的东西还是很多(当然如果本来就知道这些知识点的话,会对那些知识点有一些不同的认识).<br>　　综上,感觉本书并不是一本很好的学习C语言的书籍…</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>　　其实看完后的收获并不很多,因为日常开发中基本没有用到C的场景,这段时间的实践也仅仅是在看书的过程中写了一些小的Demo.因此对于这些知识点并没有记得很牢.但至少会对C语法有一定的印象,这样在看源码的时候至少知道怎么查了.因此也算是有些收获吧..</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习之路 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言复习笔记(6)</title>
      <link href="/2018/04/23-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(6).html"/>
      <url>/2018/04/23-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(6).html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　以下记录了第八章的一些知识点.这一章主要介绍了UNIX系统中用于输入和输出的系统调用,以及如何通过它们实现标准库函数(没细写).<a id="more"></a></p><h2 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入/输出"></a>输入/输出</h2><p>　　在UNIX操作系统中,所有的外围设备(包括键盘和显示器)都被看作是文件系统中的文件.因此,所有的输入/输出都要通过读文件或写文件完成.也就是说,通过一个单一的接口就可以处理外围设备和程序之间的所有通信.</p><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p>　　用户程序并不能直接操作文件(实际上文件仅仅是一种抽象),这部分权力被系统所接管.用户程序只能通过与系统交互得到一个文件描述符来对对应文件进行操作.</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>　　<strong>文件描述符(File Descriptor)</strong>通常是一个小的非负整数,内核用以标识一个特定进程正在访问的文件.当打开一个现有文件或创建一个新文件时,内核向进程返回一个文件描述符.系统负责维护已打开文件的所有信息,用户程序只能通过文件描述符引用文件.</p><h4 id="特殊的文件描述符"><a href="#特殊的文件描述符" class="headerlink" title="特殊的文件描述符"></a>特殊的文件描述符</h4><p>　　针对大多数的输入/输出是通过键盘和显示器来进行的这一现象,UNIX中的shell程序进行了优化.即:<br>　　把文件描述符0与进程的<strong>标准输入(standard input)</strong>关联,文件描述符1与<strong>标准输出(standard output)</strong>关联,文件描述符2与<strong>标准错误(standard error)</strong>关联.<br>　　这样的话,只要shell程序使用文件0作为输入,文件1和2作为输出,它就不会也无需知道程序的输入从哪里来,并输出到哪里去。</p><p>　　事实上,当我们通过shell进行简单的读写时,并不需要考虑什么文件描述符,直接使用read函数读取文本,再使用echo函数输出即可.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># demo.sh</span></span><br><span class="line"><span class="built_in">read</span> text</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;text&#125;</span></span><br></pre></td></tr></table></figure><p>　　而使用者可以很方便的使用管道与0,1,2这三个文件描述符来进行重定向.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行demo.sh文件</span></span><br><span class="line">./demo.sh                     <span class="comment"># 从标准输入读取,并输出到标准输出</span></span><br><span class="line">./demo.sh &lt; la.txt &gt; xx.txt   <span class="comment"># 从la.txt进行读取,并输出到xx.txt</span></span><br><span class="line"><span class="comment"># 通常,文件描述符2仍与显示器相关联.这样,出错信息会输出到显示器上</span></span><br></pre></td></tr></table></figure><h3 id="低级I-O"><a href="#低级I-O" class="headerlink" title="低级I/O"></a>低级I/O</h3><p>　　输入与输出是通过read和write系统调用实现的.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 系统调用 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个系统调用的函数都是类似的:</span></span><br><span class="line"><span class="comment">// 参数:  第一个参数都是文件描述符,第二个参数是程序中存放读或写的数据的字符数组,第三个参数是要传输的字节数.</span></span><br><span class="line"><span class="comment">// 返回值: 每个调用返回的都是实际传输的字节数,具体不同如下.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf, <span class="keyword">int</span> n)</span></span>; <span class="comment">// 函数的返回值可能会小于请求的字节数.如果返回值为0,则表示已到达文件的结尾;如果返回值为-1,则表示发生了某种错误.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf, <span class="keyword">int</span> n)</span></span>; <span class="comment">// 返回值是实际写入的字节数.如果返回值与请求写入的字节数不相等,则说明发生了错误</span></span><br></pre></td></tr></table></figure><p>　　在一次调用中,读出或写入的数据的字节数可以为任意大小.但是,用更大的值调用该函数可以获得更高的效率,因为系统调用的次数减少了.但是一次读取太多的话,占用内存又会变多….所以需要权衡…</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// open的函数签名</span></span><br><span class="line"><span class="comment">// 参数: name为文件名, flags为打开方式, perms代表权限</span></span><br><span class="line"><span class="comment">// 返回值: 所打开的文件的文件描述符,打开失败则返回-1.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> flags, <span class="keyword">int</span> perms)</span></span>;</span><br></pre></td></tr></table></figure><p>open函数主要支持的几种打开方式:</p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">含义</th><th style="text-align:left">对应</th></tr></thead><tbody><tr><td style="text-align:left">O_RDONLY</td><td style="text-align:left">只读模式打开</td><td style="text-align:left">r</td></tr><tr><td style="text-align:left">O_WRONLY</td><td style="text-align:left">只写方式打开</td><td style="text-align:left">w</td></tr><tr><td style="text-align:left">O_RDWR</td><td style="text-align:left">读写方式打开</td><td style="text-align:left">a</td></tr></tbody></table><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create的函数签名</span></span><br><span class="line"><span class="comment">// 参数: name代表文件名, perms代表所创建的文件的权限.</span></span><br><span class="line"><span class="comment">// 返回值: 所创建文件的文件描述符,打开失败则返回-1.</span></span><br><span class="line"><span class="comment">// 如果此文件已存在,create将把该文件的长度截断为0,从而丢弃原先已有的内容(也就是覆盖).这个过程并不会报错,且权限不会更改.</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> perms)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><p>　　一个程序能同时打开的文件数目是有限制的(一般为20),因此当一个程序需要同时处理许多文件时,要么更改系统的限制数目要么重用文件描述符.<br>　　作为一个合格的程序,不应该擅自更改一些系统变量.因此,比较好的方法是重用文件标识符.其实也就是释放原来占用的文件标识符,再申请新的文件标识符.<br>　　close用来断开文件描述符和已打开文件之间的连接,并释放此文件描述符,以供其它文件使用.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// close的函数签名</span></span><br><span class="line"><span class="comment">// 参数: 要关闭的文件的文件标识符</span></span><br><span class="line"><span class="comment">// 返回值: 成功返回0,出错返回-1.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure><p>　　close的功能与fclose类似,但是fclose会刷新缓冲区,而close不会.<br>　　当一个进程终止时,内核对该进程所有尚未关闭的文件描述符调用close关闭,所以即使用户程序不调用close,在终止时内核也会自动关闭它打开的所有文件.</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>　　unlink将一个名称(这个涉及到软连接与硬链接..)从系统中删除.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unlink的函数签名</span></span><br><span class="line"><span class="comment">// 参数: 要删除的文件名</span></span><br><span class="line"><span class="comment">// 返回值: 成功执行时,返回0;失败返回-1.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unlink</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h3><p>　　上面介绍的read和write方法在访问文件时时顺序进行的,也就是在访问第1000个字符时需要先顺序访问前999个,但是对于我们的需求来说,这就有点浪费了,我们实际上需要一种可以直接从开头跳到第1000个字符的方法,也就是随机访问.<br>　　正好,系统调用lseek与fseek可以在文件中任意移动位置而不实际读写任何数据.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lseek的函数签名</span></span><br><span class="line"><span class="comment">// 参数: fd -&gt; 要操作的文件的文件描述符</span></span><br><span class="line"><span class="comment">//      offset -&gt; 偏移量(相对于origin而言的),当origin参数不为0时,offset参数可以为负值</span></span><br><span class="line"><span class="comment">//      origin -&gt; 定位符(0表示以文件开头位置为基点,1表示以当前位置为基点,2表示以文件结束位置为基点).</span></span><br><span class="line"><span class="comment">// 返回值: 调用成功时返回目前的读写位置,也就是距文件开头的字节数.若有错误则返回-1.</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">lseek</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">long</span> offset, <span class="keyword">int</span> origin)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例: 指向文件的末尾</span></span><br><span class="line">lseek(fd, <span class="number">0L</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// fseek的函数签名</span></span><br><span class="line"><span class="comment">// 参数: stream -&gt; 代表要操作的文件的文件指针</span></span><br><span class="line"><span class="comment">//      offset -&gt; 与上同</span></span><br><span class="line"><span class="comment">//      origin -&gt; 与上同</span></span><br><span class="line"><span class="comment">// 返回值: 调用成功时返回0,若有错误则返回一个非零值.</span></span><br><span class="line"><span class="comment">// 附加说明: fseek不像lseek会返回读写位置,因此必须使用ftell()来取得目前读写的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fseek</span><span class="params">(FILE * stream, <span class="keyword">long</span> offset, <span class="keyword">int</span> origin)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例: 指向文件的末尾</span></span><br><span class="line">fseek(FILE *stream, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ftell的函数签名</span></span><br><span class="line"><span class="comment">// 参数: stream -&gt; 代表要操作的文件的文件指针</span></span><br><span class="line"><span class="comment">// 返回值: 调用成功时返回目前的读写位置,也就是距文件开头的字节数.出错则返回-1.</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">ftell</span><span class="params">(FILE *stream)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h3><p>　　UNIX中,文件的信息是存储在inode表中的,而文件名仅仅是inode的一个别称.<br>　　也就是说,在UNIX中通过文件名打开文件需要经历以下步骤:<br>　　1.系统找到这个文件名对应的inode号码;<br>　　2.系统通过inode号码,获取到对应的inode信息;<br>　　3.根据inode信息,定位文件数据所在的block,读出数据. </p><p>　　在UNIX系统中,目录就是文件.目录文件的结构非常简单,就是一系列目录项(dirent)的列表.每个目录项,由两部分组成:所包含文件的文件名,以及该文件名对应的inode号码.</p><p>　　我们可以通过系统调用stat来获取某文件的信息.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stat的函数签名</span></span><br><span class="line"><span class="comment">// 参数: path -&gt; 代表要操作的文件的路径</span></span><br><span class="line"><span class="comment">//      buf -&gt; 用来承载文件信息的stat结构体对象的指针</span></span><br><span class="line"><span class="comment">// 返回值: 返回文件的i结点中的所有信息;若出错,则返回-1.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, struct stat *buf)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头文件&lt;sys/stat.h&gt;中包含了描述stat的返回值的结构</span></span><br><span class="line"><span class="comment">// 这个就不细写了,用到的时候查就可以了~(Flynnon还是太懒了...)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> &#123;</span></span><br><span class="line">        <span class="keyword">mode_t</span>     st_mode;       <span class="comment">//文件对应的模式,文件,目录等信息.</span></span><br><span class="line">        <span class="keyword">ino_t</span>      st_ino;        <span class="comment">//inode节点号</span></span><br><span class="line">        <span class="keyword">dev_t</span>      st_dev;        <span class="comment">//设备号码</span></span><br><span class="line">        <span class="keyword">dev_t</span>      st_rdev;       <span class="comment">//特殊设备号码</span></span><br><span class="line">        <span class="keyword">nlink_t</span>    st_nlink;      <span class="comment">//文件的连接数</span></span><br><span class="line">        <span class="keyword">uid_t</span>      st_uid;        <span class="comment">//文件所有者</span></span><br><span class="line">        <span class="keyword">gid_t</span>      st_gid;        <span class="comment">//文件所有者对应的组</span></span><br><span class="line">        <span class="keyword">off_t</span>      st_size;       <span class="comment">//普通文件,对应的文件字节数</span></span><br><span class="line">        <span class="keyword">time_t</span>     st_atime;      <span class="comment">//文件最后被访问的时间</span></span><br><span class="line">        <span class="keyword">time_t</span>     st_mtime;      <span class="comment">//文件内容最后被修改的时间</span></span><br><span class="line">        <span class="keyword">time_t</span>     st_ctime;      <span class="comment">//文件状态改变时间</span></span><br><span class="line">        <span class="keyword">blksize_t</span> st_blksize;     <span class="comment">//文件内容对应的块大小</span></span><br><span class="line">        <span class="keyword">blkcnt_t</span>   st_blocks;     <span class="comment">//伟建内容对应的块数量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>　　下面给出一个使用stat系统调用的例子.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">buf</span>;</span></span><br><span class="line">    stat(<span class="string">"/etc/hosts"</span>, &amp;buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"/etc/hosts file size = %d\n"</span>, buf.st_size); <span class="comment">// 通过stat系统调用得到了某个文件的大小并打印</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p> 　　UNIX系统中的权限是由九位二进制数字控制的,具体如下:<br> 　　1.从左至右,1-3位数字代表文件所有者的权限,4-6位数字代表同组用户的权限,7-9数字代表其他用户的权限.<br> 　　2.每三位中,第一位代表读权限,第二位代表写权限,第三位代表执行权限.<br> 　　也就是:代表权限的二进制的取值范围为:000 000 000 - 111 111 111,换算为八进制就是 0000 - 0777.方便起见,一般使用三个八进制的值来表示权限,例如777代表所有人拥有所有权限.</p><p>　　在Linux中更改文件权限的方式如下.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 将某个文件的权限换成777(所有人都可读可写可执行)</span></span><br><span class="line">sudo chmod 777 <span class="variable">$&#123;file_path&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使某文件对于其所属用户组可执行.</span></span><br><span class="line">sudo chmod g+x <span class="variable">$&#123;file_path&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习之路 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《操作系统革命》杂记</title>
      <link href="/2018/04/11-%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A9%E5%91%BD%E3%80%8B%E6%9D%82%E8%AE%B0.html"/>
      <url>/2018/04/11-%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A9%E5%91%BD%E3%80%8B%E6%9D%82%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>　　最近莫名其妙的产生了自己搭建服务器的想法(已经有云服务器的前提下),结果淘宝、京东、百度、Google了一圈之后发现好像没有便宜的….但是也不是毫无收获吧,搜索的过程中,不知道在哪里看到了《操作系统革命》这个名字,感觉很高大上的样子….就搜了一下,发现B站上有这个纪录片.于是把它看完了,并进行了一些记录.</p><p>　　记录片基本是跟随Linux发展的时间线走的,从GNU开始说起,直到Red Hat和VA Linux的上市为止.因为是科普性质,所以很多事情都是一笔带过的.<a id="more"></a></p><h2 id="大事记"><a href="#大事记" class="headerlink" title="大事记"></a>大事记</h2><p>　　比尔盖茨首先提出了软件是需要收费的.</p><p>　　Richard Stallman从1983年开始逐步开启了GNU计划,并聚集了一帮人开发出了除了内核之外的一套操作系统上的工具.在这个过程中他创建了Free Software Foundation(自由软件基金会).  </p><p>　　而Linus比他们早开发出内核(Linux内核),因此1992年,两方结合组成了一个完整的操作系统生态.<br>　　因为后来Linux这个名字使用更加广泛,因此Richard与Linus两位大佬谁都不服谁…纪录片中那个颁奖视频中一个在强调<a href="https://www.gnu.org/gnu/why-gnu-linux.html">是GNU(GNU/Linux)系统而不是Linux系统</a>,另一个在逗娃…  </p><p>　　1998年的GNU自称为Free Software(Free是指开放,即源代码可以获取、修改),然而人们总把它与免费联系在一起,认为它不能赚钱,违背了商业道德.基于此以及理念上的不同,Eric,Linus等一批人提出了Open Source的概念,并成立了开放源代码促进会.  </p><p>　　IE使用捆绑、免费打败网景之后,网景开始担心微软滥用市场地位,修改通用标准(HTML/HTTP)等,使其它软件公司(网景等)被迫退出服务器市场.,因此决定开放源代码(把源代码本身开做产品,借助公司之外的人开发软件).这个决定使得OpenSource与Linux进入到更多人的视线(毕竟大公司).  </p><p>　　自由软件社团的人组织对微软发起退款运动…使得计算机制造商允许人们购买未预装操作系统的电脑.  </p><p>　　Red Hat与VA Linux的上市,标志着Linux系统与开源的巨大胜利(当然,记录片中的VA Linux,现在基本没听到过这个名字了…).  </p><h2 id="Linux内核发展简史"><a href="#Linux内核发展简史" class="headerlink" title="Linux内核发展简史"></a>Linux内核发展简史</h2><p>　　1991年,Linux 0.01发布,1万行代码,1个用户.<br>　　1992年,Linux 0.96发布,4万行代码,1000个用户.<br>　　1993年,Apache项目正式启动,促进了Internet发展的同时,并使得Linux系统使用人数快速增长(使用这一套很省钱且很快就可以搭建一个Web服务器,回报比NT高).并且Apache的市场份额逐渐增加(可靠、灵活、可扩展).<br>　　1994年,Linux 1.0发布,17万行代码.<br>　　1995年,Linux 1.2发布,25万行代码,50万用户.<br>　　1997年,Linux 2.1发布,80万行代码,350万用户.<br>　　1998年,Linux 2.110发布,150万行代码,750万用户.<br>　　1998年,开放源代码促进会(Open Source Intiative)成立.<br>　　1999年,Linux 2.2发布,1200万用户.<br>　　1999年,RED HAT成为首个上市的Linux公司.  </p><h2 id="自由-Free-与开源-Open-Source"><a href="#自由-Free-与开源-Open-Source" class="headerlink" title="自由(Free)与开源(Open Source)"></a>自由(Free)与开源(Open Source)</h2><p>自由软件中的四种自由:<br>　　自由之零：不论目的为何，有使用该软件的自由;<br>　　自由之一：有研究该软件如何运作的自由，并且得以修改该软件来匹配用户自身的需求。获取该软件之源码为达成此目的之前提;<br>　　自由之二：有重新散布该软件的自由，所以每个人都可以借由散布自由软件来敦亲睦邻;<br>　　自由之三：有改善再利用该软件的自由,并且可以发表修订后的版本供公众使用,如此一来，整个社区都可以受惠.如前项,获取该软件之源码为达成此目的之前提.</p><p>Open Source许可证原则:<br>　　1.自由的重新发布(无所谓收不收费);<br>　　2.必须附带源码；<br>　　3.衍生著作,拿到别人的源码后可在遵循统一协议的情况下再发布;<br>　　4.必须保证原作者程序的完整性,须使用版本号分别;<br>　　5.没有对个人或组织的歧视;<br>　　6.没有对任何领域的歧视;<br>　　7.许可证是可继承的;<br>　　8.不针对特定系统;<br>　　9.不能损坏其它程序的许可性质.</p><p>纪录片中对<a href="https://www.gnu.org/philosophy/free-sw.zh-cn.html">自由软件</a>与<a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6">Free Software</a>区别的解释:<br>　　Open Source 关注的是可以由此形成一个社团,成员通过交流与改进软件来相互协作.<br>　　Free Software 关注的是与他人合作的自由、组织社团的自由.<br>　　GUN基金会的解释: <a href="https://www.gnu.org/philosophy/free-software-for-freedom.zh-cn.html">https://www.gnu.org/philosophy/free-software-for-freedom.zh-cn.html</a></p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>　　其实看完之后,收获真的不多…只能说了解了Linux发展的历史,以及对闭源,开源和自由软件有了一点了解.<br>　　我认为开源本身对于开发者的好处是显而易见的,可以通过观看其它人写到代码来提升自己(得有耐心…),如果自己开发的的程序/功能被很多人使用,对于个人品牌打造很有帮助.就像记录片中的某人(没记住名字…),在面试的时候直接来了一句,某某软件是我开发的~怎一个潇洒了得.<br>　　另外,自由软件这个概念也很好,但是并不好实现,只能说盼望世界变成这样吧…<br>　　然而,闭源将软件看做劳动成果保护起来,用以获取财富;开源将软件看做知识,提倡自由分享.这两种都没错…只能说是立场之争…站在我的角度,肯定是开源好一点了(性价比高且使用时有莫名的成就感)…<br>　　再好的软件也需要推广,比如纪录片中提到的每隔一段时间的安装会,以及掀起对微软的退款游行以提高知名度..</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>　　感觉这篇博客语法很差劲…但是又没想还咋改,希望未来的某个时间能再次看到这篇博客,并修改一番吧…</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言复习笔记(5)</title>
      <link href="/2018/04/10-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(5).html"/>
      <url>/2018/04/10-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(5).html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　以下记录了第七章的一些知识点.</p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>　　标准库实现了简单的文本输入/输出模式.在这个模式中,文本流由一系列行组成,每一行的结尾是一个换行符.如果系统没有遵循这种模式,则标准库将通过一些措施使得该系统适应这种模式.例如,标准库可以在输入端将回车符和换行符都转换为换行符,而在输出端进行反向转换.<a id="more"></a><br>　　一般输入输出相关的标准函数均定义在&lt;stdio.h&gt;头文件中.</p><h3 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getchar 与 putchar </span></span><br><span class="line"><span class="comment">// getchar从标准输入进行字符读取.函数在每次被调用时返回下一个输入字符.若遇到文件结尾,则返回EOF.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getchar</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">// putchar将字符输送至标准输出上.如果没有发生错误,则函数putchar返同输出的字符;如果发生了错误,则返回EOF.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putchar</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>　　符号常量EOF(END OF FILE)在头文件&lt;stdio.h&gt;中定义,其值一般为-1,但程序中应该使用EOF本身来测试文件是否结束,这样才能保证程序同EOF的特定值无关.<br>　　事实上,getchar与putchar都是宏定义而不是函数.</p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>　　格式化输出是更高层次上的一种输出方法,通过它可以设定输出格式.</p><h4 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// printf的函数原型</span></span><br><span class="line"><span class="comment">// printf在输出格式format的控制下,将其参数进行转换与格式化,并输出到标准输出.它的返回值为打印的字符数.</span></span><br><span class="line"><span class="comment">// 后面三个小数点代表变长参数表(不定长参数),具体请见下方扩展</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sprintf的函数原型</span></span><br><span class="line"><span class="comment">// printf在输出格式format的控制下,将其参数进行转换与格式化,并将结果存放到string中.它的返回值为打印的字符数.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>, <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意:上述函数使用第一个参数判断后面参数的个数及类型.如果参数的个数不够或者类型错误,则将得到错误的结果.</span></span><br></pre></td></tr></table></figure><h4 id="格式字符串"><a href="#格式字符串" class="headerlink" title="格式字符串"></a>格式字符串</h4><p>　　格式字符串即printf函数与sprint函数的函数定义中的format参数.<br>　　格式字符串包含两种类型的对象:普通字符和转换说明.在输出时,普通字符(不包括%)将原样不动地复制到输出流中,而转换说明则是用于控制上述函数中其余参数(即最后不定长参数表)的转换和打印.<br>　　每个转换说明都由一个百分号字符(即%)开始,并以一个转换字符结束.合法的转换字符列表如下:</p><table><thead><tr><th>转换字符</th><th>参数类型</th><th>输出形式</th></tr></thead><tbody><tr><td>d, i</td><td>int 类型</td><td>十进制数</td></tr><tr><td>o</td><td>int 类型</td><td>无符号八进制数(没有前导 0)</td></tr><tr><td>x, X</td><td>int 类型</td><td>无符号十六进制数(没有前导0x或0X),即:10~15分别用abcdef或ABCDEF表示</td></tr><tr><td>u</td><td>int 类型</td><td>无符号十进制数</td></tr><tr><td>c</td><td>int 类型</td><td>单个字符</td></tr><tr><td>s</td><td>char *类型</td><td>顺序打印字符串中的字符，直到遇到’\0’或已打印了由精度指定的字符数为止</td></tr><tr><td>f</td><td>double 类型</td><td>十进制小数[-]m.dddddd，其中d的个数由精度指定(默认值为6)</td></tr><tr><td>e, E</td><td>double 类型</td><td>科学计数法[-]m.dddddd e ±xx 或[-]m.dddddd E ±xx，其中d的个数由精度指定(默认值为 6)</td></tr><tr><td>g, G</td><td>double 类型</td><td>如果指数小于-4或大于等于精度,则用 %e/%E 格式输出,否则用 %f 格式输出.尾部的0和小数点不打印</td></tr><tr><td>p</td><td>void *类型</td><td>指针(取决于具体实现)</td></tr><tr><td>%</td><td>无(不转换参数)</td><td>打印一个百分号%</td></tr></tbody></table><h4 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h4><p>　　通过在%与转换字符之间添加一些特定格式的值可以更加细致的控制输出格式(例如指定输出是左对齐还是右对齐).合法的填充如下:</p><table><thead><tr><th>填充格式</th><th>含义(作用)</th></tr></thead><tbody><tr><td>负号 -</td><td>指定被转换的参数按照左对齐的形式输出</td></tr><tr><td>数字</td><td>指定最小字段宽度,转换后的参数将打印不小于最小字段宽度的字段.不足则用空格填充</td></tr><tr><td>小数点</td><td>字段宽度与精度的分隔符</td></tr><tr><td>数字</td><td>指定精度.(指定字符串中要打印的最大字符数,浮点数小数点后的位数,整型最少输出的数字数目)</td></tr><tr><td>字母 h 或 l</td><td>只能作用于整形.h表示将整数作为short类型打印. l表示将整数作为long类型打印</td></tr></tbody></table><h4 id="效果示例"><a href="#效果示例" class="headerlink" title="效果示例"></a>效果示例</h4><p>　　下面是一些示例(以printf(format, “hello world”)为例):</p><table><thead><tr><th>格式化字符串(format)</th><th>输出结果</th><th>解释</th></tr></thead><tbody><tr><td>:%12s:</td><td>: hello world:</td><td>最少输出12个字符(右对齐)</td></tr><tr><td>:%.9s:</td><td>:hello wor:</td><td>.分隔, 最大输出九个字符(超出的截断)</td></tr><tr><td>:%-12s:</td><td>: hello world:</td><td>最少输出12个字符(左对齐)</td></tr><tr><td>:%-11.10s:</td><td>:hello worl :</td><td>.分隔, 最少输出11个字符,后面的字符串输出10位,左对齐</td></tr></tbody></table><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>　　在printf函数与sprintf函数的声明中均使用了三个小数点(省略号)来作为参数,这种参数叫做变长参数表.它表示参数表中参数的数量和类型是可变的,且它只能出现在参数表的尾部.<br>　　变长参数表的使用: 标准头文件&lt;stdarg.h)中包含一组宏定义,它们对如何遍历参数表进行了定义.具体请见下列示例.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用变长参数表实现一个具有printf部分功能的函数 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="comment">/* 变长参数表相关的宏有 va_list, va_start, va_arg, va_end. 它们都被定义在 stdarg.h 头文件中  */</span></span><br><span class="line"><span class="comment">/* 适应变长参数表时参数列表中至少应包括一个有名参数(例如以下示例中的fmt), va_start将最后一个有名参数作为起点 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">minprintf</span><span class="params">(<span class="keyword">char</span> *fmt, ...)</span></span>&#123; <span class="comment">// 声明不定长参数表</span></span><br><span class="line">    va_list ap;                 <span class="comment">// 使用 va_list宏 来声明一个指向变长参数表的参数指针.</span></span><br><span class="line">    <span class="keyword">char</span> *p, *sval;             <span class="comment">// 定义一些中间变量</span></span><br><span class="line">    <span class="keyword">int</span> ival;</span><br><span class="line">    <span class="keyword">double</span> dval;</span><br><span class="line">    va_start(ap, fmt);          <span class="comment">// 使用 va_start宏 来使上面声明的参数指针ap指向变长参数表中的第一个参数.在使用 ap 之前,该宏必须被调用一次</span></span><br><span class="line">    <span class="keyword">for</span> (p = fmt; *p; p++) &#123;    <span class="comment">// 遍历 fmt 参数(即格式字符串)</span></span><br><span class="line">        <span class="keyword">if</span> (*p != <span class="string">'%'</span>) &#123;        <span class="comment">// 跳过格式字符串中的 % 字符</span></span><br><span class="line">            <span class="built_in">putchar</span>(*p);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (*++p) &#123;          <span class="comment">// 根据格式字符来选择具体的打印策略</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                ival = va_arg(ap, <span class="keyword">int</span>);   <span class="comment">// 使用 va_arg宏 来从不定长参数表中读取特定类型的参数,并将参数指针移动相应的步长</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, ival);       <span class="comment">// 为了简单....使用了printf函数来完成输出时的格式转化</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'f'</span>:</span><br><span class="line">                dval = va_arg(ap, <span class="keyword">double</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%f"</span>, dval);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                <span class="keyword">for</span> (sval = va_arg(ap, <span class="keyword">char</span> *); *sval; sval++)</span><br><span class="line">                    <span class="built_in">putchar</span>(*sval);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">putchar</span>(*p);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(ap);  <span class="comment">// 使用结束后,使用 va_end宏 来完成清理工作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    minprintf(<span class="string">"%d %s %f"</span>, <span class="number">1</span>, <span class="string">"hahaha"</span>, <span class="number">2.5</span>);  <span class="comment">// 调用, 其结果与同参数调用printf函数相同</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="格式化输入"><a href="#格式化输入" class="headerlink" title="格式化输入"></a>格式化输入</h3><p>　　格式化输入是更高层次上的一种输入读取方法,通过它可以对读取到的字符串进行转化,直接得到特定类型的变量.</p><h4 id="函数-2"><a href="#函数-2" class="headerlink" title="函数"></a>函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scanf的函数原型</span></span><br><span class="line"><span class="comment">// scanf函数从标准输入中读取字符序列,按照format中的格式说明对字符序列进行解释,并把结果保存到其余的参数中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scanf</span><span class="params">(<span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sscanf的函数原型</span></span><br><span class="line"><span class="comment">// sscanf从字符串string中读取字符序列,按照format中的格式说明对字符序列进行解释,并把结果保存到其余的参数中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sscanf</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>, <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意:</span></span><br><span class="line"><span class="comment">// 1.scanf与sscanf函数的所有不定长参数都必须是指针,用于指定经格式转换后的相应输入保存的位置;</span></span><br><span class="line"><span class="comment">// 2.上述函数在扫描完其格式串或者碰到某些输入无法与格式控制说明匹配的情况时,终止执行.</span></span><br><span class="line"><span class="comment">// 3.上述函数的返回值为成功匹配并赋值的输入项的个数,而当达到文件尾时,该函数返回EOF. 即:该函数的返回值可以用来确定已匹配的输入项的个数.</span></span><br><span class="line"><span class="comment">// 4.返回值为0表示下一个输入字符与格式串中的第一个格式说明不匹配.下一次调用scanf函数时将从上一次转换的最后一个字符的下一个字符开始继续搜索.</span></span><br></pre></td></tr></table></figure><h4 id="格式字符串-1"><a href="#格式字符串-1" class="headerlink" title="格式字符串"></a>格式字符串</h4><p>　　格式字符串即scanf函数与sscanf函数的函数定义中的format参数.它通常包含转换说明,用于控制输入的转换.<br>　　格式字符串包含三种类型的对象:空白字符(空格/制表符),普通字符和转换说明.在读取时,空白字符将被忽略,普通字符(不包括%),用于匹配输入流中下一个非空白符字符,而转换说明则是用于控制上述函数中其余参数(即变长参数表中的参数)的读取与转换.<br>　　每个转换说明都由一个百分号字符(即%)开始,并以一个转换字符结束.合法的转换字符列表如下:</p><table><thead><tr><th>转换字符</th><th>参数类型</th><th>读取参数格式</th></tr></thead><tbody><tr><td>d</td><td>int *类型</td><td>十进制整数</td></tr><tr><td>i</td><td>int *类型</td><td>可以是八进制(以 0 开头)或十六进制(以 0x 或 0X 开头)</td></tr><tr><td>o</td><td>int *类型</td><td>八进制整数(可以以 0 开头,也可以不以 0 开头)</td></tr><tr><td>x</td><td>int *类型</td><td>十六进制整数(可以 0x 或 0X 开头,也可以不以 0x 或 0X 开头)</td></tr><tr><td>u</td><td>unsigned int *类型</td><td>无符号十进制整数</td></tr><tr><td>c</td><td>char *类型</td><td>字符</td></tr><tr><td>s</td><td>char *类型(指向一个足以存放该字符串(还包括尾部的字符’\0’)的字符数组.字符串的末尾将被添加一个结束符’\0’)</td><td>字符串(不加引号)</td></tr><tr><td>e, f, g</td><td>float *类型</td><td>浮点数,它可以包括正负号(可选)、小数点(可选)及指数部分(可选)</td></tr><tr><td>%</td><td>无(不进行任何赋值操作)</td><td>不进行任何赋值操作</td></tr></tbody></table><h4 id="填充-1"><a href="#填充-1" class="headerlink" title="填充"></a>填充</h4><p>　　通过在%与转换字符之间添加一些特定格式的值可以更加细致的控制读取规则.合法的填充如下:</p><table><thead><tr><th>填充格式</th><th>含义(作用)</th></tr></thead><tbody><tr><td>赋值禁止字符 *</td><td>被此字符填充时,跳过该输入字段,不进行赋值</td></tr><tr><td>数字</td><td>指定最大字段宽度</td></tr><tr><td>h</td><td>只能作用于整形.h表明参数表的相应参数是一个指向short类型的指针</td></tr><tr><td>l</td><td>作用于整数时,表明参数表的相应参数是一个指向long类型的指针.作用于浮点数时,表明参数表的相应参数是一个指向double类型的指针</td></tr></tbody></table><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> int_v;</span><br><span class="line"><span class="keyword">char</span> char_v[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">float</span> f_v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %s %*d %f"</span>, &amp;int_v, char_v, &amp;f_v);</span><br><span class="line"><span class="comment">// 运行上述程序片段时,可在标准输入输入 10 lalala 3 2.8, 之后, int_v的值为10, char_v数组的前七个字符为 l a l a l a \0, f_v的值为 2.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// scanf函数忽略格式串中的空格和制表符.此外,在读取输入值时,它将跳过空白符(空格符、横向制表符、换行符、回车符、纵向制表符以及换页符).如果要读取格式不固定的输入,最好每次读入一行,然后再用sscanf将合适的格式分离出来读入.</span></span><br><span class="line"><span class="comment">// scanf函数可以与其它输入函数混合使用,无论使用哪个输入函数,调用下一个输入函数时将从scanf没有读取的第一个字符处开始读取数据.即:每次使用scanf它的读取都会被消费,而读取失败的会被略过.</span></span><br><span class="line"><span class="comment">// 场景: 在从标准输入读取日期时,支持多种输入格式.</span></span><br><span class="line"><span class="keyword">while</span> (getline(line, <span class="keyword">sizeof</span>(line)) &gt; <span class="number">0</span>) &#123;                    <span class="comment">// 需要保存输入,再一一判断格式</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">"%d %s %d"</span>, &amp;day, monthname, &amp;year) == <span class="number">3</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"valid: %s\n"</span>, line);                         <span class="comment">// dd mm yy 格式</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sscanf</span>(line, <span class="string">"%d/%d/%d"</span>, &amp;month, &amp;day, &amp;year) == <span class="number">3</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"valid: %s\n"</span>, line);                         <span class="comment">// mm/dd/yy格式</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"invalid: %s\n"</span>, line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>　　文件也可以看成是一种特殊的输入输出设备.事实上,在Linux系统中一切都被抽象成文件.</p><h3 id="文件的打开"><a href="#文件的打开" class="headerlink" title="文件的打开"></a>文件的打开</h3><p>　　在操作文件之前,我们需要先打开一个文件.这个操作是通过&lt;stdio.h&gt;头文件中的fopen函数实现的.它的介绍如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fopen函数的函数签名</span></span><br><span class="line"><span class="comment">// 第一个参数name是一个字符串,它包含了文件名(包括绝对路径).</span></span><br><span class="line"><span class="comment">// 第二个参数mode也是一个字符串，它代表了文件的使用模式,用于指定文件的使用方式.这个参数的详细介绍在后面一点.</span></span><br><span class="line"><span class="comment">// 它的返回值是一个可以用于文件读写操作的指针,被成为文件指针.关于文件指针,后面在详细介绍.</span></span><br><span class="line"><span class="function">FILE *<span class="title">fopen</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">char</span> *mode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fopen函数的使用</span></span><br><span class="line"><span class="comment">// 以写模式打开一个文件</span></span><br><span class="line">FILE *fp = fopen(<span class="string">"/home/flynnon/a.txt"</span>, <span class="string">"w"</span>);</span><br></pre></td></tr></table></figure><p>　　fopen函数返回的文件指针实际上指向的是一个包含文件信息的结构.这些所指的信息包括:缓冲区的位置、缓冲区中当前字符的位置、文件的读或写状态、是否出错或是否已经到达文件结尾等等状态.如果发生错误,fopen将返回 NULL.<br>　　幸运的是,我们并不需要直接与这些具体的细节打交道.这些信息已经被&lt;stdio.h&gt;头文件中的FILE封装好了.这里要注意的是FILE像int一样是一个类型名,而不是一个结构标记(它是通过typedef定义的).<br>　　使用fopen打开一个文件有多种模式,见下表:</p><table><thead><tr><th>模式字符串</th><th>名称</th><th>行为</th></tr></thead><tbody><tr><td>w</td><td>写模式</td><td>打开不存在的文件时,会新建.打开已存在的文件时,会将先该文件的内容清空.然后写入.</td></tr><tr><td>r</td><td>读模式</td><td>只能对文件内容进行读取,不能写入.</td></tr><tr><td>a</td><td>追加模式</td><td>打开不存在的文件时,会新建.打开已存在的文件时,会将指针移动到文件末尾.然后写入.</td></tr><tr><td>r</td><td>与上述模式合用,二进制模式</td><td>用来打开二进制类型的文件.</td></tr></tbody></table><h3 id="文件内容的读写"><a href="#文件内容的读写" class="headerlink" title="文件内容的读写"></a>文件内容的读写</h3><p>　　有两个类似于getchar与putchar的从文件中操作字符的函数getc与putc,下面是介绍.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getc与putc都需要一个文件指针,以得到操作的文件的信息.</span></span><br><span class="line"><span class="comment">// getc函数返回fp指向的输入流中的下一个字符.如果到达文件尾或出现错误,该函数将返回EOF.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getc</span><span class="params">(FILE *fp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// putc函数将字符c写入到fp指向的文件中,并返回写入的字符.如果发生错误,则返回EOF.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putc</span><span class="params">(<span class="keyword">int</span> c, FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure><p>　　同样的,也有两个类似于printf与scanf的从文件中操作字符的函数fprintf与fscanf,下面是介绍.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 它们与scanf和printf函数的区别仅仅在于它们的第一个参数是一个指向所要读写的文件的指针</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fscanf</span><span class="params">(FILE *fp, <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">(FILE *fp, <span class="keyword">char</span> *format, ...)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="特殊的文件"><a href="#特殊的文件" class="headerlink" title="特殊的文件"></a>特殊的文件</h3><p>　　启动一个C语言程序时,操作系统环境负责打开3个文件,并将这3个文件的指针提供给该程序.这3个文件分别是标准输入、标准输出和标准错误,它们的文件指针分别为stdin、stdout和stderr.<br>　　stdin,stdout,stderr都是常量,不能为它们重新赋值.<br>　　事实上,前面的标准输入输出函数getchar与putchar可以等同于下列定义宏定义.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际上,getchar与putchar只是从标准输入stdin中进行字符的读取与输出.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() getc(stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putchar(c) putc((c),stdout)</span></span><br></pre></td></tr></table></figure><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p>　　文件作为一种资源,长时间占用总是不好的.因此在使用完成之后需要关闭它.这时就会用到fclose函数.<br>　　当文件指针不再需要时及时释放是一个很好的习惯.当程序正常终止时,程序会自动为每个打开的文件调用fclose函数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fclose函数关闭一个文件指针所指的文件流,把缓冲区内最后剩余的数据输出到流中,并释放函数指针和有关的缓冲区.</span></span><br><span class="line"><span class="comment">// 如果流成功关闭,fclose返回0,否则返回EOF.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fclose</span><span class="params">(FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>　　有时候在编写代码时,不想通过硬编码来指定输入输出的文件,此时可以使用freopen函数来进行流的重定向.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// freopen函数可以把预定义的标准流文件定向到以mode模式打开的filename文件的文件指针</span></span><br><span class="line"><span class="function">FILE * <span class="title">freopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">const</span> <span class="keyword">char</span> *mode, FILE *stream)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下列语句将标准输出重定向到了normal.log文件中</span></span><br><span class="line">freopen(<span class="string">"normal.log"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="comment">// 此时下列输出语句实际上是将 "lalalal" 输出到normal.log文件中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"lalalal"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下列语句将标准输出重定向到了normal.log文件中</span></span><br><span class="line">freopen(<span class="string">"normal.log"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="comment">// 此时下列输出语句实际上是将 "lalalal" 输出到normal.log文件中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"lalalal"</span>);</span><br></pre></td></tr></table></figure><h3 id="输出错误"><a href="#输出错误" class="headerlink" title="输出错误"></a>输出错误</h3><p>　　前面提到标准输入输出有三种,也给出了使用stdin、stdout(使用printf,scanf,pprintf,pscanf)的例子.下面会给出一个使用stderr的示例,并介绍ferror、feof函数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"param is wrong."</span>); <span class="comment">// 将字符串输出到标准错误</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);                            <span class="comment">// 使用exit退出程序</span></span><br><span class="line">    &#125;</span><br><span class="line">    FILE *fp = fopen(<span class="string">"/Users/flynnon/blog/d.json"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(ferror(fp))&#123;                         <span class="comment">// 检查文件流中是否有错误</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ope file error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exit函数被调用时,调用程序将终止执行,任何调用该程序的进程都可以获取exit的参数值.</span></span><br><span class="line"><span class="comment">// 一般以0作为正常的返回值,以其余数字作为错误的标志(可以看看Linux中的规定).</span></span><br><span class="line"><span class="comment">// exit还会为每个已打开的输出文件调用fclose函数,以将缓冲区中的所有输出写到相应的文件中.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果流fp中出现错误,则函数ferror返回一个非0值.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ferror</span><span class="params">(FILE *fp)</span></span>;</span><br><span class="line"><span class="comment">// 如果指定的文件到达文件结尾,它返回一个非0值.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">feof</span><span class="params">(FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="行输出与行输入"><a href="#行输出与行输入" class="headerlink" title="行输出与行输入"></a>行输出与行输入</h3><p>　　在读取文件的时候,常常有读取一行或者输出一行的需求,而使用以上的fgetc/fscanf/fputc/fprintf都不是很方便(傻瓜)…还好,C语言标准库提供了fgets与fputs方法…下面是介绍.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出函数fputs将一个字符串(不需要包含换行符,此函数自己根据平台添加)写入到一个文件中.发生错误时,该函数将返回EOF,否则返回一个非负值.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span><span class="params">(<span class="keyword">char</span> *line, FILE *fp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fgets函数从fp指向的文件中读取下一个输入行(包括换行符),并将它存放在字符数组line中,它最多可读取maxline-1个字符.</span></span><br><span class="line"><span class="comment">// fgets读取的行将以'\0'结尾保存到数组中.</span></span><br><span class="line"><span class="comment">// 通常情况下,fgets返回line,但如果遇到了文件结尾或发生了错误,则返回 NULL.</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">fgets</span><span class="params">(<span class="keyword">char</span> *line, <span class="keyword">int</span> maxline, FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure><p>　　同printf与fprintf,scanf与pscanf一样,对于标准输入输出也有一对类似的函数fget与fput.<br>　　puts函数在写入字符串时会在结尾添加一个换行符;而gets函数在读取字符串时会自动删除结尾的换行符(‘\n’).</p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p>　　在C标准库中提供了很多常用的函数.</p><h3 id="字符串操作相关"><a href="#字符串操作相关" class="headerlink" title="字符串操作相关"></a>字符串操作相关</h3><p>　　与字符串操作相关的函数主要定义在&lt;string.h&gt;头文件中,下面是介绍.</p><table><thead><tr><th>函数声明</th><th>作用</th><th>返回值</th></tr></thead><tbody><tr><td>char <em>strcat(char </em>dest, const char *src)</td><td>将src指向的字符串复制到dest指向的字符串的末尾</td><td>指向最终的目标字符串dest的指针</td></tr><tr><td>char <em>strncat(char </em>dest, const char *src, size_t n)</td><td>把src所指向的字符串追加到dest所指向的字符串的结尾,直到n字符长度为止</td><td>指向最终的目标字符串dest的指针</td></tr><tr><td>int strcmp(const char <em>str1, const char </em>str2)</td><td>把str1所指向的字符串和str2所指向的字符串进行比较(按照每一位的ascii比较)</td><td>标志大小的int值,大于(正),小于(负),等于(0)</td></tr><tr><td>int strncmp(const char <em>str1, const char </em>str2, size_t n)</td><td>把str1和str2进行比较,最多比较前n个字节</td><td>同上</td></tr><tr><td>char <em>strcpy(char </em>dest, const char *src)</td><td>把src所指向的字符串复制到dest</td><td>指向最终的目标字符串dest的指针</td></tr><tr><td>char <em>strncpy(char </em>dest, const char *src, size_t n)</td><td>把src所指向的字符串复制到dest,最多复制n个字符,src长度小于n时,使用NULL填充</td><td>指向最终的目标字符串dest的指针</td></tr><tr><td>size_t strlen(const char *str)</td><td>计算字符串str的长度,直到空结束字符,但不包括空结束字符</td><td>长度</td></tr><tr><td>char <em>strchr(const char </em>str, int c)</td><td>在参数str所指向的字符串中搜索第一次出现字符c(一个无符号字符)的位置</td><td>指向第一次出现位置的指针,未找到则返回NULL</td></tr><tr><td>char <em>strrchr(const char </em>str, int c)</td><td>在参数str所指向的字符串中搜索最后一次出现字符c(一个无符号字符)的位置</td><td>指向最后出现位置的指针,未找到则返回NULL</td></tr></tbody></table><h3 id="字符串类别测试与转化函数"><a href="#字符串类别测试与转化函数" class="headerlink" title="字符串类别测试与转化函数"></a>字符串类别测试与转化函数</h3><p>　　头文件&lt;ctype.h&gt;中定义了一些用于字符测试和转换的函数.下面是介绍.</p><table><thead><tr><th>函数签名</th><th>含义</th><th>返回值</th></tr></thead><tbody><tr><td>int isalpha(int c)</td><td>判断c是否是字符</td><td>若c是字符,返回一个非零值,否则返回0</td></tr><tr><td>int isupper(int c)</td><td>判断c是否是大写字符</td><td>若c是大写字符,返回一个非零值,否则返回0</td></tr><tr><td>int islower(int c)</td><td>判断c是否是小写字符</td><td>若c是小写字符,返回一个非零值,否则返回0</td></tr><tr><td>int isdigit(int c)</td><td>判断c是否是数字字符</td><td>若c是数字字符,返回一个非零值,否则返回0</td></tr><tr><td>int isalnum(int c)</td><td>判断c是否是字母/数字</td><td>若c是字母/数字,返回一个非零值,否则返回0</td></tr><tr><td>int isspace(int c)</td><td>判断c是否是空白字符(空格、横向制表符、换行符、回车符，换页符或纵向制表符)</td></tr><tr><td>int toupper(int c)</td><td>将c转化成大写字母</td><td>如果c有相对应的大写字母,则该函数返回c的大写字母.否则返回c本身</td></tr><tr><td>int tolower(int c)</td><td>将c转化成小写字母</td><td>如果c有相对应的小写字母,则该函数返回c的小写字母.否则返回c本身</td></tr></tbody></table><h3 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h3><p>　　函数system(char* s)执行包含在字符申s中的命令,然后继续执行当前程序.<br>　　system函数返回一个整型的状态值,其值来自于执行的命令,并同具体系统有关.</p><h3 id="存储管理函数"><a href="#存储管理函数" class="headerlink" title="存储管理函数"></a>存储管理函数</h3><p>　　函数malloc和calloc用于动态地分配存储块.介绍如下.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// malloc的函数签名</span></span><br><span class="line"><span class="comment">// 当分配成功时,它返回一个指针,设指针指向n字节长度的未初始化的存储空间,否则返回NULL.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> NumBytes)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// calloc的函数签名</span></span><br><span class="line"><span class="comment">// 当分配成功时,它返回一个指针,该指针指向的空闲空间足以容纳由n个指定长度的对象组成的数组,否则返回NULL.该存储空间被初始化为0.</span></span><br><span class="line"><span class="comment">// numElements: 对象个数, sizeOfElement: 每个对象的大小</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">calloc</span><span class="params">(<span class="keyword">size_t</span> numElements,<span class="keyword">size_t</span> sizeOfElement)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放p指向的存储空间.其中,p是此前通过调用malloc或calloc函数得到的指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *FirstByte)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p>　　头文件&lt;math.h&gt;中声明了20多个数学函数,感觉用到的时候查就可以了…</p><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><p>　　函数rand()生成介于0和RAND_MAX之间的伪随机整数序列(RAND_MAX是在头文件&lt;stdlib.h&gt;中定义的符号常量).<br>　　函数srand(unsigned)设置rand函数生成的序列的种子.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成0-1之间的随机数的宏定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> frand() ((double) rand() / (RAND_MAX+1.0))</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习之路 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言复习笔记(4)</title>
      <link href="/2018/03/29-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(4).html"/>
      <url>/2018/03/29-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(4).html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　以下记录了第六章的一些知识点.</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h3 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h3><p>　　结构是一个或多个变量的集合,这些变量可能为不同的类型.也就是说:为了处理的方便而将这些变量组织在一个名字之下,这个名字被称作结构.<a id="more"></a></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>　　关键字 struct 引入结构声明.结构声明由包含在花括号内的一系列声明组成.<br>　　struct后面的名字是可选的,称为结构标记.结构标记用于为结构命名,在定义之后,结构标记就代表花括号内的声明,可以用它作为该声明的简写形式.<br>　　结构中定义的变量称为成员.<br>　　结构成员、结构标记和普通变量(即非成员)可以采用相同的名字,它们之间不会冲突.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构的声明</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span>     <span class="comment">// struct是关键字.point被称作结构标记</span></span><br><span class="line">    <span class="keyword">int</span> x;         <span class="comment">// x,y,point 被称为成员</span></span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> point;     <span class="comment">// 通过分析上下文,可以很明显的分辨出两个point代表的含义</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>　　struct声明定义了一种数据类型.在标志结构成员表结束的右花括号之后可以跟一个变量表,这与其它基本类型的变量声明方式是相同的.<br>　　如果结构声明的后面不带变量表,则不需要为它分配存储空间,它仅仅描述了一个结构的模板或轮廓.<br>　　如果结构声明中带有标记,那么在以后定义结构实例时也可以使用该标记定义.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构实例的声明</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">int</span> x; &#125; x, y, z; <span class="comment">// 直接跟变量表声明结构实例</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">pt</span>;</span>           <span class="comment">// 通过标记定义声明结构实例</span></span><br></pre></td></tr></table></figure><p>　　结构的初始化可以在定义的后面使用初值表进行.使用这种方式初始化时,初值表中同每个成员对应的初值必须是常量表达式.<br>　　自动结构也可以通过赋值初始化,还可以通过调用返回相应类型结构的函数进行初始化.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构实例的初始化</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> point;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct point <span class="title">get_point</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">pt</span> = &#123;</span><span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> pt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">p1</span> = &#123;</span><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;     <span class="comment">// 使用初值表初始化</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">p2</span> = <span class="title">p1</span>;</span>            <span class="comment">// 赋值初始化</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">p3</span> = <span class="title">get_point</span>();</span>   <span class="comment">// 通过函数返回值初始化</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">p4</span>;</span>                 <span class="comment">// 自动初始化.此时: p4.x == p4.y == p4.point == 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　在表达式中，可以通过 结构名.成员 这样的形式来引用某个特定结构中的成员.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> point;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">p</span> = &#123;</span><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d "</span>, p.x, p.y, p.point);  <span class="comment">// 访问成员</span></span><br><span class="line">    p.x = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d"</span>, p.x, p.y, p.point);  <span class="comment">// 也可以为成员赋值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 很明显,输出是: 1 2 3 100 2 3</span></span><br></pre></td></tr></table></figure><p>　　结构可以嵌套,即:结构中可以包含结构(不能嵌套自身的结构体).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inner</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">outer</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">inner</span> <span class="title">y</span>;</span>   <span class="comment">// 结构体的嵌套</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">outer</span> <span class="title">o</span> = &#123;</span>&#123;<span class="number">1</span>&#125;, <span class="number">2</span>&#125;;   <span class="comment">// 嵌套型结构体的初始化</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, o.y.x, o.x); <span class="comment">// 很明显,输出为 1 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>　　结构仅支持如下操作:<br>　　1.作为一个整体复制和赋值(包括向函数传递参数以及从函数返回值);<br>　　2.通过&amp;运算符取地址;<br>　　3.通过”.”操作符访问成员.  </p><p>　　结构之间不允许比较.</p><h2 id="指向结构的指针"><a href="#指向结构的指针" class="headerlink" title="指向结构的指针"></a>指向结构的指针</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span>                <span class="comment">// 声明一个结构</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> *<span class="title">p</span>;</span>             <span class="comment">// 声明一个指向point结构类型的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">tmp</span> = &#123;</span><span class="number">1</span>, <span class="number">2</span>&#125;;   <span class="comment">// 定义一个point结构类型的变量</span></span><br><span class="line">p = &amp;tmp;                    <span class="comment">// 通过取地址符&amp;使p指向tmp变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> y = (*p).x + <span class="number">1</span>;          <span class="comment">// 通过指针操作结构成员的写法(注意: 结构成员运算符“.”的优先级比“*”的优先级高,因此括号必须存在)</span></span><br><span class="line">                             <span class="comment">// 此时y的值为2</span></span><br><span class="line">y = p-&gt;x + <span class="number">1</span>;                <span class="comment">// 通过指针操作结构成员的简写方法.</span></span><br><span class="line">                             <span class="comment">// 此时y的值为3</span></span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>　　由于”.”(用于结构体),”-&gt;”(用于结构体),”[]”(用于下标),”()”(用于函数调用)的操作符优先级是最高的,因此在不熟悉时可能对语句的结果判断失误,因此,最好使用括号来显式定义操作顺序.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优先级的示例</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> *s;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> z = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">tmp</span> = &#123;</span>&amp;z&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> *<span class="title">p</span> = &amp;<span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r = *p++-&gt;s; <span class="comment">// 这个语句的含义是: 先读取p指向的结构体中的str指针所指向的值对象(即z)的值,然后再将p加1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, r);  <span class="comment">// 此时的r的值为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　结构体中可以嵌套指针(包括指向自身类型的指针).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体中嵌套自身类型的指针示例</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">office</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> chair;</span><br><span class="line">    <span class="keyword">int</span> computer;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">office</span> *<span class="title">o</span>;</span>                 <span class="comment">// 结构体中嵌套指向本类型的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">office</span> <span class="title">o1</span> = &#123;</span><span class="number">10</span>, <span class="number">10</span>, <span class="literal">NULL</span>&#125;;    <span class="comment">// 使用空指针进行初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">office</span> <span class="title">o2</span> = &#123;</span><span class="number">10</span>, <span class="number">10</span>, &amp;o1&#125;;     <span class="comment">// 使用正常的指向某个结构实例的指针进行初始化</span></span><br></pre></td></tr></table></figure><h2 id="结构数组"><a href="#结构数组" class="headerlink" title="结构数组"></a>结构数组</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量数组的声明与初始化(以下两种声明方式是等价的)</span></span><br><span class="line"><span class="comment">// 先声明结构体,再声明结构体数组</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">p_array</span>[2];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明结构体的同时声明数组</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125; p_array[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体数组的初始化</span></span><br><span class="line"><span class="comment">// 精确的做法,将每一行(即每个结构)的初值都括在花括号内进行初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">p_array</span>[2] = &#123;</span></span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单做法,在定义的后面通过一个用圆括号括起来的初值表进行初始化</span></span><br><span class="line"><span class="comment">// 即: 如果初值是简单变量或字符串,并且其中的任何值都不为空,则内层的花括号可以省略</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">p_array</span>[2] = &#123;</span></span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同普通数组一样,如果初值存在并且方括号[ ]中没有数值,编译程序将自动计算数组 p_array 中的项数.</span></span><br></pre></td></tr></table></figure><h3 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h3><p>　　C语言提供了一个编译时(compile-time)一元运算符sizeof,可用来计算任一对象的长度.<br>　　表达式 sizeof 对象 以及 sizeof(类型名) 将返回一个整型值(严格地说,返回值是无符号整型值,其类型为 size_t),它等于指定对象或类型占用的存储空间字节数.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sizeof的用法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"exec"</span>);   <span class="comment">// 这里并不会被执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">special</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">char</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">p</span> = &#123;</span><span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">special</span> <span class="title">sp</span> = &#123;</span><span class="number">1</span>, <span class="string">'x'</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> *<span class="title">p_p</span> = &amp;<span class="title">p</span>;</span></span><br><span class="line">    <span class="keyword">int</span> tmp_array[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld"</span>, <span class="keyword">sizeof</span> tmp_array);  <span class="comment">// 当sizeof的对象是数组时,返回数组总大小.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld"</span>, <span class="keyword">sizeof</span> p_p);        <span class="comment">// 当对象是指针时,返回指针本身的大小,而不是指示内存空间的大小.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld"</span>, <span class="keyword">sizeof</span> p);          <span class="comment">// 一般而言,结构体的大小为所有元素的大小之和.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld"</span>, <span class="keyword">sizeof</span>(sp));        <span class="comment">// 然而,由于需要对齐,因此实际长度可能会有变化.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld"</span>, <span class="keyword">sizeof</span>(<span class="number">1</span>+<span class="number">1</span>));       <span class="comment">// 对象是表达式时,求的大小是表达式返回值的类型大小,但并不计算表达式的值.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld"</span>, <span class="keyword">sizeof</span>(test()));    <span class="comment">// 如果对象是函数,则返回函数返回值类型大小,不实际执行,因此函数中的输出并不会出现.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld"</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));       <span class="comment">// 作用于类型时,返回该类型所占空间大小.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld"</span>, <span class="keyword">sizeof</span>(<span class="string">"123"</span>));     <span class="comment">// 由于字符串结尾总有一个'\0',因此计算空间时会比实际长度大一.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 结果为: 12 8 8 8 4 4 4 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　不同的对象有不同的对齐要求,所以,结构中可能会出现未命名的“空穴“(hole).<br>　　通过使用sizeof可以很容易的算出数组中元素的个数.<br>　　条件编译语句 #if 中不能使用sizeof,因为预处理器不对类型名进行分析.但预处理器并不计算 #define 语句中的表达式,因此,在#define中使用sizeof是合法的.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用sizeof求数组元素个数的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tmp[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 数组的长度除以单个元素的长度</span></span><br><span class="line"><span class="keyword">int</span> length = <span class="keyword">sizeof</span>(tmp) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 数组的长度除以指定元素的长度</span></span><br><span class="line"><span class="keyword">int</span> length = <span class="keyword">sizeof</span>(tmp) / <span class="keyword">sizeof</span>(<span class="keyword">sizeof</span>(tmp[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个利用sizeof求数组长度的宏定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARR_LEN(x) (sizeof(x) / sizeof(x[0]))</span></span><br></pre></td></tr></table></figure><p>　　C语言提供了一个称为 typedef 的功能,它用来建立新的数据类型名.<br>　　从任何意义上讲,typedef 声明并没有创建一个新类型,它只是为 某个已存在的类型增加了一个新的名称而已.typedef声明也没有增加任何新的语义,即通过这种方式声明的变量与通过普通声明方式声明的变量具有完全相同的属性.<br>　　优点:1.可以使程序参数化,以提高程序的可移植性(如果typedef声明的数据类型同机器有关,那么当程序移植到其它机器上时,只需改变typedef类型定义就可以了);2.通过使用更恰当的名称为程序提供更好的说明性.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Length; <span class="comment">// 给int一个别名Length</span></span><br><span class="line">Length x = <span class="number">0</span>;       <span class="comment">// 相当于 int x = 0;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *word;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125; Treenode;         <span class="comment">// 复杂声明</span></span><br></pre></td></tr></table></figure><h2 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>　　联合(union)是可以(在不同时刻)保存不同类型和长度的对象的变量,由编译器负责跟踪对象的长度和对齐要求.<br>　　联合提供了一种方式,以在单块存储区中管理不同类型的数据,而不需要在程序中嵌入任何同机器有关的信息(通过使用联合,一个变量可以合法地保存多种数据类型中任何一种类型的对象).  </p><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用联合的场景示例: 假设一个常量可能是int,f1oat或字符指针.</span></span><br><span class="line"><span class="comment">// 若该常量的不同类型占据相同大小的存储空间,且保存在同一个地方的话,使用将最方便.通过将该常量定义为联合可以实现.</span></span><br><span class="line"><span class="keyword">union</span> u_demo &#123;</span><br><span class="line">    <span class="keyword">int</span> ival;</span><br><span class="line">    <span class="keyword">float</span> fval;</span><br><span class="line">    <span class="keyword">char</span> *sval;</span><br><span class="line">&#125; u;  <span class="comment">// 变量u必须足够大,以保存这3种类型中最大的一种,具体长度同具体的实现有关.</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>　　同结构类似,可以使用 联合名.成员 或 联合指针-&gt;成员 的方法来访问联合中的成员.<br>　　读取的类型必须是最近一次存入的类型.由程序员负责跟踪当前保存在联合中的类型,如果保存的类型与读取的类型不一致,其结果取决于具体的实现.<br>　　联合只能用其第一个成员类型的值进行初始化.<br>　　实际上,联合就是一个结构,它的所有成员相对于基地址的偏移量都为0.对联合允许的操作与对结构允许的操作相同:作为一个整体单元进行赋值、复制、取地址及访问其中一个成员.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义宏来标识当前union变量的类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INT 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CAHR 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义union类型</span></span><br><span class="line"><span class="keyword">union</span> u_d&#123;</span><br><span class="line">    <span class="keyword">char</span> y;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过校验当前union变量的类型来进行针对性处理(这里是输出)</span></span><br><span class="line"><span class="comment">// 以下两个带注释行的用法是不规范的,很可能得不到预期的结果</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_u_demo</span><span class="params">(<span class="keyword">union</span> u_d u, <span class="keyword">int</span> u_type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u_type == INT)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, u.x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, u.y);      <span class="comment">// 这里会输出 u.x 对应的 ASCII 字符</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (u_type == CAHR)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, u.x);      <span class="comment">// 这里不能得到有意义的输出</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, u.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"bad type %d in utype\n"</span>, u_type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u_type = <span class="number">0</span>;       <span class="comment">// 用变量来记录结构成员当前的类型</span></span><br><span class="line">    <span class="keyword">union</span> u_d u = &#123;<span class="string">'A'</span>&#125;;  <span class="comment">// 使用第一个成员类型来初始化</span></span><br><span class="line">    u_type = CAHR;</span><br><span class="line">    print_u_demo(u, u_type);</span><br><span class="line">    u.x = <span class="number">100</span>;</span><br><span class="line">    u_type = INT;</span><br><span class="line">    print_u_demo(u, u_type);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h3><p>　　union变量占用的内存等于最长的成员占用的内存.本质上只是对一段大内存的不同解读方式.如下图所示:<br><img src="https://i.loli.net/2018/11/18/5bf04276523cc.png" alt="union内存示例"></p><h2 id="位字段"><a href="#位字段" class="headerlink" title="位字段"></a>位字段</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　在存储空间很宝贵的情况下,有可能需要将多个对象保存在一个机器字中(机器字指计算机一次能处理数据的bit位数).<br>　　一种常用的方法:使用类似于编译器符号表的单个二进制位标志集合.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用一个char或int对象中的位标志集合来标识一个对象的属性的示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里使用int型变量来标识某标识符的特定信息的集合.</span></span><br><span class="line"><span class="keyword">int</span> flags;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个与相关位的位置对应的"屏蔽码"的集合,其中的每一个元素代表一种属性</span></span><br><span class="line"><span class="comment">// 这些数字必须是2的幂.这样,访问这些位就变成了用移位运算、屏蔽运算及补码运算进行简单的位操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用宏定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYWORD 01</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXTRENAL 02</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STATIC 04</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用枚举定义</span></span><br><span class="line"><span class="keyword">enum</span> &#123; KEYWORD = <span class="number">01</span>, EXTERNAL = <span class="number">02</span>, STATIC = <span class="number">04</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为该标识符的属性设值</span></span><br><span class="line">flags |= EXTERNAL | STATIC;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断该标识符是否有特定属性</span></span><br><span class="line"><span class="keyword">if</span> ((flags &amp; (EXTERNAL | STATIC)) == <span class="number">0</span>)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C语言语法层面的支持"><a href="#C语言语法层面的支持" class="headerlink" title="C语言语法层面的支持"></a>C语言语法层面的支持</h3><p>　　这种做法的本质是利用一位来存储一种信息,但是每种信息只能有简单的 是/否 概念.这样就在很大限度上减少了内存使用,并且判断效率也很高.至于使用什么方法来实现这种思路就无关紧要了.<br>　　也许是C语言中类似的做法很多.因此,它在语法层面为这种操作提供了支持.即:位字段(位域).<br>　　位字段允许我们定义一个由位组成的段,并可为它赋以一个名字.通过这种方式可以更高效的利用内存.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位字段的声明</span></span><br><span class="line"><span class="comment">// 位字段只能定义为 int, signed int, unsigned int中的一种</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> is_keyword : <span class="number">1</span>;   <span class="comment">// 冒号“:”后的数字为该位字段所占的bit位数</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> : <span class="number">1</span>;              <span class="comment">// 可以使用无名字段来占位,仅起填充作用,该字段所在的位不能被使用</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> : <span class="number">0</span>;              <span class="comment">// 0字段,不实际占用位,仅起标记作用(下一个位字段在下一个字边界开始).</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> is_static : <span class="number">1</span>;</span><br><span class="line">&#125; flags;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位字段的访问</span></span><br><span class="line"><span class="comment">// 位字段没有独立的地址,不能进行取址操作</span></span><br><span class="line"><span class="comment">// 位字段没有独立的存储空间,不能进行sizeof()操作</span></span><br><span class="line">flags.is_keyword</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内存分配</span></span><br><span class="line"><span class="comment">// 规则: 1.位字段按声明顺序在机器字内存储; </span></span><br><span class="line"><span class="comment">//      2.位字段不能跨越机器字存储,上一个机器字空间不足时,该位字段将全部存到下一个机器字</span></span><br><span class="line"><span class="comment">// 假设当前机器是32位</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a  :<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> b  : <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> c  : <span class="number">2</span>;</span><br><span class="line">&#125;demo;       <span class="comment">// 20+6+2 &lt; 32, 故可在1个机器字内存储</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> d  :<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> e  :<span class="number">6</span>;   <span class="comment">// 32 -（20+6）= 6, 该机器字剩余6bit</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> f  :<span class="number">20</span>;  <span class="comment">// 6bit不够存储f,则f将在下一个机器字边界开始存储</span></span><br><span class="line">&#125;flagscopy;  <span class="comment">//整体来看, 20+6+20&gt;32 故需在2个机器字内存储</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> g : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>   : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> h : <span class="number">1</span>;   <span class="comment">// 由于前面是一个0字段标记,因此h将在下一个机器字边界开始存储</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- union_in_c.png -->]]></content>
      
      
      
        <tags>
            
            <tag> 学习之路 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言复习笔记(3)</title>
      <link href="/2018/03/21-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(3).html"/>
      <url>/2018/03/21-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(3).html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　以下记录了第五章的一些知识点.</p><h2 id="指针概念"><a href="#指针概念" class="headerlink" title="指针概念"></a>指针概念</h2><h3 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h3><p>　　一般来说,内存可以看作是一系列连续编号或编址的存储单元,我们将不可再分的最小单位定义为位(bit,一个位大小的内存中只能存储0/1两种状态之一).我们可以将一些信息转化为二进制(0/1的序列)进行存储,这就是编码.<a id="more"></a><br>　　在第一个较通用的编码表ASCII编码诞生后,我们将其中能存储一个英文字符的空间称为一字节(Byte),其中,1Byte=8bit.<br>　　而一般把存储器中的一个字节(Byte)称为一个内存单元.如果我们将这些存储单元看作有序的(例如,按照物理顺序排序),那么就可以用某个值表示每一个内存单元的地址,又由于字节大小是固定的,因此我们可以通过记录某字节在这个字节序列中的位置来计算位置,也就是说,这个位置信息可以等价为内存单元的地址.<br>　　我们将某个内存单元A的地址(也就是位置信息)也存储到内存单元B(也可能是一组内存单元)之后,就可以通过取出B单元的信息来计算出A的地址,从而间接的取出A的信息.其中,B中的值被称为A的地址,B被称为指针.<br>　　也就是:指针是能够存放一个地址的一组存储单元.</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>　　1.ANSI C使用类型void <em>(指向 void的指针)代替在原来使用char </em>作为通用指针的类型. 也就是说:任何类型的指针都可以转换为 oid <em>类型，并且在将它转换回原来的类型时不会丢失信息;<br>　　2.在C语言中,通过一元运算符&amp;来取某变量的地址.又由以上推导可得:地址运算符&amp;只能应用于内存中的对象,即变量与数组元素.它不能作用于表达式,常量或register类型的变量;<br>　　3.一元运算符</em>是间接寻址或间接引用运算符.当它作用于指针时,将访问指针所指向的对象;<br>　　4.为了安全,指针只能指向某种特定类型的对象.也就是说,每个指针都必须指向某种特定的数据类型;<br>　　5.由于指针也是变量,所以在程序中可以直接使用,而不必通过间接引用的方法使用;<br>　　6.对指针有意义的初始化值只能是空(NULL/0)或者是表示地址的表达式(表达式所代表的地址必须是在此前已定义的具有适当类型的数据的地址).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> *y = &amp;x, *z; <span class="comment">// 定义一个指向变量x的内存地址的指针y</span></span><br><span class="line"><span class="keyword">void</span> *p = &amp;x;    <span class="comment">// void* 类型的变量可以作为通用指针</span></span><br><span class="line">z = y;           <span class="comment">// 指针可以直接使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *t = <span class="literal">NULL</span>; <span class="comment">// 指针定义时,可以指向NULL/0.此时,它被称为 空指针.</span></span><br><span class="line"><span class="keyword">int</span> *u = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针数组初始化</span></span><br><span class="line"><span class="comment">// name数组中的每个元素都是一个指针,它指向某一个字符串常量(该常量存在于内存中的某个位置).</span></span><br><span class="line"><span class="keyword">char</span> *name[] = &#123;</span><br><span class="line">    <span class="string">"January"</span>, <span class="string">"February"</span>, <span class="string">"March"</span>, <span class="string">"April"</span>, <span class="string">"May"</span>, <span class="string">"June"</span>, <span class="string">"July"</span>, <span class="string">"August"</span>, <span class="string">"September"</span>, <span class="string">"October"</span>, <span class="string">"November"</span>, <span class="string">"December"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="指针与函数参数"><a href="#指针与函数参数" class="headerlink" title="指针与函数参数"></a>指针与函数参数</h3><p>　　将指针作为参数的优点:<br>　　1. 指针参数使得被调用函数能够访问和修改主调函数中对象的值;<br>　　2. 在函数需要返回多种不同含义的值时,可以利用指针参数进行接收.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当is_valid函数返回1时,输出为:swap success,当is_valid函数返回0时,输出为swap fail.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_valid</span><span class="params">(<span class="keyword">int</span> *x)</span></span>&#123; <span class="comment">// 这里虚构is_valid函数进行参数检查,它的返回值表示参数是否合法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>&#123;  <span class="comment">//这里的swap函数实现了如下功能:1.修改交换传递的参数的值;2.通过返回值标识了交换是否成功</span></span><br><span class="line">    <span class="keyword">if</span> (!(is_valid(x) &amp;&amp; is_valid(y)))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> temp = *x;;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = temp;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (swap(&amp;x, &amp;y))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"swap success"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"swap fail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h3><p>　　通过查询维基百科可以得到:数组(Array)是由相同类型的元素(element)的集合所组成的资料结构,分配一块连续的内存来存储.很容易联想到:若数组A中存在多个元素,那么其中某个元素b的地址可以在首元素地址的基础上,通过位移(指针运算)来得到.而根据定义,数组类型的变量或表达式的值即是该数组第0个元素的地址.因此有:<br><img src="https://i.loli.net/2018/11/18/5bf0424e874f5.png" alt="指针与数组的关系"><br>　　A[i]与*(A+i)是等价的,即通过数组和下标实现的表达式可等价地通过指针和偏移量实现.且若确信相应的元素存在,也可以通过下标访问数组第一个元素之前的元素(即i可以为负数).<br>　　指针是一个变量,而数组名并不是变量(它是常指针).因此可以为指向数组的指针重新赋值,而不可以更改数组名所指向的地址(即不能更改A的值).  </p><p>　　一般来说,用指针编写的程序比用数组下标编写的程序执行速度快,但另一方面,用指针实现的程序理解起来稍微困难一些.<br>　　当把数组名传递给一个函数时,实际上传递的是该数组第一个元索的地址.由于在被调用函数中,该参数是一个局部变量,因此,数组名参数必须是一个指针,也就是一个存储地址值的变量.  </p><p>　　C语言规范保证,0永远不是有效的数据地址.因此,可以返回地址0来表示发生了异常事件.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">test</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;x; <span class="comment">// 正常情况</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 用0来表示异常情况</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符指针与函数"><a href="#字符指针与函数" class="headerlink" title="字符指针与函数"></a>字符指针与函数</h3><p>　　字符串常量是一个数组(字符数组),因此字符串常量可通过一个指向其第一个元素的指针访问.<br>　　将字符串常量作为参数时,实际是传递了字符指针,函数中是通过使用这个指针来访问字符串常量.C语言没有提供将整个字符串作为一个整体进行处理的运算符.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> amessage[] = <span class="string">"now is the time"</span>;  <span class="comment">// 定义一个数组</span></span><br><span class="line"><span class="comment">// amessage 是一个仅仅足以存放初始化字符串以及空字符'\0'的一维数组.其中作为数组名的amessage是一个常指针,它始终指向该内存区域.然而,数组中的单个字符可以进行修改.</span></span><br><span class="line"><span class="keyword">char</span> *pmessage = <span class="string">"now is the time"</span>;   <span class="comment">// 定义一个指针</span></span><br><span class="line"><span class="comment">// 在字符串的内部表示中,字符数组以空字符'\0'结尾.</span></span><br><span class="line"><span class="comment">// pmessage是一个指针,其初值指向一个字符串常量.它的值可以被修改(可以指向不同的位置).但这个字符串常量不能被改变(结果未定义).</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进栈和出栈的标准用法</span></span><br><span class="line">*p++=val;   <span class="comment">// 将val压入栈</span></span><br><span class="line">val=*--p;   <span class="comment">// 将栈顶元素弹出到val中</span></span><br></pre></td></tr></table></figure><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针数组的声明</span></span><br><span class="line"><span class="keyword">char</span> *lineptr[<span class="number">10</span>]; </span><br><span class="line"><span class="comment">// lineptr是一个具有10个元素的一维数组, 其中数组的每个元素都是一个指向字符类型对象的指针.</span></span><br><span class="line"><span class="comment">// 注意, lineptr是一个常指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针数组的初始化</span></span><br><span class="line"><span class="keyword">char</span> *name[] = &#123;</span><br><span class="line">    <span class="string">"Illegal month"</span>, <span class="string">"January"</span>, <span class="string">"February"</span>, <span class="string">"March"</span>, <span class="string">"April"</span>, <span class="string">"May"</span>, <span class="string">"June"</span>, <span class="string">"July"</span>,<span class="string">"August"</span>, <span class="string">"September"</span>, <span class="string">"October"</span>, <span class="string">"November"</span>, <span class="string">"December"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 说明: name数组的初始化通过一个字符串列表实现，列表中的每个字符串赋值给数组相应位置的元素. 第i个字符串的所有字符存储在存储器中的某个位置, 指向它的指针存储在name[i]中. 由于上述声明中没有指明name的长度, 因此, 编译器编译时将对初值个数进行统计, 并将结果填入数组的长度.</span></span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>　　在C语言中,二维数组实际上是一种特殊的一维数组,即:它的每个元素也是一个一维数组.<br>　　一般来说,除数组的第一维(下标)可以不指定大小外,其余各维都必须明确指定大小.初始化时,没有指定的元素会被默认初始化.<br>　　一般来说,二维数组在内存中也是按照一维数组的形式排列的.在C语言中,二维数组是按行排列的.<br>　　二维数组(多维数组)中每一个一维数组的长度是固定的,而指针数组的每一行长度(该指针指向的元素的大小/数组的长度)可以不同.<br>　　指针数组最频繁的用处是存放具有不同长度的字符串.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二维数组的声明与定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按行分段赋值</span></span><br><span class="line"><span class="keyword">int</span> daytab[<span class="number">2</span>][<span class="number">12</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;,</span><br><span class="line">    &#123;<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 上述声明的第一维大小的定义可以省略,即</span></span><br><span class="line"><span class="keyword">int</span> daytab[][<span class="number">12</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;,</span><br><span class="line">    &#123;<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按行连续赋值</span></span><br><span class="line"><span class="keyword">int</span> daytab[<span class="number">2</span>][<span class="number">12</span>] = &#123;</span><br><span class="line">    <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 同理</span></span><br><span class="line"><span class="keyword">int</span> daytab[][<span class="number">12</span>] = &#123;</span><br><span class="line">    <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问二维(多维)数组中某元素</span></span><br><span class="line"><span class="comment">// 实际是通过常规的矩阵下标计算公式 n×row+col(其中,n表示每一个一位数组的长度,row表示行下标,col表示列下标)计算得到元素 array[row][col]的位置</span></span><br><span class="line"><span class="keyword">int</span> tmp = daytab[<span class="number">0</span>][<span class="number">1</span>];   <span class="comment">// 此时,tmp的值为28</span></span><br></pre></td></tr></table></figure><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>　　在C语言中,函数本身不是变量.但我们可以定义指向函数的指针,这种指针被称作函数指针.<br>　　声明格式: 类型说明符 (*函数名)(参数), 示例如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数指针的声明 */</span></span><br><span class="line"> <span class="keyword">int</span> (* sort)(<span class="keyword">int</span>, <span class="keyword">int</span>);</span><br><span class="line"><span class="comment">// 这里的sort更恰当的说应该叫做函数指针的变量名.这个特殊的指针指向一个接收两个int型变量,并返回整型值的函数</span></span><br></pre></td></tr></table></figure><p>　　调用格式: (*func)(params…) /  func(params…)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数指针的赋值与调用示例 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>; <span class="comment">// 声明一个函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_test</span><span class="params">(<span class="keyword">void</span> (* t)(<span class="keyword">void</span>))</span></span>&#123;  <span class="comment">// 参数声明为函数指针</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hahah "</span>);</span><br><span class="line">    t();                           <span class="comment">// 通过传入的函数指针对函数进行调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> (*tmp)();  <span class="comment">// 声明一个函数指针</span></span><br><span class="line">    tmp = test;     <span class="comment">// 初始化函数指针</span></span><br><span class="line">    tmp();          <span class="comment">// 调用方法一</span></span><br><span class="line">    (*tmp)();       <span class="comment">// 调用方法二</span></span><br><span class="line">    test_test(tmp); <span class="comment">// 将函数指针作为参数传递</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">1</span>;            <span class="comment">// 声明静态变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s%d "</span>, <span class="string">"test"</span>, x);  <span class="comment">// 通过打印静态变量来直观表示打印次数</span></span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出: test1 test2 hahah test3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针的运算"><a href="#指针的运算" class="headerlink" title="指针的运算"></a>指针的运算</h2><p>　　指针与整数之间不能相互转换.0是惟一的例外:常量0可以赋值给指针,指针也可以和常量0进行比较.程序中经常用符号常量NULL(定义在标准头文件&lt;stddef.h&gt;中)代替常量0.<br>　　指针的运算:<br>　　1.如果指针p和q指向同一个数组的成员,那么它们之间就可以进行类似于==、!=、&lt;、&gt;=的关系比较运算。这里实际比较的是它们的位置关系(数组下标的大小);<br>　　2.任何指针与0进行相等或不等的比较运算都有意义,用来校验当前指针是否是空指针;<br>　　3.如果p和q指向相同数组中的元素,且 p&lt;q ,那么 q-p+1 就是位于 p和q 指向的元索之间的元素的数目;<br>　　4.指针可以和整数进行相加或相减运算.例如: p为指针,则 p+n 表示指针p当前指向的对象之后第n个对象的地址.具体计算时,n将根据p指向的对象的长度按比例缩放,而p指向的对象的长度则取决于p的声明.<br>　　5.相同类型指针之间的赋值运算是合法的,void* 类型的指针与其它指针的赋值运算是合法的;<br>　　6.指针的算术运算中指向不同数组元素之间的运算没有定义,但是可以使用数组最后一个元素的下一个元素的地址(这个地址可以赋给指向数组元素的指针,但仅允许它进行赋值或比较运算,不能对保存这个地址的指针进行解引用或下标运算).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tmp[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *x = tmp + <span class="number">1</span>; <span class="comment">// x指向2</span></span><br><span class="line"><span class="keyword">int</span> *y = tmp + <span class="number">4</span>; <span class="comment">// y指向5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p = &amp;tmp[<span class="number">7</span>]; <span class="comment">// 数组tmp最后一个元素的下一个元素的地址</span></span><br><span class="line"><span class="keyword">int</span> z = p - y; <span class="comment">// 可以使用p进行运算,此时z的值为p与y下标的距离3</span></span><br><span class="line"></span><br><span class="line">z = x &lt; y; <span class="comment">// z的值为1</span></span><br><span class="line">z = x == <span class="number">0</span>; <span class="comment">// z的值为0</span></span><br><span class="line">z = x != <span class="number">0</span>; <span class="comment">// z的值为1</span></span><br><span class="line"></span><br><span class="line">x = y + <span class="number">1</span>; <span class="comment">// x现在指向y所指元素的后一个元素,即6</span></span><br><span class="line"></span><br><span class="line">y = z; <span class="comment">//赋值操作</span></span><br><span class="line"><span class="keyword">void</span>* p = y; <span class="comment">// 赋值操作</span></span><br></pre></td></tr></table></figure><h2 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h2><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>　　在支持C语言的环境中, 可以在程序开始执行时将命令行参数传递给程序.<br>　　C语言中的参数约定如下:<br>　　main函数的第一个参数argc的值表示运行程序时命令行中参数的数目; 第二个参数argv是一个指向字符串数组的指针，数组中的每个字符串对应一个参数.另外，ANSI标准要求argv[argc]的值必须为一个空指针.<br>　　图示如下:<br><img src="https://i.loli.net/2018/11/18/5bf04276523cc.png" alt="C语言中的命令行参数"></p><blockquote><p>扩展:<br>UNIX系统中的C语言程序有一个公共的约定:以负号开头的参数表示一个可选标志或参数.<br>例如: ls -l 这样的shell命令.<br>实现: 通过校验argv所指向的数组中的某个字符串是否以’-‘开头,再在这个基础上通过switch来得到其后跟随的字符,并进行特殊处理.</p></blockquote><!-- array_and_pointer.png, command_line_parameter.png -->]]></content>
      
      
      
        <tags>
            
            <tag> 学习之路 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言复习笔记(2)</title>
      <link href="/2018/02/04-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(2).html"/>
      <url>/2018/02/04-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(2).html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　以下记录了第三章及第四章的一些知识点.</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>　　在表达式之后加上一个分号(;),它们就变成了语句;  </p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语句</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br></pre></td></tr></table></figure><p>　　用一对花括号“{”与“}”把一组声明和语句括在一起就构成了一个复合语句(也叫作程序块), 复合语句在语法上等价于单条语句;  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复合语句</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　建议在有语句嵌套的情况下使用花括号来显式定义匹配关系;  </p><p>　　switch语句中, default分支是可选的,如果没有 default 分支也没有其它分支与表达式的值匹配,则该switch语句不执行任何动作。在switch 语句中,case的作用只是一个标号,而break/return语句才会使程序的执行立即从switch语句中退出;  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// switch语句</span></span><br><span class="line"><span class="comment">// 注: 中括号，表示此语句可以没有</span></span><br><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">　　 <span class="keyword">case</span> 常量表达式<span class="number">1</span>:</span><br><span class="line">        语句<span class="number">1</span>;         <span class="comment">// 可以是多条语句，可以加括号，也可以不加，到下一个case之前，都是本case的语句范围</span></span><br><span class="line">        [<span class="keyword">break</span>;]</span><br><span class="line">　　 <span class="keyword">case</span> 常量表达式<span class="number">2</span>:</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">        [<span class="keyword">break</span>;]</span><br><span class="line">    ....</span><br><span class="line">　　 <span class="keyword">case</span> 常量表达式n:</span><br><span class="line">        语句n;</span><br><span class="line">        [<span class="keyword">break</span>;]</span><br><span class="line">　　 [<span class="keyword">default</span>：]</span><br><span class="line">        语句n+<span class="number">1</span>;</span><br><span class="line">        [<span class="keyword">break</span>;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　break语句可用于从for、while与do-while等循环中提前退出,continue语句用于使for、while或do-while语句开始下一次循环的执行;  </p><p>　　goto语句可以与标号配合进行程序的任意跳转功能。标号的命名同变量命名的形式相同,标号的后面要紧跟一个冒号。标号可以位于对应的goto语句所在函数的任何语句的前面。标号的作用域是整个函数;  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// goto语句示例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">"Outer loop executing. i = %d\n"</span>, i );</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">" Inner loop executing. j = %d\n"</span>, j );</span><br><span class="line">            <span class="keyword">if</span> ( i == <span class="number">5</span> )</span><br><span class="line">                <span class="keyword">goto</span> stop; <span class="comment">// 进行跳转</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* This message does not print: */</span></span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">"Loop exited. i = %d\n"</span>, i );</span><br><span class="line">    stop: <span class="built_in">printf</span>( <span class="string">"Jumped to stop. i = %d\n"</span>, i ); <span class="comment">// 定义标号</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>　　在函数中可以通过return语句返回一个值,如果没有显式声明返回值类型,则返回值类型为int.此外,在任何情况下,如果函数没有成功地返回一个值,则它的“值”肯定是无用的;   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数返回值样例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func_demo</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"这条语句不会被执行."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未定义返回值的情况下,函数的值</span></span><br><span class="line">xx()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = xx();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, x); <span class="comment">// 结果是0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　函数的声明与定义必须一致.如果某函数与调用它的主函数放在同一源文件中,并且类型不一致,编译器就会检测到该错误。但是,如果被调用函数是单独编译的(这种可能性更大),这种不匹配的错误就无法检测出来，出现错误的几率会很大;<br>　　如果没有函数原型,则函数将在第一次出现的表达式中被隐式声明.如果先前没有声明过的一个名字出现在某个表达式中,并且其后紧跟一个左圆括号,那么上下文就会认为该名字是一个函数名字,该函数的返回值将被假定为int类型,且上下文并不对其参数作任何假设,即很可能会取到错误的返回值;  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型检查错误且函数解析错误的样例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// demo.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">xx</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"lalala"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo2.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = xx(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d   %s"</span>, x, <span class="string">"啦啦啦"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 以如下命令进行编译,会产生warning(而不是error)</span><br><span class="line">gcc demo.c demo2.c -o la</span><br><span class="line"><span class="meta">#</span> 以如下命令对二进制文件进行执行,控制台的输出为         4195868   啦啦啦</span><br><span class="line">./la</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>　　C语言程序可以看成由一系列的外部对象构成, 这些外部对象可能是变量或函数.由于函数内不允许定义函数,因此函数天生是外部对象.那么外部变量就可以认为是定义在所有函数之外的变量,同函数一样,全局共享一个实例.与此相对应,内部变量(自动变量)即为定义在函数内部的变量;  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>; <span class="comment">// 外部(全局)变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">1</span>; <span class="comment">// 内部(自动)变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, x + y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　构成C语言程序的函数与外部变量可以分开进行编译。一个程序可以存放在几个文件中,原先已编译过的函数可以从库中进行加载;<br>　　外部变量或函数的作用域从声明它的地方开始,到其所在的(待编译的)文件的末尾结束.如果要在外部变量的定义之前使用该变量,或者外部变量的定义与变量的使用不在同一个源文件中,则必须在相应的变量声明中强制性地使用关键字 extern;  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*外部变量定义与使用分离 及 内部变量默认初始化 的栗子*/</span></span><br><span class="line"><span class="comment">// demo.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo2.c</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 以如下命令进行编译,会产生warning(而不是error)</span><br><span class="line">gcc demo.c demo2.c -o la</span><br><span class="line"><span class="meta">#</span> 以如下命令对二进制文件进行执行,若有x有extern定义则控制台的输出为100,若没有则控制台输出为0</span><br><span class="line">./la</span><br></pre></td></tr></table></figure><p>　　变量声明用于说明变量的属性(主要是变量的类型),而变量定义除此以外还将引起存储器的分配.在一个源程序的所有源文件中,一个外部变量只能在某个文件中定义一次,而其它文件可以通过extern声明来访问它(定义外部变量的源文件中也可以包含对该外部变量的extern声明).外部变量的定义中必须指定数组的长度,但 extern 声明则不一定要指定数组的长度.外部变量的初始化只能出现在其定义中;  </p><p>　　当源文件个数很多时,变量/函数的定义位置并不是那么容易找到,很容易造成混乱.为了解决这个问题,可以将定义与实现分离,即使用头文件进行定义的集中管理,而将实现分散在各个文件中.通过这种机制,可以减少变化时错误的产生几率;  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上面的栗子,通过使用头文件来将共享的部分集中在一起之后变为如下形式,可以去除变量x的声明</span></span><br><span class="line"><span class="comment">很自然的...如果某个包含文件的内容发生了变化,那么所有依赖于该包含文件的源文件都必须重新编译</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在文件test.h中</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在文件 demo1.py 中</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　被static限定符声明的外部变量与函数的作用域被限定为被编译源文件的剩余部分,通过此修饰符可以实现隐藏外部对象的目的.而被static限定的内部变量则只能在该函数中使用但一直占据存储空间,且只在第一次进入程序块时被初始化一次;  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// static变量的栗子, 五次输出值均为14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = x + y;</span><br><span class="line">    y += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> times = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">while</span>(times-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, test(times));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　register声明告诉编译器,它所声明的变量在程序中使用频率较高,因此建议将此变量放入寄存器中以使程序更小、执行速度更快(编译器可以忽略此建议).register声明只适用于自动变量以及函数的形式参数.同时,无论寄存器变量实际上是不是存放在寄存器中,它的地址都是不能访问的;  </p><h2 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h2><p>　　1.在不进行显式初始化的情况下,外部变量和静态变量都将被初始化为 0,而自动变量和寄存器变量的初值则没有定义(即初值为无用的信息);<br>　　2.定义标量变量时,可以在变量名后紧跟一个等号和一个表达式来初始化变量;<br>　　3.对于外部变量与静态变量来说,初始化表达式必须是常量表达式,且只初始化一次(从概念上讲是在程序开始执行前进行初始化);<br>　　4.对于自动变量与寄存器变量,初始化表达式可以不是常量表达式:可以包含任意在此表达式之前已经定义的值,包括函数调用.且在每次进入函数或程序块时都会初始化;<br>　　5.对于数组.<br>　　　　(a)初始化表达式列表用花括号括起来,各初始化表达式之间通过逗号分隔.<br>　　　　(b)若初始化表达式元素个数比数组元素数少,则对外部变量、静态变量和自动变量来说,没有初始化表达式的元素将被初始化为0,如果初始化表达式的个数比数组元素数多,则会产生编译错误.<br>　　　　(c)不能一次将一个初始化表达式指定给多个数组元素,也不能跳过前面的数组元素而直接初始化后面的数组元素;<br>　　　　(d)对于字符数组.可以用一个字符串来代替用花括号括起来并用逗号分隔的初始化表达式序列.</p><h2 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h2><h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p>　　从概念上讲,预处理器是编译过程中单独执行的第一个步骤,大概有以下几种:</p><table><thead><tr><th>名称</th><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>文件包含预处理器</td><td>#include</td><td>将本行内容替换为path所指的文件的内容</td></tr><tr><td>宏替换预处理器</td><td>#define</td><td>将本文件中的 name(名字记号) 替换为 text(替换文本)</td></tr><tr><td>预处理器运算符</td><td>## (配合#define使用)</td><td>一种连接实际参数的手段</td></tr><tr><td>条件包含</td><td>#if,#elif,#else,#endif,#ifdef,#ifndef</td><td>一种控制编译结果的手段</td></tr></tbody></table><h3 id="文件包含预处理器"><a href="#文件包含预处理器" class="headerlink" title="文件包含预处理器"></a>文件包含预处理器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在系统目录查找</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先在用户目录查找</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br></pre></td></tr></table></figure><blockquote><p>(a)在源文件中,任何形如:#include “文件名”或#include &lt;文件名&gt; 的行都将被替换为由文件名指定的文件的内容.<br>(b)如果文件名用引号引起来,则在源文件所在位置查找该文件.如果在该位置没有找到文件,或者如果文件名是用尖括号&lt;&gt;括起来的,则将根据相应的规则(可能是环境变量)查找该文件.</p></blockquote><h3 id="宏替换预处理器"><a href="#宏替换预处理器" class="headerlink" title="宏替换预处理器"></a>宏替换预处理器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规版本</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XX 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的版本(格式匹配)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(A, B) ((A) &gt; (B) ? (A) : (B))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用#的版本</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dprint(expr) printf(#expr <span class="meta-string">" = %g\n"</span>, expr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用##的版本</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> paste(front, back) front ## back</span></span><br></pre></td></tr></table></figure><blockquote><p>(1)格式为#define 名字 替换文本 后续所有出现名字记号的地方都将被替换为替换文本;<br>(2)#define 指令定义的名字的作用域从其定义点开始,到被编译的源文件的末尾处结束;<br>(3)宏定义也可以带参数,这样可以对不同的宏调用使用不同的替换文本,最好使用括号指定层次关系;<br>(4)可以通过#undef 指令在本文件中释放被宏定义的名字;<br>(5)如果在替换文本中,参数名以#作为前缀则结果将被扩展为由实际参数替换该参数的带引号的字符串.即第三个示例的作用为:<br>　　将 dprint(x/y) 函数变为 printf(“x/y” “ = &amp;g\n”, x/y); 语句 亦即 printf(“x/y = &amp;g\n”, x/y);<br>(6)##为宏扩展提供了一种连接实际参数的手段.如果替换文本中的参数与##相邻,则该参数将被实际参数替换,##与前后的空白符将被删除,并对替换后的结果重新扫描.即##用来将两个宏参数连接为一个宏参数.以上第四个例子的作用:<br>　　将 paste(name, 1) 转化为 name1   (宏调用 paste(name, 1)的结果将建立记号 name1)<br>(7)一个长的#define语句可用反斜杠分成几行.</p></blockquote><h3 id="条件包含系列"><a href="#条件包含系列" class="headerlink" title="条件包含系列"></a>条件包含系列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据条件选择编译内容</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(X)</span></span><br><span class="line">    code</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> (X == 0)</span></span><br><span class="line">    code1</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> X == 1</span></span><br><span class="line">    code2</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    code3</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> X</span></span><br><span class="line">    code4</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> X</span></span><br><span class="line">    code5</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><blockquote><p>(1)通过这种机制可以修改要被编译的代码.<br>(2)#if 语句对其中的常量整型表达式(其中不能包含 sizeof、类型转换运算符或 enum 常量)进行求值,若该表达式的值不等于 0,则包含其后的各行,直到遇到#endif、#elif或#else语句为止.<br>(3)在条件包含预处理器中可以使用表达式 defined(名字),该表达式的值遵循规则如下:当名字已经定义时,其值为 1;否则,其值为 0.<br>(4)#ifdef与#ifndef是一种简写,用来测试某个名字是否已经定义并执行相应语句.<br>　　#ifdef的使用和#if defined()的用法一致<br>　　#ifndef又和#if !defined()的用法一致<br>(5)最后要使用#endif标识判断结束.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习之路 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言复习笔记(1)</title>
      <link href="/2018/01/24-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(1).html"/>
      <url>/2018/01/24-C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(1).html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　前段时间在看一本书叫做《Python源码剖析》,但是发现在很多分析具体实现的地方看不懂.尤其是struct和指针部分,因此决定重温一下C语言的语法.<br>　　C语言是我接触的第一门编程语言,刚开始学习时,什么都不懂,学校的课本也是写的乱七八糟,因此在网上搜了一下,找到了《C Primer Plus》这本书,然而当时学习是为了应付考试,因此只是学习到文件读写部分就没有继续了,现在想想甚为可惜…<br><a id="more"></a><br>　　由于有了一定的基础,因此本次复习选择的书是比较简洁的《The C Programing Language(中文版)》,在学习的过程中,会将一些个人认为比较重要的知识点记录下来供以后参考.<br>　　以下记录了第1-2章的一些知识点。</p><h3 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h3><ol><li>main是一个特殊的函数名——每个程序都以main函数为起点开始执行,这意味着每个程序都必须在某个位置包含一个main函数;  </li><li>在允许使用某种类型变量值的任何场合,都可以使用该类型的更复杂的表达式;  </li><li>赋值操作是一个表达式,并且具有一个值,即赋值后左边变量保存的值;<br>　　即:  (x = 1) == 1</li><li>在关系表达式或逻辑表达式中,如果关系为真,则表达式的结果值为数值 1; 如果为假,则结果值为数值 0;  </li><li>函数原型中的参数名是可选的,只需标明类型即可;<br>　　即:  形如 int test(int, int); 的函数声明是合法的</li><li>在 C 语言中,所有函数参数都是“通过值”传递的.在被调用的函数中,参数可以看作是快速初始化的局部变量;  </li><li>函数中的每个局部变量只在函数被调用时存在,在函数执行完毕退出时消失;   </li><li>外部变量声明方式:<br>　　(1) 定义在所有函数之外;<br>　　(2) 通过extern关键字定义.<br>　　注: a.外部变量只能定义一次;<br>　　   　  b.在源文件中,如果外部变量的定义出现在使用它的函数之前, 那么在那个函数中就没有必要使用extern声明(接上面的a,即a的本质),因此在通常的做法中,所有外部变量的定义都放在源文件的开始处,这样就可以省略extern声明;  </li><li>“定义”表示创建变量或分配存储单元,而“声明”指的是说明变量的性质,但并不分配存储单元。</li></ol><h3 id="摘抄"><a href="#摘抄" class="headerlink" title="摘抄"></a>摘抄</h3><ol><li>声明语句说明变量的名字及类型,同时也可以指定变量的初值。</li><li>运算符指定将要进行的操作。  </li><li>表达式把变量与常量组合起来生成新的值。  </li><li>对象的类型决定该对象可取值的集合以及可以对该对象执行的操作。  </li><li>变量命名规范: 变量名是由字母和数字组成的序列,但其第一个字符必须为字母.其中下划线“_”被看做是字母.一般变量用小写字母,常量用大写字母.</li></ol><h3 id="基本数据类型及限定符"><a href="#基本数据类型及限定符" class="headerlink" title="基本数据类型及限定符"></a>基本数据类型及限定符</h3><p>基本数据类型:</p><table><thead><tr><th>关键字</th><th>解释</th></tr></thead><tbody><tr><td>char</td><td>字符型,占用一个字节,可以存放本地字符集中的一个字符</td></tr><tr><td>int</td><td>整型,通常反映了所用机器中整数的最自然长度</td></tr><tr><td>float</td><td>单精度浮点型</td></tr><tr><td>double</td><td>双精度浮点型</td></tr></tbody></table><p>限定符:</p><table><thead><tr><th>关键字</th><th>解释</th></tr></thead><tbody><tr><td>short</td><td>用于限定整型 eg: short int x —&gt; short x</td></tr><tr><td>long</td><td>用于限定整型 eg: long int x —&gt; long x</td></tr><tr><td>signed/unsigned</td><td>用于限定整型,代表是否可以有负值</td></tr></tbody></table><p>关于类型所占用位数的规定:  </p><ol><li>short 与 int 类型至少为 16 位;</li><li>long 类型至少为 32 位;</li><li>short类型不得长于 int 类型,而 int 类型不得长于 long 类型;</li><li>long double 类型表示高精度的浮点数.</li></ol><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ol><li>字符常量<br>　　一个字符常量是一个整数,书写时将一个字符括在单引号中即可.如’x’字符在机器字符集中的数值就是该字符常量的值;</li><li>字符串常<br>　　从技术角度看,字符串常量就是字符数组.其中字符串的内部表示使用一个空字符’\0’作为串的结尾.因此存储字符串的物理存储单元数比括在双引号中的字符数多一个；</li><li>枚举常量<br>　　枚举是一个常量整型值的列表.在没有显式定义的情况下,enum 类型中第一个枚举名的值为 0,第二个为 1…, 如果指定了其中部分枚举名的值,那么未指定值的枚举名的值将依着最后一个指定值向后递增.<br>　　规定: 不同枚举中的名字必须互不相同。同一枚举中不同的名字可以具有相同的值.<br>　　意义: 枚举为建立常量值与名字之间的关联提供了一种便利的方式.</li><li>常量定义<br>　　常量可以通过const修饰符 或者 宏定义来实现.</li></ol><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><ol><li>声明表达式<br>　　在声明中,如果变量名的后面紧跟一个等号以及一个表达式,该表达式就充当对变量进行初始化的初始化表达式<br>　　例如: int x;   int x = 1;</li><li>变量的默认初始化<br>　　如果变量不是自动变量,则只能进行一次初始化操作,从概念上讲,应该是在程序开始执行之前进行,并且初始化表达式必须为常量表达式。<br>　　每次进入函数或程序块时,显式初始化的自动变量都将被初始化一次,其初始化表达式可以是任何表达式。默认情况下,外部变量与静态变量将被初始化为0。未经显式初始化的自动变量的值为未定义值(即无效值)</li><li>const限定符<br>　　任何变量的声明都可以使用 const限定符限定。此限定符指定变量的值不能被修改,对数组而言,const限定符指定数组所有元素的值都不能被修改.<br>　　const 限定符也可配合(数组)参数使用,它表明函数不能修改(数组元素)参数的值 例如: int strlen(const char[]) 与 int test(const int a)</li></ol><h3 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h3><table><thead><tr><th style="text-align:left">简单分类</th><th style="text-align:left">示例</th><th style="text-align:left">注意</th></tr></thead><tbody><tr><td style="text-align:left">二元运算符</td><td style="text-align:left">+, -, *, /, %, &amp;,</td><td style="text-align:left">/执行的是整除(即地板除法,只留整数)</td></tr><tr><td style="text-align:left">关系运算符</td><td style="text-align:left">&gt;, &gt;=, &lt;, &lt;=</td><td style="text-align:left">运算结果是 0/1</td></tr><tr><td style="text-align:left">相等性运算符</td><td style="text-align:left">==, !=</td><td style="text-align:left">运算结果是 0/1</td></tr><tr><td style="text-align:left">逻辑运算符</td><td style="text-align:left">&amp;&amp;, &#124;&#124;</td><td style="text-align:left">短路机制</td></tr><tr><td style="text-align:left">一元运算符</td><td style="text-align:left">!, ++, –</td><td style="text-align:left">++,–位置影响</td></tr><tr><td style="text-align:left">强制类型转换运算符</td><td style="text-align:left">()</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">位操作运算符</td><td style="text-align:left">&amp;, &#124;, ^, &lt;&lt;, &gt;&gt;, ~</td><td style="text-align:left">可以简单认为作用于二进制</td></tr><tr><td style="text-align:left">三元运算符</td><td style="text-align:left">: ?</td><td style="text-align:left">示例: z = (a&gt;b) ? a: b 等价于 if (a &gt; b){ z = a;} else {z = b;}</td></tr><tr><td style="text-align:left">赋值运算符</td><td style="text-align:left">op=</td><td style="text-align:left">某些赋值表达式的缩写</td></tr><tr><td style="text-align:left">逗号运算符</td><td style="text-align:left">,</td><td style="text-align:left">优先级最低</td></tr></tbody></table><p>补充  </p><blockquote><p>赋值表达式:<br>如果 expr1 和 expr2 是表达式,那么<br>赋值表达式 expr1 = (expr1) op (expr2)<br>等价于:<br>expr1 op= expr2<br>其中op可以为+,-,*,/,%,&lt;&lt;,&gt;&gt;,|,^,&amp; 之一.<br>则op=可以称为赋值运算符.<br>同赋值表达式一样, 赋值运算符的类型是它的左操作数的类型,其值是赋值操作完成后的值.<br>逗号运算符:<br>被逗号分隔的一对表达式将按照从左到右的顺序进行求值,语句的类型与值为表达式最右边的操作数的类型和值.<br>某些情况下的逗号并不是逗号运算符,比如分隔函数参数的逗号,分隔声明中变量的逗号等,这些逗号并不保证各表达式按从左至右的顺序求值.</p></blockquote><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>　　1. 自动转换是指把’比较窄的’操作数转换为’比较宽的’操作数,并且不丢失信息的转换.<br>　　场景:<br>　　(1)赋值表达式： 赋值运算符右边的值需要转换为左边变量的类型,左边变量的类型即赋值表达式结果的类型;<br>　　(2)二元运算: 如果二元运算符的两个操作数具有不同的类型,那么在进行运算之前先要把“较低”的类型提升为“较高”的类型,且运算的结果为较高的类型(long double &gt; double &gt; float &gt; long &gt; int &gt; (char/short))<br>　　注: char和short在参与运算时,会先转成int<br>　　(3)函数调用: 在没有函数原型的情况下,char 与 short 类型都将被转换为 int 类型,float 类型将被转换为double 类型<br>　　2. 强制(手动)类型转换:<br>　　格式: (类型名)表达式 [这里用到了强制转化运算符]<br>　　示例: long x = 0.123;<br>　　　　  int y = (int)x;　　# y == 0</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>　　1. C 语言没有指定同一运算符中多个操作数的计算顺序(&amp;&amp;、||、?: 和,运算符除外).<br>　　  即: x = f() + g(); 语句中,f()可以在 g()之前计算,也可以在 g()之后计算<br>　　2. C 语言没有指定函数各参数的求值顺序<br>　　  即: printf(“%d %d\n”, ++n, power(2, n)); 语句的结果取决于编译器的具体实现<br>　　3. ANSI C标准明确规定了所有对参数的副作用都必须在函数调用之前生效<br>　　4. 书中写到: 在任何一种编程语言中,如果代码的执行结果与求值顺序相关,则都是不好的程序设计风格. 本人对此持怀疑态度</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习之路 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>重启博客记</title>
      <link href="/2017/12/26-%E9%87%8D%E5%90%AF%E5%8D%9A%E5%AE%A2.html"/>
      <url>/2017/12/26-%E9%87%8D%E5%90%AF%E5%8D%9A%E5%AE%A2.html</url>
      
        <content type="html"><![CDATA[<p>　　我所在的公司为了保证迭代速度，因此在初期选用了功能强大的Django框架进行开发。因此目前公司后端所用到的技术大多是与Django能很好的合作的。Celery就是这样一个工具，可以使用它来进行一些异步处理。<br>　　为了能跟上公司技术进步的脚步，这段时间一直在看Celery与RabbitMQ的官方文档进行学习。然而，Flynnon的英语并不是很好….因此学习的很慢。<br><a id="more"></a><br>　　其实RabbitMQ还好，示例清楚明了，在跟着Tutorials走了一遍后，感觉对于它有什么作用，以及如何使用Python进行开发有了一定的了解。然而这一套在Celery这里就行不通了，看了很久都没弄懂它是怎么用的…<br>　　于是就通过百度搜索了一下Celery，在结果中看到了很多博主写的博客。虽然有很多纯粹是复制粘贴的，质量很差，但是也有不少质量很高的博客，使我茅塞顿开。<br>　　在这个过程中就萌生了写一些东西的想法，其实在16年的时候就搭建了博客(虽然处于半废弃状态…)，于是就想着把他捡起来，重新开始Flynnon的博客之旅。  </p><p>　　重建博客大约花费了四天，这段时间大约做了以下工作:<br>　　1. 建立博客。通过查看<a href="https://hexo.io/zh-cn/docs/">Hexo的官方文档</a>，重新构建了对Hexo的认知，并建立了新的博客，并对之前的博文进行了迁移操作;<br>　　2. 选择主题。这一步花费了很长时间，我之前使用的主题是vno，它很不错，但是既然是重新来过，就把主题也一起换了…，最后选择了NexT主题，感觉它看起来很简洁，并且用户很活跃;<br>　　3. 定制化。主要是通过查看<a href="http://theme-next.iissnan.com/getting-started.html">NexT的文档</a>对博客进行配置，也添加了很多很使用的功能(Google Analytics etc.)。在这里主要参考了<a href="http://ictar.github.io/">Ele的博客</a>，构图什么的都是从那里偷的….<br>　　4. 完善细节。这一步始终在进行….</p><p>希望我可以坚持下去，搭建一个不错的博客吧….</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java控制访问权限的方法</title>
      <link href="/2017/02/27-%E4%BB%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%90%E4%B8%80%E4%BD%8D%E7%BD%AE%E4%B8%BA%E7%95%8C%EF%BC%8C%E4%BA%A4%E6%8D%A2%E5%85%B6%E4%B9%8B%E5%89%8D%E4%B8%8E%E4%B9%8B%E5%90%8E%E7%9A%84%E9%83%A8%E5%88%86(Java%E5%AE%9E%E7%8E%B0).html"/>
      <url>/2017/02/27-%E4%BB%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%90%E4%B8%80%E4%BD%8D%E7%BD%AE%E4%B8%BA%E7%95%8C%EF%BC%8C%E4%BA%A4%E6%8D%A2%E5%85%B6%E4%B9%8B%E5%89%8D%E4%B8%8E%E4%B9%8B%E5%90%8E%E7%9A%84%E9%83%A8%E5%88%86(Java%E5%AE%9E%E7%8E%B0).html</url>
      
        <content type="html"><![CDATA[<p>　　最近在看面试题的时候发现，一些基础的算法都记不住了，只是能大概说出个原理….为了加深记忆，这里对一些简单的算法题进行一个归纳。</p><p>　　下面的代码主要解决的问题是：给定一个字符串str和一个整数i，i代表字符串中某一个元素的下标，将str[0..i-1]移到这个元素的右侧，将str[i+1..len(str)-1]移到这个元素的左侧。(要求：时间复杂度为Ｏ(N),空间复杂度为Ｏ(1)).<br><a id="more"></a><br>测试用例样例：<br>　　输入：”abcde”, 2<br>　　预期结果: decab</p><p>　　下面是Java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Flynnon on 17-2-27.</span></span><br><span class="line"><span class="comment"> * 问题：给定一个字符串str和一个整数i，i代表字符串中某一个元素的下标，将str[0..i-1]移到这个元素的右侧，将str[i+1..len(str)-1]移到这个元素的左侧。</span></span><br><span class="line"><span class="comment"> * 要求：时间复杂度为Ｏ(N),空间复杂度为Ｏ(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个数组以某一元素分界，将这个元素之前的部分与之后的部分互换位置</span></span><br><span class="line"><span class="comment">     * 主要思路:  将之前的部分与之后的部分分别逆序，再将整体逆序即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 要进行操作的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i   作为分界线的元素的下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>    转化之后生成的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">replaceBeginAndEnd</span><span class="params">(String str, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || i &lt; <span class="number">0</span> || str.length() &lt;= i) &#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        reverseCharArray(chars, <span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">        reverseCharArray(chars, i + <span class="number">1</span>, chars.length - <span class="number">1</span>);</span><br><span class="line">        reverseCharArray(chars, <span class="number">0</span>, chars.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来翻转一个数组的某一部分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charArray  要进行操作的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> begin      要翻转的部分第一个元素的下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end        要翻转的部分最后一个元素的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseCharArray</span><span class="params">(<span class="keyword">char</span>[] charArray, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> tmp;</span><br><span class="line">        <span class="keyword">while</span> (begin &lt; end) &#123;</span><br><span class="line">            tmp = charArray[begin];</span><br><span class="line">            charArray[begin] = charArray[end];</span><br><span class="line">            charArray[end] = tmp;</span><br><span class="line">            begin++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"abcde"</span>;</span><br><span class="line">        System.out.println(replaceBeginAndEnd(str, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是测试用例及结果，与预期结果一致。</p><p><img src="https://i.loli.net/2018/11/18/5bf040d2a9c19.png" alt="测试结果"></p><center><small><strong>由于本人水平有限，本文难免存在谬误，欢迎批评指正！</strong></small></center><!-- ReplaceBeginAndEnd_result_1.png -->]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>带行号遍历二叉树(Java实现)</title>
      <link href="/2017/02/27-%E5%B8%A6%E8%A1%8C%E5%8F%B7%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91(Java%E5%AE%9E%E7%8E%B0).html"/>
      <url>/2017/02/27-%E5%B8%A6%E8%A1%8C%E5%8F%B7%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91(Java%E5%AE%9E%E7%8E%B0).html</url>
      
        <content type="html"><![CDATA[<p>　　最近在看面试题的时候发现，一些基础的算法都记不住了，只是能大概说出个原理….为了加深记忆，这里对一些简单的算法题进行一个归纳。</p><p>　　下面的代码主要解决的问题是：给定一颗二叉树，要求输出它的层序遍历，并在每行开始时输出行号。<br><a id="more"></a><br>测试用例样例：<br>　　输入：节点值为1-7的满二叉树。<br>　　预期结果：<br>　　　　　　1 : 1<br>　　　　　　2 : 2  3<br>　　　　　　3 : 4  5  6  7  </p><p>　　下面是Java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Created by Flynnon on 17-2-26.</span></span><br><span class="line"><span class="comment">  对二叉树带行号的层序遍历的归纳</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义节点类</span></span><br><span class="line"><span class="comment"> * 为了简单就不定义getter/setter方法了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = v;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对二叉树进行操作的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintBinaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PrintBinaryTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"该工具类不应该被实例化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 层序遍历二叉树（每一行从左到右，整体上从上到下）</span></span><br><span class="line"><span class="comment">     * 主要思路：利用队列先进先出的性质保存顺序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 要遍历的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">levelTraversal</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Node&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            Node temp = q.poll();</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.print(temp.value + <span class="string">"  "</span>);</span><br><span class="line">                q.add(temp.left);</span><br><span class="line">                q.add(temp.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 层序遍历二叉树（每一行从左到右，整体上从上到下）,并附带行号</span></span><br><span class="line"><span class="comment">     * 主要思路：利用队列先进先出的性质保存顺序来层序遍历二叉树。</span></span><br><span class="line"><span class="comment">     * 使用curLineLast与nextLineLast两个节点标志来标识遍历过程中当前行结尾节点与下一行结尾节点，</span></span><br><span class="line"><span class="comment">     * 再使用一个lineNo整形量来记录当前行号（初始设为1），并在curLineLast节点更替时，更新lineNo的值并按格式打印即可。</span></span><br><span class="line"><span class="comment">     * 注：nextLineLast始终指向最新遍历到的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 要遍历的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">levelTraversalWithLineNo</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  加入断言，保证root不为null</span></span><br><span class="line">        <span class="keyword">assert</span> root != <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//  curLineLast : 当前行结尾节点</span></span><br><span class="line">        <span class="comment">//  nextLineLast : 下一行结尾节点</span></span><br><span class="line">        <span class="comment">//  刚开始时，curLineLast与nextLineLast均指向根节点</span></span><br><span class="line">        Node curLineLast = root, nextLineLast = root;</span><br><span class="line">        <span class="comment">//  设根节点所在的行为第1行</span></span><br><span class="line">        <span class="keyword">int</span> lineNo = <span class="number">1</span>;</span><br><span class="line">        System.out.print(lineNo + <span class="string">" : "</span>);</span><br><span class="line">        Queue&lt;Node&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            Node temp = q.poll();</span><br><span class="line">            <span class="comment">//  只有当前节点的子节点不为空时，nextLineLast才需要更改指向的目标</span></span><br><span class="line">            <span class="keyword">if</span> (temp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                q.add(temp.left);</span><br><span class="line">                nextLineLast = temp.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                q.add(temp.right);</span><br><span class="line">                nextLineLast = temp.right;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(temp.value + <span class="string">"  "</span>);</span><br><span class="line">            <span class="comment">// 当出栈节点为当前行尾节点时，说明该换行了</span></span><br><span class="line">            <span class="keyword">if</span> (curLineLast == temp) &#123;</span><br><span class="line">                <span class="comment">// 将当前行尾节点指向下一行尾节点</span></span><br><span class="line">                curLineLast = nextLineLast;</span><br><span class="line">                System.out.print(System.lineSeparator() + ++lineNo + <span class="string">" : "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以1 2 4 -1 -1 5 -1 -1 3 6 -1 -1 7 -1 -1为例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Node root = PrintBinaryTree.createTreeNode(sc);</span><br><span class="line">        sc.close();</span><br><span class="line">        System.out.print(<span class="string">"层序遍历:"</span>);</span><br><span class="line">        PrintBinaryTree.levelTraversal(root);</span><br><span class="line">        System.out.println(<span class="string">"带行号的层序遍历:"</span>);</span><br><span class="line">        PrintBinaryTree.levelTraversalWithLineNo(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是测试用例及结果，与预期结果一致（多出的一个行号先忽略了吧….）。</p><p>![测试结果][1]</p><p><center><small><strong>由于本人水平有限，本文难免存在谬误，欢迎批评指正！</strong></small><center><br><!-- levelTraversalWithLineNo_test_1.png --><br>  [1]: <a href="https://i.loli.net/2018/11/18/5bf04097a1abd.png">https://i.loli.net/2018/11/18/5bf04097a1abd.png</a></center></center></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>遍历二叉树并用二维数组保存(Java实现)</title>
      <link href="/2017/02/27-%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%B6%E4%BD%BF%E7%94%A8%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%BF%9D%E5%AD%98(Java%E5%AE%9E%E7%8E%B0).html"/>
      <url>/2017/02/27-%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%B6%E4%BD%BF%E7%94%A8%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%BF%9D%E5%AD%98(Java%E5%AE%9E%E7%8E%B0).html</url>
      
        <content type="html"><![CDATA[<p>　　最近在看面试题的时候发现，一些基础的算法都记不住了，只是能大概说出个原理….为了加深记忆，这里对一些简单的算法题进行一个归纳。</p><p>　　下面的代码主要解决的问题是：有一棵二叉树，请设计一个算法，按照层次打印这棵二叉树。<br>　　给定二叉树的根结点root，请返回打印结果，结果按照每一层一个数组进行储存，所有数组的顺序按照层数从上往下，且每一层的数组内元素按照从左往右排列。保证结点数小于等于500。<br><a id="more"></a></p><p>测试用例样例：<br>　　输入：节点值为1-7的满二叉树。<br>　　预期结果：<br>　　　　　　[1 ]<br>　　　　　　[2,3]<br>　　　　　　[4,5,6,7]  </p><p>　　下面是Java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Flynnon on 17-2-27.</span></span><br><span class="line"><span class="comment"> * 问题：有一棵二叉树，请设计一个算法，按照层次打印这棵二叉树。</span></span><br><span class="line"><span class="comment"> *      给定二叉树的根结点root，请返回打印结果，结果按照每一层一个数组进行储存，所有数组的顺序按照层数从上往下，且每一层的数组内元素按照从左往右排列.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义节点类</span></span><br><span class="line"><span class="comment">     * 为了简单就不定义getter/setter方法了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        Node left = <span class="keyword">null</span>;</span><br><span class="line">        Node right = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行转化的工具类</span></span><br><span class="line"><span class="comment">     * 主要思路：主要思路与带行号层序遍历二叉树类似，只是用可变长数组（List）来存储每一行的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 要遍历的二叉树的根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 此二叉树转化成的二维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] getTreeValueArray(Node root) &#123;</span><br><span class="line">        <span class="comment">// 保证这颗二叉树非空</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  curLineLast : 当前行结尾节点</span></span><br><span class="line">        <span class="comment">//  nextLineLast : 下一行结尾节点</span></span><br><span class="line">        <span class="comment">//  刚开始时，curLineLast与nextLineLast均指向根节点</span></span><br><span class="line">        Node curLineLast = root, nextLineLast = root;</span><br><span class="line">        Queue&lt;Node&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.add(root);</span><br><span class="line">        <span class="comment">//  外层</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//  内层</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            Node temp = q.poll();</span><br><span class="line">            <span class="comment">//  只有当前节点的子节点不为空时，nextLineLast才需要更改指向的目标</span></span><br><span class="line">            <span class="keyword">if</span> (temp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                q.add(temp.left);</span><br><span class="line">                nextLineLast = temp.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                q.add(temp.right);</span><br><span class="line">                nextLineLast = temp.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//  将当前节点（值）加入内层</span></span><br><span class="line">            list.add(temp.value);</span><br><span class="line">            <span class="comment">// 当出栈节点为当前行尾节点时，说明该换行了</span></span><br><span class="line">            <span class="keyword">if</span> (curLineLast == temp) &#123;</span><br><span class="line">                <span class="comment">//  换行时将内层加入到外层中</span></span><br><span class="line">                lists.add(list);</span><br><span class="line">                <span class="comment">//  新初始化一个内层</span></span><br><span class="line">                list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="comment">// 将当前行尾节点指向下一行尾节点</span></span><br><span class="line">                curLineLast = nextLineLast;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将得到的List转化为int[]</span></span><br><span class="line">        <span class="keyword">int</span>[][] ints = <span class="keyword">new</span> <span class="keyword">int</span>[lists.size()][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class="line">            Integer[] integerArray = lists.get(i).toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]);</span><br><span class="line">            ints[i] = <span class="keyword">new</span> <span class="keyword">int</span>[integerArray.length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;integerArray.length;j++)&#123;</span><br><span class="line">                ints[i][j] = integerArray[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ints;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序递归构造二叉树 root-&gt;left-&gt;right</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scanner 输入流，用于读取节点值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 构造完成的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">createTreeNode</span><span class="params">(Scanner scanner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> scanner != <span class="keyword">null</span>;</span><br><span class="line">        Node root = <span class="keyword">null</span>;                 <span class="comment">//声明当前根节点</span></span><br><span class="line">        <span class="keyword">int</span> data = scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (data &gt; <span class="number">0</span>) &#123;                             <span class="comment">//若当前节点存在（这里为了简单以负数为占位符）</span></span><br><span class="line">            root = <span class="keyword">new</span> Node(data);                  <span class="comment">//使用其它顺序构造二叉树，只需更改这三句即可</span></span><br><span class="line">            root.left = createTreeNode(scanner);</span><br><span class="line">            root.right = createTreeNode(scanner);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试类</span></span><br><span class="line"><span class="comment">     * 以1 2 4 -1 -1 5 -1 -1 3 6 -1 -1 7 -1 -1为例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Node root = Test.createTreeNode(sc);</span><br><span class="line">        sc.close();</span><br><span class="line">        <span class="keyword">int</span>[][] result = BinaryTreeUtil.getTreeValueArray(root);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] arr : result) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(arr));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是测试用例及结果，与预期结果一致。</p><p><img src="https://i.loli.net/2018/11/18/5bf04066690c1.png" alt="测试结果"></p><p><center><small><strong>由于本人水平有限，本文难免存在谬误，欢迎批评指正！</strong></small><center></center></center></p><!-- getTreeValueArray_result_1.png -->]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从m个各不相同的元素中取出n个并进行全排列(Java实现)</title>
      <link href="/2017/02/26-%E4%BB%8Em%E4%B8%AA%E5%90%84%E4%B8%8D%E7%9B%B8%E5%90%8C%E7%9A%84%E5%85%83%E7%B4%A0%E4%B8%AD%E5%8F%96%E5%87%BAn%E4%B8%AA%E5%B9%B6%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%8E%92%E5%88%97(Java%E5%AE%9E%E7%8E%B0).html"/>
      <url>/2017/02/26-%E4%BB%8Em%E4%B8%AA%E5%90%84%E4%B8%8D%E7%9B%B8%E5%90%8C%E7%9A%84%E5%85%83%E7%B4%A0%E4%B8%AD%E5%8F%96%E5%87%BAn%E4%B8%AA%E5%B9%B6%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%8E%92%E5%88%97(Java%E5%AE%9E%E7%8E%B0).html</url>
      
        <content type="html"><![CDATA[<p>　　最近在看面试题的时候发现，一些基础的算法都记不住了，只是能大概说出个原理….为了加深记忆，这里对一些简单的算法题进行一个归纳。  </p><p>　　下面的代码主要解决的问题是：从m个各不相同的元素中取出n个，进行全排列，得到所有可能的结果。<br>　　即：输入为字符数组（数组内每个字符均不相同）和个数n，返回由这些字符组成的所有长度为n的字符串。<br><a id="more"></a><br>测试用例样例：<br>　　输入为{‘a’,’b’,’c’}和个数1，返回值为{“a”,”b”,”c”}<br>　　输入为{‘a’,’b’,’c’,’d’}和个数2，返回值为{“ab”,”ac”,”ad”,”ba”,”bc”,”bd”,”ca”,”cb”,”cd”,”da”,”db”,”dc”}</p><p>下面是Java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Flynnon on 17-2-26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListChars</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chars 总的字符序列（数组）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n     要取出的字符的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doit</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || chars == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Character&gt; charList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//通过这一步初始化序列的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            charList.add(<span class="string">'#'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        listAll(charList, chars, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从m个元素中任取n个并对结果进行全排列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list   用于承载可能的排列情况的List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chars  总的字符数组，长度为m</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n      从中取得字符个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAll</span><span class="params">(List&lt;Character&gt; list, <span class="keyword">char</span>[] chars, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//这里偷懒，直接打印了....</span></span><br><span class="line">            System.out.println(list);                   <span class="comment">// 输出一种可能的排列</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> aChar : chars) &#123;                      <span class="comment">// 暴力尝试</span></span><br><span class="line">            <span class="keyword">if</span> (!list.contains(aChar)) &#123;                <span class="comment">// 若List中不包含这一位元素</span></span><br><span class="line">                list.set(list.size() - n, aChar);       <span class="comment">// 将当前元素加入</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;                                    <span class="comment">// 否则跳到下一位</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            listAll(list, chars, n - <span class="number">1</span>);                <span class="comment">// 下一位</span></span><br><span class="line">            list.set(list.size() - n, <span class="string">'#'</span>);             <span class="comment">// 还原</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  以字符数组承载总的字符集合</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>&#125;;</span><br><span class="line">        ListChars.doit(chars, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　下面是测试用例及结果，与预期结果一致。<br><img src="https://i.loli.net/2018/11/18/5bf03f2086ef3.png" alt="测试用例一"></p><p><img src="https://i.loli.net/2018/11/18/5bf03f3b5abb6.png" alt="测试用例二"></p><center><small><strong>由于本人水平有限，本文难免存在谬误，欢迎批评指正！</strong></small></center><!-- ListChars_result_0.png and ListChars_result_1.png -->]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二叉树的递归构建及先序、中序、后序、层序遍历(Java实现)</title>
      <link href="/2017/02/25-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E6%9E%84%E5%BB%BA%E5%8F%8A%E5%85%88%E5%BA%8F%E3%80%81%E4%B8%AD%E5%BA%8F%E3%80%81%E5%90%8E%E5%BA%8F%E3%80%81%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86(%E9%80%92%E5%BD%92%E5%92%8C%E5%BE%AA%E7%8E%AF).html"/>
      <url>/2017/02/25-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E6%9E%84%E5%BB%BA%E5%8F%8A%E5%85%88%E5%BA%8F%E3%80%81%E4%B8%AD%E5%BA%8F%E3%80%81%E5%90%8E%E5%BA%8F%E3%80%81%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86(%E9%80%92%E5%BD%92%E5%92%8C%E5%BE%AA%E7%8E%AF).html</url>
      
        <content type="html"><![CDATA[<p>　　最近在看面试题的时候发现，一些基础的算法都记不住了，只是能大概说出个原理….为了加深记忆，这里对一些简单的算法题进行一个归纳。</p><p>　　下面的代码主要展示的是：二叉树的递归构建，先序、中序、后序遍历（递归和循环），层序遍历的Java语言实现<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Created by Flynnon on 17-2-25.</span></span><br><span class="line"><span class="comment">  对二叉树的递归定义、前序、后序、中序、层序遍历方法的归纳</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义节点类</span></span><br><span class="line"><span class="comment"> * 为了简单就不定义getter/setter方法了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = v;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对二叉树进行操作的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintBinaryTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PrintBinaryTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"该工具类不应该被实例化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 层序遍历二叉树（每一行从左到右，整体上从上到下）</span></span><br><span class="line"><span class="comment">     * 主要思路：利用队列先进先出的性质保存顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 要遍历的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">levelTraversal</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Node&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            Node temp = q.poll();</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.print(temp.value + <span class="string">"  "</span>);</span><br><span class="line">                q.add(temp.left);</span><br><span class="line">                q.add(temp.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历二叉树（递归） root-&gt;left-&gt;right</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 要遍历的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderRec</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(root.value + <span class="string">"  "</span>);</span><br><span class="line">        preOrderRec(root.left);</span><br><span class="line">        preOrderRec(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历二叉树（非递归） root-&gt;left-&gt;right</span></span><br><span class="line"><span class="comment">     * 主要思路：利用栈保存未打印的节点，然后逐个出栈处理，在此过程中更新栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 要遍历的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderUnRec</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        Node temp;</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;            <span class="comment">//root==null时，只会空转一个循环，因此无需判断</span></span><br><span class="line">            temp = stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.print(temp.value + <span class="string">"  "</span>);</span><br><span class="line">                stack.push(temp.right);     <span class="comment">//注意：这里的入栈顺序是先right后left</span></span><br><span class="line">                stack.push(temp.left);      <span class="comment">//     以保证从栈中取出时为先left后right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序遍历二叉树（递归）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 要遍历的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderRec</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        postOrderRec(root.left);</span><br><span class="line">        postOrderRec(root.right);</span><br><span class="line">        System.out.print(root.value + <span class="string">"  "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序遍历二叉树（非递归） left-&gt;right-&gt;root</span></span><br><span class="line"><span class="comment">     * 主要思路：利用栈保存未打印的节点，然后逐个出栈，进行判断，并根据需要更新栈</span></span><br><span class="line"><span class="comment">     *         因为是处理完左右子树后，再处理根(回溯)，所以需要一个记录上一个被打印的节点的引用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 要遍历的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderUnRec</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="comment">//cur:当前节点  pre:上一个被打印的节点</span></span><br><span class="line">        Node cur, pre = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">            <span class="comment">//查看（不是取出）栈顶的结点</span></span><br><span class="line">            cur = stack.peek();</span><br><span class="line">            <span class="comment">//如果当前结点没有孩子结点（叶子节点）</span></span><br><span class="line">            <span class="comment">//或者孩子节点都已被打印过（这里不可能出现有两个子节点却只打印了其中一个的情况）</span></span><br><span class="line">            <span class="comment">//说明该打印当前节点了</span></span><br><span class="line">            <span class="keyword">if</span> ((cur.left == <span class="keyword">null</span> &amp;&amp; cur.right == <span class="keyword">null</span>) ||</span><br><span class="line">                    (pre != <span class="keyword">null</span> &amp;&amp; (pre == cur.left || pre == cur.right))) &#123;</span><br><span class="line">                System.out.print(cur.value + <span class="string">"  "</span>);  <span class="comment">//打印当前结点</span></span><br><span class="line">                stack.pop();                         <span class="comment">//被打印的节点（当前节点）出栈</span></span><br><span class="line">                pre = cur;                           <span class="comment">//更新pre的值</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>)          <span class="comment">//若未轮到当前节点，将当前节点的右节子点、左子节点入栈</span></span><br><span class="line">                    stack.push(cur.right);      <span class="comment">//注意：这里的入栈顺序是先right后left</span></span><br><span class="line">                <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>)           <span class="comment">//     以保证从栈中取出时为先left后right</span></span><br><span class="line">                    stack.push(cur.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历二叉树（递归）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 要遍历的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrderRec</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inOrderRec(root.left);</span><br><span class="line">        System.out.print(root.value + <span class="string">"  "</span>);</span><br><span class="line">        inOrderRec(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历二叉树（非递归） left-&gt;root-&gt;right</span></span><br><span class="line"><span class="comment">     * 主要思路：模拟递归的过程，将左子树节点不断的压入栈，直到左叶子，然后处理栈顶节点的右子树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 要遍历的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrderUnRec</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Node cur = root;                    <span class="comment">//纯粹是为了好看...JVM会优化</span></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span> || !stack.isEmpty()) &#123;  <span class="comment">//当root==null时，不会进入循环，因此无需判断</span></span><br><span class="line">            <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;           <span class="comment">//从当前节点开始，从上到下将最左边的那一列节点入栈</span></span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = stack.pop();              <span class="comment">//取出栈顶的节点（该节点左节点为null，因此现在该打印它）</span></span><br><span class="line">            System.out.print(cur.value + <span class="string">"  "</span>);</span><br><span class="line">            cur = cur.right;                <span class="comment">//定位到已打印的节点的右子节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序递归构造二叉树 root-&gt;left-&gt;right</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scanner 输入流，用于读取节点值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 构造完成的二叉树的根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">createTreeNode</span><span class="params">(Scanner scanner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> scanner!=<span class="keyword">null</span>;</span><br><span class="line">        Node root = <span class="keyword">null</span>;                 <span class="comment">//声明当前根节点</span></span><br><span class="line">        <span class="keyword">int</span> data = scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (data &gt; <span class="number">0</span>) &#123;                             <span class="comment">//若当前节点存在（这里为了简单以负数为占位符）</span></span><br><span class="line">            root = <span class="keyword">new</span> Node(data);                  <span class="comment">//使用其它顺序构造二叉树，只需更改这三句即可</span></span><br><span class="line">            root.left = createTreeNode(scanner);</span><br><span class="line">            root.right = createTreeNode(scanner);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span></span>&#123;</span><br><span class="line">    <span class="comment">// 这里以节点值分别为1-7的满二叉树为例</span></span><br><span class="line">    <span class="comment">// 1 2 4 -1 -1 5 -1 -1 3 6 -1 -1 7 -1 -1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Node root = PrintBinaryTree.createTreeNode(sc);</span><br><span class="line">        sc.close();</span><br><span class="line">        System.out.print(<span class="string">"层序遍历:"</span>);</span><br><span class="line">        PrintBinaryTree.levelTraversal(root);</span><br><span class="line">        System.out.print(<span class="string">"\n中序递归遍历:"</span>);</span><br><span class="line">        PrintBinaryTree.inOrderRec(root);</span><br><span class="line">        System.out.print(<span class="string">"\n中序非递归遍历:"</span>);</span><br><span class="line">        PrintBinaryTree.inOrderUnRec(root);</span><br><span class="line">        System.out.print(<span class="string">"\n前序递归遍历:"</span>);</span><br><span class="line">        PrintBinaryTree.preOrderRec(root);</span><br><span class="line">        System.out.print(<span class="string">"\n前序非递归遍历:"</span>);</span><br><span class="line">        PrintBinaryTree.preOrderUnRec(root);</span><br><span class="line">        System.out.print(<span class="string">"\n后序递归遍历:"</span>);</span><br><span class="line">        PrintBinaryTree.postOrderRec(root);</span><br><span class="line">        System.out.print(<span class="string">"\n后序非递归遍历:"</span>);</span><br><span class="line">        PrintBinaryTree.postOrderUnRec(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是测试结果截图（本测试用例没问题）：<br><img src="https://i.loli.net/2018/11/18/5bf040263b14f.png" alt="测试结果"></p><p><center><small><strong>由于本人水平有限，本文难免存在谬误，欢迎批评指正！</strong></small><center></center></center></p><!-- binaryTree_test_result.png -->]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java控制访问权限的方法</title>
      <link href="/2016/11/05-Java%E4%B8%AD%E6%8E%A7%E5%88%B6%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E7%9A%84%E6%96%B9%E6%B3%95.html"/>
      <url>/2016/11/05-Java%E4%B8%AD%E6%8E%A7%E5%88%B6%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E7%9A%84%E6%96%B9%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<p>　　这篇博客主要用来介绍Java中的访问权限.  </p><h3 id="引入访问控制权限"><a href="#引入访问控制权限" class="headerlink" title="引入访问控制权限"></a>引入访问控制权限</h3><p>　　我们都知道，一个通用类库(如：JDK)开发出来的目的是让普通开发者重用以节省开发时间与精力，但是类库的设计不可能在刚开始就尽善尽美，普通开发者在对类库的使用过程中，总能发现很多由于设计不当所出现的问题，这时，类库开发者就需要对类库进行重构。<br>　　而类库的更新不能影响到消费者程序的执行，这就引出了面向对象设计的一个基本问题：类库开发者如何区分可以变动的部分和不可以变动的部分？<br><a id="more"></a><br>　　Java这门语言在设计的时候吸收了很多前人的经验，所以这个问题也被抛了出来，而它解决这个问题的方法是通过访问修饰符，即限制普通开发者访问的部分。</p><h3 id="对于访问权限成型的一些思考"><a href="#对于访问权限成型的一些思考" class="headerlink" title="对于访问权限成型的一些思考"></a>对于访问权限成型的一些思考</h3><p>　　在设计时很容易想到使用二分，即将访问权限分为可以访问与不能访问两种，也就是引入public与private。如果域被public修饰，说明这个部分可以被任何人访问到；如果域被private修饰，则除了当前类其他人都不能访问。但这样又会出现一些问题，即使用绝对的二分产生的副作用太大，被private修饰的域连类库开发者本身都无法访问了。<br>　　Java在引入包进行命名空间的管理之后，就有了一种较为优秀的解决方法，即引入friendly与protected，对于具有friendly访问权限的域，只有同一个包内的类可以访问；对于具有protected访问权限的域，只有此域所在类的子类或与此类在同一个包内的类可以访问，这样就划分了较为清楚的界限。<br>　　一般来说，用户自己写的类会被划分到自己特有的包中，这种情况下，这种访问权限控制的方式对于类库开发者与用户来说是正确的。但是，并不是所有的用户都会遵守规则，如果用户恶意使用类库开发者使用的包，还是会产生权限泄露，即用户访问到了类库开发者隐藏的东西。对于这种情况有什么解决方法么？<br>　　个人认为：这个问题根本不是问题….因为权限控制实际上是一种约定，这种约定的内涵是：在使用双方都遵守的情况下，双方都可以得到较满意的答案（即：类库开发者拥有重构的　　对于类库开发者来说唯一的约束是那些自己公开的API。也就是说对于已经公开的API，也许会有用户使用，这种情况下一定不能更改API以避免影响用户已经开发过的Java应用程序（保证向下兼容），那么对于类库开发者认为用户一定无法访问的部分就可以随便改了，在用户自己违反了约定的情况下，他的权益就无法也无需得到保证。</p><h3 id="Java访问权限关键字介绍"><a href="#Java访问权限关键字介绍" class="headerlink" title="Java访问权限关键字介绍"></a>Java访问权限关键字介绍</h3><p>　　上面说到Java中分了四种访问权限，一表胜千言，下面是详细的介绍。</p><table><thead><tr><th>关键字</th><th style="text-align:center">含义</th><th style="text-align:center">类内部</th><th style="text-align:center">本包</th><th style="text-align:center">子类</th><th style="text-align:center">外部包</th></tr></thead><tbody><tr><td>public</td><td style="text-align:center">公有的</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td>protected</td><td style="text-align:center">受保护的</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td>default</td><td style="text-align:center">缺省(<small>包访问权限</small>)</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td>private</td><td style="text-align:center">私有的</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table><h3 id="一些需要注意的小问题"><a href="#一些需要注意的小问题" class="headerlink" title="一些需要注意的小问题"></a>一些需要注意的小问题</h3><ul><li>Java的权限控制只停留在编译期间。<ul><li>它不会在编译生成的class文件中留下任何的痕迹，只在编译的时候进行访问控制的检查。因此，通过反射可以访问任何包下任何类中的成员，包括私有成员。</li></ul></li><li>类的访问修饰符。<ul><li>对于一个非内部类来说，因为它直属于包而不属于任何一个类，所以只有包访问权限与公有权限对它来说才有意义。<br>也就是说，只能用public或者默认权限来修饰非内部类。</li><li>对于一个内部类来说，它直属于一个类，因此四种权限都可以对其起作用。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习之路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识AJAX</title>
      <link href="/2016/09/06-%E5%88%9D%E8%AF%86AJAX.html"/>
      <url>/2016/09/06-%E5%88%9D%E8%AF%86AJAX.html</url>
      
        <content type="html"><![CDATA[<p>这几天一直在看书，大致了解了AJAX技术，在这里做一个小小的总结。</p><h3 id="简单了解AJAX"><a href="#简单了解AJAX" class="headerlink" title="简单了解AJAX"></a>简单了解AJAX</h3><p>　　我觉得维基百科是比较准确的一个信息源，因此，我们先来看维基百科中对于AJAX的定义。</p><blockquote><p>在维基百科上我们可以看到：<br>AJAX即“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术），指的是一套综合了多项技术的浏览器端网页开发技术。</p></blockquote><p>　　那么，现在我们对AJAX有一个大致的印象：AJAX=JavaScript+XML。而js和xml我们至少都应该听说过。<br><a id="more"></a></p><h3 id="AJAX为什么会出现"><a href="#AJAX为什么会出现" class="headerlink" title="AJAX为什么会出现"></a>AJAX为什么会出现</h3><p>　　回顾我们的开发旅程，在使用Servlet+JSP+JavaBean开发基于B/S架构的应用的过程中，交互是如何实现的？用户在网页端填写并提交表单（Form），然后点击提交按钮向网页服务器发送请求（Request）。服务器接收请求并处理传来的表单，返回响应(Response)，浏览器取得响应信息后，通过解析将页面展示在浏览器上。<br>　　然而，这种模式存在很多问题。现在看这样一个例子：浏览器端展示了用户登陆界面，当用户输入用户名、密码及验证码后，数据被发送到了服务器，假定我们在Servlet中处理请求后发现用户名及密码不匹配，接下来的处理流程是什么样的？<br>　　我们会将包含页面及错误信息的响应返回给浏览器端，浏览器在解析响应后对这些信息进行展示。使用这样的开发流程，无论后台业务逻辑实现的多么完美都会存在一些固有的问题：<br>　　首先，十分<strong>浪费带宽。</strong>在前后两个页面中除了展示错误信息的部分外其它元素全都是相同的，完全没有必要再次传输，在设计者的预想中，只需要对第一次的界面信息进行复用就可以了。<br>　　其次，<strong>用户体验差。</strong>在传统的开发模式下，假设我们是用户，一旦在登陆页面的表单中不小心输入了错误的密码(因为密码框是密文，所以无法得知具体的输入)，在提交表单后就会出现下列情况：等待一段时间后页面才被刷新、界面提示用户名错误、原来的输入都被清空。这样我们又得重新输入一遍用户名及密码，体验极不友好。在我们的的网速比较慢的情况下，体验还会更差。这对于产品经理及网站的用户来说都是不可忍受的。<br>　　那么有没有什么方法可以解决这种问题呢？也就是说，能不能在用户刚输入密码时就得到服务器端的反馈呢？</p><h3 id="AJAX解决上述问题的思路"><a href="#AJAX解决上述问题的思路" class="headerlink" title="AJAX解决上述问题的思路"></a>AJAX解决上述问题的思路</h3><p>　　技术的更新总是一环套一环的，在js的XMLHttpRequest对象出现之前这个问题是没有优雅的解决办法的，只能使用一些丑陋的方法并且效果还不是特别好。但是在XMLHttpRequest对象出现之后，前辈们立刻就想到了一种比较好的解决方法，即：使用XMLHttpRequest对象作为Agent来将请求发送给服务器，并用它来接收服务器返回的数据，这样就可以不跳转页面完成数据的交互，而且只需要传输少量必要的数据，因此对网速的要求也变低了。<br>　　但是，还有两个问题没有解决：<br>　　1.如何根据服务器端返回的数据动态更改页面，以达到与用户交互的作用？<br>　　2.如何规定服务器发送回来的数据格式？<br>　　下面来看前辈们选择的解决方法：<br>　　对于1：前辈们选择了使用JavaScript。个人认为这样做的原因有两个，第一，JavaScript足够流行，几乎所有的主流浏览器都对JavaScript提供了支持；第二，JavaScript可以通过DOM编程的方式来动态的改变网页的内容。<br>　　对于2：前辈们选择了XML，我想可能是因为它语法足够严格、语义明确而且更加通用吧。但是我认为传输的数据格式对使用AJAX并没有影响。例如，我们可以选择传输Json来使传输的数据更加少，甚至可以只是传输一段有意义的字符串，只要服务器端开发者与浏览器端开发者对字符串格式进行了约定即可。</p><h3 id="AJAX的准确定义"><a href="#AJAX的准确定义" class="headerlink" title="AJAX的准确定义"></a>AJAX的准确定义</h3><p>　　在了解了上面的内容后，我们就可以对AJAX进行一个准确的定义了：<strong>AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</strong><br>　　下面我们来看一下，如何利用AJAX技术进行开发。</p><h3 id="使用AJAX开发的步骤-概述"><a href="#使用AJAX开发的步骤-概述" class="headerlink" title="使用AJAX开发的步骤-概述"></a>使用AJAX开发的步骤-概述</h3><p>　　关于AJAX更详细的介绍，可以查看<a href="http://www.w3school.com.cn/ajax/index.asp">W3School中对于AJAX的介绍</a><br>　　下面是我简单总结的AJAX实现步骤：<br>　　1. 我们需要一个XMLHttpRequest对象。（我们都知道IE低版本浏览器的标准很很多都与主流标准不兼容。很不幸，对于XMLHttpRequest对象也是一样的….）<br>　　因此，一个XMLHttpRequest对象的获取过程可以是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> httpXml = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">    httpXml = <span class="keyword">new</span> XMLHttpRequest();  <span class="comment">//针对现代浏览器，IE7及以上版本</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</span><br><span class="line">    httpXml = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);  <span class="comment">//针对IE5,IE6版本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　2.我们需要为这个XMLHttpRequest对象注册它要进行的操作（通过回调），并根据返回的请求状态与HTTP状态码来查看消息的状态，并确定在何种情况下我们要进行何种操作。<br>　　这个过程是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为XMLHttpRequest对象的onreadystatechange属性注册</span></span><br><span class="line">httpXml.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//  在回调函数中根据请求状态与返回的HTTP状态码来选择相应的操作处理数据</span></span><br><span class="line">    <span class="keyword">if</span>(httpXml.readyState==<span class="number">4</span>&amp;&amp;httpXml.status==<span class="number">200</span>)&#123;</span><br><span class="line">        <span class="comment">//这里只是简单的显示接收到的文本信息</span></span><br><span class="line">        alert(httpXml.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20160902211634032" alt="XMLHttpRequest的重要属性"><br>　　3.我们需要进行请求发送的参数设置。<br>　　这个过程是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数原型：open(method,url,async,username,password)</span></span><br><span class="line"><span class="comment">//method            ---&gt;请求方式:GET,POST或HEAD</span></span><br><span class="line"><span class="comment">//url               ---&gt;请求的地址  GET提交方式可以在后面加上参数</span></span><br><span class="line"><span class="comment">//async             ---&gt;请求是否异步执行，true---异步，false---同步   默认为true</span></span><br><span class="line"><span class="comment">//username,password ---&gt;可选，为url所需的授权提供认证资格。如果不为空，会覆盖掉url中指定的资格</span></span><br><span class="line">httpXml.open(<span class="string">"GET"</span>,<span class="string">"http://localhost:8080/aaa/MyServlet"</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p> 　　4.要真正的发送请求啦！  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  参数为请求参数,POST提交内容格式为---&gt;"username=taffy&amp;password=666",GET为-----&gt;空</span></span><br><span class="line"><span class="comment">//  注意：若为POST请求方式，还需设置一个http请求头(应该位于open之后,send之前)</span></span><br><span class="line"><span class="comment">// 即 setRequestHeader("CONTENT-TYPE","application/x-www-form-urlencoded");    标志form表单的enctype属性</span></span><br><span class="line">    httpXml.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20160902211400044" alt="open及send方法介绍"><br>　　这样，一个简单的AJAX过程就完成了。<br>　　一些没有介绍的小知识点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//XMLHttpRequest对象的重要属性</span></span><br><span class="line">responseText   得到返回的文本信息</span><br><span class="line">responseXML    得到返回的XML信息</span><br><span class="line"><span class="comment">//XMLHttpRequest对象的重要方法</span></span><br><span class="line">getResponseHeader()   得到指定头部信息</span><br><span class="line">getAllResponseHeaders() 将 HTTP响应头部作为未解析的字符串返回</span><br><span class="line"><span class="comment">//XMLHttpRequest对象的控制方法</span></span><br><span class="line">abort()    取消当前响应，关闭连接，将readyState置<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="简单的Demo"><a href="#简单的Demo" class="headerlink" title="简单的Demo"></a>简单的Demo</h3><center>register.html（客户端页面）</center><figure class="highlight html"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--&gt;onload:页面加载完成后调用 &lt;--&gt;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> user = <span class="built_in">document</span>.getElementById(<span class="string">"my_user"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取XMLHttpRequest对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> httpXml = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span></span><br><span class="line"><span class="javascript">            httpXml = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">//针对现代浏览器，IE7及以上版本</span></span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</span></span><br><span class="line"><span class="javascript">            httpXml = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>); <span class="comment">//针对IE5,IE6版本</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        user.onblur=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            httpXml.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(httpXml.readyState==<span class="number">4</span>&amp;&amp;httpXml.status==<span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(httpXml.responseText!=<span class="string">"true"</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">"用户名不存在"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        httpXml.open(<span class="string">"GET"</span>,<span class="string">"http://localhost:8080/aaa/MyServlet?user="</span>+user.value,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        httpXml.send(<span class="literal">null</span>);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:8080/aaa/AnotherServlet"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"my_user"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"my_pass"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><center>MyServlet.java（服务器端逻辑）</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class MyServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/MyServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String username = request.getParameter(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (username!=<span class="keyword">null</span>&amp;&amp;!username.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (username.equals(<span class="string">"admin"</span>)) &#123;</span><br><span class="line">                out.write(<span class="string">"true"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                out.write(<span class="string">"false"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            out.write(<span class="string">"false"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的小demo可以正常实现逻辑，就不放结果了….</p><h3 id="Ajax的优缺点"><a href="#Ajax的优缺点" class="headerlink" title="Ajax的优缺点"></a>Ajax的优缺点</h3><p>　　优点：<br>　　能在不更新整个页面的前提下维护数据。这使得Web应用程序更为迅捷地回应用户动作，并避免了在网络上发送重复的信息，减少了流量。<br>　　缺点：<br>　　1.它可能破坏浏览器的后退功能。在动态更新页面的情况下，用户无法回到前一个页面状态，因为浏览器仅能记下历史记录中的静态页面(现代浏览器一般都可以解决这个问题)；<br>　　2.使用动态页面更新使得用户难于将某个特定的状态保存到收藏夹中。</p><center>大致就是这样啦。本人水平有限，欢迎指正。</center>]]></content>
      
      
      <categories>
          
          <category> 学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习之路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello Hexo!</title>
      <link href="/2016/09/02-HelloHexo.html"/>
      <url>/2016/09/02-HelloHexo.html</url>
      
        <content type="html"><![CDATA[<p>其实在很久之前我就想搭建一个个人博客，可是因为自己太懒，而且不敢去开始，所以一直没有付诸行动。<br>最近几天，在看到了田浩同学分享的特别帅的个人博客页面后，想有一个自己个人博客的冲动突然就上来了。<br>于是在经历了两天的漫无目的地寻找之后于2016-09-02成功建立了自己的个人博客。<br>以后应该会将自己在学习的路上的一些想法与经验写在这里。<br><del>不过话说回来….也不知道有没有人看….</del><br><br><br><br><br><br><br>这里附上一些参考链接：<br><a href="https://hexo.io/zh-cn/docs/index.html">建立这篇博客时参考的文章地址</a><br><a href="http://tianhao.site/">田浩同学帅炸了的博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
